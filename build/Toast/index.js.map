{"version":3,"file":"index.js","sources":["../../src/Toast/Toast.tsx","../../src/Toast/ToastContainer.tsx"],"sourcesContent":["import React, { FC, ReactNode } from \"react\";\nimport { toast as _toast, ToastOptions, UpdateOptions } from \"react-toastify\";\nimport { appendClass } from \"src/utils\";\n\nimport { copyStringToClipboard } from \"src/utils/clipboard\";\n\ntype ToastType = \"success\" | \"error\" | \"warning\" | \"info\" | \"loading\" | \"none\";\n\nconst iconType = (type: ToastType): string => {\n  switch (type) {\n    case \"success\":\n      return \"text-success icon-check-outline\";\n    case \"error\":\n      return \"text-danger icon-error-outline\";\n    case \"warning\":\n      return \"text-warning icon-warning-outline\";\n    case \"info\":\n      return \"text-info icon-info-outline\";\n    case \"loading\":\n      return \"text-muted icon-spinner spin\";\n    case \"none\":\n      return null;\n    default:\n      return \"text-muted icon-alert\";\n  }\n};\n\nconst ToastIcon = ({ type }) => {\n  return type ? (\n    <div className=\"toast__icon\">\n      <span className={iconType(type)} />\n    </div>\n  ) : null;\n};\n\nexport type ToastProps = {\n  title: ReactNode;\n  message: ReactNode;\n  type: ToastType;\n  copyError?: boolean;\n  bordered?: boolean;\n};\n\nexport const Toast: FC<ToastProps> = ({\n  title,\n  message,\n  type,\n  copyError = false,\n  bordered = false,\n}) => (\n  <div className={`toast${appendClass(bordered, \"toast--bordered\")}`}>\n    <ToastIcon type={type} />\n    <div className=\"toast__body\">\n      {title ? <div className=\"toast__title\">{title}</div> : null}\n      {message ? (\n        <div className=\"toast__message\">\n          {message}\n          {type === \"error\" && copyError ? (\n            <>\n              <br />\n              <br />\n              <a\n                onClick={() =>\n                  typeof message === \"string\" || typeof message === \"number\"\n                    ? void copyStringToClipboard(message)\n                    : void 0\n                }\n              >\n                Copy to clipboard\n              </a>\n            </>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  </div>\n);\n\ntype ToastFunction = (\n  title: ReactNode,\n  message: ReactNode,\n  copyError?: boolean,\n  containerId?: string,\n  args?: Record<string, unknown>\n) => React.ReactText;\n\nexport interface IToast {\n  (\n    type: ToastType,\n    title: ReactNode,\n    message: ReactNode,\n    copyError?: boolean,\n    containerId?: string,\n    args?: Partial<ToastOptions>\n  ): React.ReactText;\n}\n\ntype Toasts = {\n  [x in ToastType]: ToastFunction;\n};\n\ninterface ToastMethods {\n  update: (\n    toastId: React.ReactText,\n    updates: ToastProps,\n    options?: UpdateOptions\n  ) => void;\n  dismiss: (id?: string | number | undefined) => false | void;\n}\n\nexport const toast: IToast & Toasts & ToastMethods = (\n  type,\n  title,\n  message,\n  copyError = true,\n  containerId = \"_GLOBAL_\",\n  args = {}\n): React.ReactText => {\n  if (type === \"loading\") {\n    args.autoClose ??= false;\n  }\n\n  return _toast(() => <Toast {...{ type, title, message, copyError }} />, {\n    containerId,\n    ...args,\n  });\n};\n\ntoast.success = (...args) => toast(\"success\", ...args);\ntoast.error = (...args) => toast(\"error\", ...args);\ntoast.warning = (...args) => toast(\"warning\", ...args);\ntoast.info = (...args) => toast(\"info\", ...args);\ntoast.loading = (...args) => toast(\"loading\", ...args);\ntoast.none = (...args) => toast(\"none\", ...args);\ntoast.update = (toastId, updates, options) => {\n  options.render = <Toast {...updates} />;\n  _toast.update(toastId, options);\n};\ntoast.dismiss = (...args) => _toast.dismiss(...args);\n","import React from \"react\";\nimport {\n  ToastContainer as ToastifyContainer,\n  ToastContainerProps,\n  Slide,\n} from \"react-toastify\";\nimport { appendClass } from \"src/utils\";\n\ntype ExtraProps = {\n  bordered?: boolean;\n  shadow?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport const ToastContainer = ({\n  position = \"bottom-right\",\n  autoClose = 5000,\n  draggable = false,\n  hideProgressBar = true,\n  containerId = \"_GLOBAL_\",\n  transition = Slide,\n  bordered,\n  shadow = \"lg\",\n  bodyClassName,\n  toastClassName,\n  ...props\n}: ToastContainerProps & ExtraProps): JSX.Element => (\n  <ToastifyContainer\n    transition={transition}\n    position={position}\n    autoClose={autoClose}\n    draggable={draggable}\n    hideProgressBar={hideProgressBar}\n    containerId={containerId}\n    {...props}\n    closeButton={false}\n    bodyClassName={`${bodyClassName || \"\"}${appendClass(\n      bordered,\n      \"toast--bordered\"\n    )}`}\n    toastClassName={`${toastClassName || \"\"}${appendClass(\n      shadow === \"md\",\n      \"toast--shadow-md\"\n    )}${appendClass(shadow === \"sm\", \"toast--shadow-sm\")}`}\n    style={{\n      width: \"unset\",\n    }}\n  />\n);\n"],"names":["_extends","args","iconType","type","ToastIcon","div","className","span","Toast","title","message","copyError","bordered","appendClass","br","a","onClick","copyStringToClipboard","toast","containerId","autoClose","_toast","success","error","warning","info","loading","none","update","toastId","updates","options","render","dismiss","ToastContainer","position","draggable","hideProgressBar","transition","Slide","shadow","bodyClassName","toastClassName","props","ToastifyContainer","closeButton","style","width"],"mappings":"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"}