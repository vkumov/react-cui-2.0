{"version":3,"file":"index.js","sources":["../../src/Toast/Toast.tsx","../../src/Toast/ToastContainer.tsx"],"sourcesContent":["import React, { type FC, type ReactNode } from \"react\";\nimport cx from \"classnames\";\nimport {\n  toast as _toast,\n  type ToastOptions,\n  type UpdateOptions,\n} from \"react-toastify\";\n\nimport { copyStringToClipboard } from \"src/utils/clipboard\";\n\ntype ToastType = \"success\" | \"error\" | \"warning\" | \"info\" | \"loading\" | \"none\";\n\nconst iconType = (type: ToastType): string => {\n  switch (type) {\n    case \"success\":\n      return \"text-success icon-check-outline\";\n    case \"error\":\n      return \"text-danger icon-error-outline\";\n    case \"warning\":\n      return \"text-warning icon-warning-outline\";\n    case \"info\":\n      return \"text-info icon-info-outline\";\n    case \"loading\":\n      return \"text-muted icon-spinner spin\";\n    case \"none\":\n      return null;\n    default:\n      return \"text-muted icon-alert\";\n  }\n};\n\nconst ToastIcon = ({ type }) => {\n  return type ? (\n    <div className=\"toast__icon\">\n      <span className={iconType(type)} />\n    </div>\n  ) : null;\n};\n\nexport type ToastProps = {\n  title: ReactNode;\n  message: ReactNode;\n  type: ToastType;\n  copyError?: boolean;\n  bordered?: boolean;\n};\n\nexport const Toast: FC<ToastProps> = ({\n  title,\n  message,\n  type,\n  copyError = false,\n  bordered = false,\n}) => (\n  <div className={cx(\"toast\", { \"toast--bordered\": bordered })}>\n    <ToastIcon type={type} />\n    <div className=\"toast__body\">\n      {title ? <div className=\"toast__title\">{title}</div> : null}\n      {message ? (\n        <div className=\"toast__message\">\n          {message}\n          {type === \"error\" && copyError ? (\n            <>\n              <br />\n              <br />\n              <a\n                onClick={() =>\n                  typeof message === \"string\" || typeof message === \"number\"\n                    ? void copyStringToClipboard(message)\n                    : void 0\n                }\n              >\n                Copy to clipboard\n              </a>\n            </>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  </div>\n);\n\ntype ToastFunction = (\n  title: ReactNode,\n  message: ReactNode,\n  copyError?: boolean,\n  containerId?: string,\n  args?: Record<string, unknown>\n) => React.ReactText;\n\nexport interface IToast {\n  (\n    type: ToastType,\n    title: ReactNode,\n    message: ReactNode,\n    copyError?: boolean,\n    containerId?: string,\n    args?: Partial<ToastOptions>\n  ): React.ReactText;\n}\n\ntype Toasts = {\n  [x in ToastType]: ToastFunction;\n};\n\ninterface ToastMethods {\n  update: (\n    toastId: React.ReactText,\n    updates: ToastProps,\n    options?: UpdateOptions\n  ) => void;\n  dismiss: (id?: string | number | undefined) => false | void;\n}\n\nexport const toast: IToast & Toasts & ToastMethods = (\n  type,\n  title,\n  message,\n  copyError = true,\n  containerId = \"_GLOBAL_\",\n  args = {}\n): React.ReactText => {\n  if (type === \"loading\") {\n    args.autoClose ??= false;\n  }\n\n  return _toast(() => <Toast {...{ type, title, message, copyError }} />, {\n    containerId,\n    ...args,\n  });\n};\n\ntoast.success = (...args) => toast(\"success\", ...args);\ntoast.error = (...args) => toast(\"error\", ...args);\ntoast.warning = (...args) => toast(\"warning\", ...args);\ntoast.info = (...args) => toast(\"info\", ...args);\ntoast.loading = (...args) => toast(\"loading\", ...args);\ntoast.none = (...args) => toast(\"none\", ...args);\ntoast.update = (toastId, updates, options) => {\n  options.render = <Toast {...updates} />;\n  _toast.update(toastId, options);\n};\ntoast.dismiss = (...args) => _toast.dismiss(...args);\n","import React from \"react\";\nimport cx from \"classnames\";\nimport {\n  Slide,\n  ToastContainer as ToastifyContainer,\n  type ToastContainerProps,\n} from \"react-toastify\";\n\ntype ExtraProps = {\n  bordered?: boolean;\n  shadow?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport const ToastContainer = ({\n  position = \"bottom-right\",\n  autoClose = 5000,\n  draggable = false,\n  hideProgressBar = true,\n  containerId = \"_GLOBAL_\",\n  transition = Slide,\n  bordered,\n  shadow = \"lg\",\n  bodyClassName,\n  toastClassName,\n  ...props\n}: ToastContainerProps & ExtraProps): JSX.Element => (\n  <ToastifyContainer\n    transition={transition}\n    position={position}\n    autoClose={autoClose}\n    draggable={draggable}\n    hideProgressBar={hideProgressBar}\n    containerId={containerId}\n    {...props}\n    closeButton={false}\n    bodyClassName={\n      typeof bodyClassName === \"function\"\n        ? bodyClassName\n        : cx({ [bodyClassName]: bodyClassName, \"toast--bordered\": bordered })\n    }\n    toastClassName={\n      typeof toastClassName === \"function\"\n        ? toastClassName\n        : cx({\n            [toastClassName]: toastClassName,\n            [`toast--shadow-${shadow}`]: shadow !== \"lg\",\n          })\n    }\n    style={{\n      width: \"unset\",\n    }}\n  />\n);\n"],"names":["iconType","type","ToastIcon","jsx","Toast","title","message","copyError","bordered","jsxs","cx","Fragment","copyStringToClipboard","toast","containerId","args","_toast","toastId","updates","options","ToastContainer","position","autoClose","draggable","hideProgressBar","transition","Slide","shadow","bodyClassName","toastClassName","props","ToastifyContainer"],"mappings":"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"}