{"version":3,"file":"index.js","sources":["../../src/Dropdown/Menu.tsx","../../src/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, { FC, forwardRef, HTMLProps, ReactNode } from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { appendClass } from \"src/utils\";\n\ntype ElementProps = {\n  selected?: boolean;\n  icon?: string;\n  children: ReactNode;\n} & HTMLProps<HTMLAnchorElement>;\n\nexport const Element: FC<ElementProps> = ({\n  selected = false,\n  icon = null,\n  children,\n  className = null,\n  ...props\n}) => (\n  <a\n    className={`${selected ? \"selected\" : \"\"}${\n      className ? ` ${className}` : \"\"\n    }`}\n    {...props}\n  >\n    {icon ? <span className={`icon-${icon}`} /> : null}\n    <ConditionalWrapper\n      condition={Boolean(icon)}\n      wrapper={<span className=\"qtr-margin-left\" />}\n    >\n      {children}\n    </ConditionalWrapper>\n  </a>\n);\n\nexport const Divider = (): JSX.Element => <div className=\"divider\" />;\n\ntype GroupProps = {\n  children: ReactNode;\n};\n\nexport const Group: FC<GroupProps> = ({ children }) => (\n  <div className=\"dropdown__group\">{children}</div>\n);\n\ntype GroupHeaderProps = {\n  header: ReactNode;\n};\n\nexport const GroupHeader: FC<GroupHeaderProps> = ({ header }) => (\n  <div className=\"dropdown__group-header\">{header}</div>\n);\n\nexport const Menu = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div\n        className={`dropdown__menu${appendClass(className)}`}\n        {...props}\n        ref={ref}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n","import React, {\n  FC,\n  HTMLProps,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useClickInside } from \"src/hooks/useClickInside\";\nimport { useClickOutside } from \"src/hooks/useClickOutside\";\n\nimport { appendClass } from \"src/utils\";\nimport { Divider, Element, Group, GroupHeader, Menu } from \"./Menu\";\n\ntype DropdownHeaderProps = {\n  type: string;\n  handleClick: (...args) => void;\n  className?: string;\n  header: ReactNode;\n};\n\nconst DropdownHeader: FC<DropdownHeaderProps> = ({\n  type,\n  handleClick,\n  className,\n  header,\n}) => {\n  switch (type) {\n    case \"icon\":\n      return <span onClick={handleClick} className={className} />;\n    case \"link\":\n      return (\n        <a onClick={handleClick} className={className}>\n          {header}\n        </a>\n      );\n    case \"div\":\n      return (\n        <div onClick={handleClick} className={className}>\n          {header}\n        </div>\n      );\n    case \"button\":\n      return (\n        <button\n          type=\"button\"\n          onClick={handleClick}\n          className={`btn ${className}`}\n        >\n          {header}\n        </button>\n      );\n    default:\n      return React.isValidElement(header)\n        ? React.cloneElement<any>(header, { onClick: handleClick })\n        : null;\n  }\n};\n\ntype DropdownType = \"icon\" | \"link\" | \"div\" | \"button\" | \"custom\";\n\ntype DropdownProps = {\n  type?: DropdownType;\n  className?: string;\n  header?: ReactNode;\n  openTo?: \"left\" | \"right\" | \"center\";\n  alwaysClose?: boolean;\n  onOpen?: (e) => void;\n  onClose?: (e) => void;\n  stopPropagation?: boolean;\n  divClassName?: string;\n  children: ReactNode;\n  up?: boolean;\n  isOpen?: boolean;\n} & HTMLProps<HTMLDivElement>;\n\nexport interface DropdownParts {\n  Element: typeof Element;\n  Divider: typeof Divider;\n  Group: typeof Group;\n  GroupHeader: typeof GroupHeader;\n  Menu: typeof Menu;\n}\n\nconst Dropdown: DropdownParts & FC<DropdownProps> = ({\n  openTo = \"right\",\n  children,\n  type = \"button\",\n  className = null,\n  header = null,\n  divClassName = null,\n  up = false,\n  onClose = null,\n  onOpen = null,\n  stopPropagation = false,\n  alwaysClose = false,\n  isOpen: outsideIsOpen,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const divRef = useRef<HTMLDivElement>(undefined);\n  const menuRef = useRef<HTMLDivElement>(undefined);\n\n  useEffect(() => {\n    if (typeof outsideIsOpen !== \"undefined\" && outsideIsOpen !== null)\n      setIsOpen(outsideIsOpen);\n  }, [outsideIsOpen]);\n\n  const handleHeaderClick = useCallback(\n    (e): void => {\n      if (stopPropagation) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      setIsOpen((current) => {\n        const newIsOpen = !current;\n        if (newIsOpen && onOpen) onOpen(e);\n        if (!newIsOpen && onClose) onClose(e);\n        return newIsOpen;\n      });\n    },\n    [stopPropagation, onClose, onOpen]\n  );\n\n  useClickOutside(\n    () => {\n      setIsOpen(false);\n    },\n    undefined,\n    [divRef.current]\n  );\n\n  useClickInside(\n    () => {\n      if (alwaysClose) setIsOpen(false);\n    },\n    [\"click\"],\n    [menuRef.current]\n  );\n\n  return (\n    <div\n      className={`dropdown${appendClass(\n        [\"left\", \"center\"].includes(openTo),\n        `dropdown--${openTo}`\n      )}${appendClass(up, \"dropdown--up\")}${appendClass(\n        isOpen,\n        \"active\"\n      )}${appendClass(divClassName)}`}\n      ref={divRef}\n      {...props}\n    >\n      <DropdownHeader\n        type={type}\n        handleClick={handleHeaderClick}\n        className={className}\n        header={header}\n      />\n      <Menu ref={menuRef}>{children}</Menu>\n    </div>\n  );\n};\n\nDropdown.Divider = Divider;\nDropdown.Element = Element;\nDropdown.Group = Group;\nDropdown.GroupHeader = GroupHeader;\nDropdown.Menu = Menu;\n\nexport {\n  Dropdown,\n  Element as DropdownElement,\n  Divider as DropdownDivider,\n  Group as DropdownGroup,\n  GroupHeader as DropdownGroupHeader,\n};\n"],"names":["_extends","Element","selected","icon","children","className","props","a","span","ConditionalWrapper","condition","Boolean","wrapper","Divider","div","Group","GroupHeader","header","Menu","forwardRef","ref","appendClass","DropdownHeader","type","handleClick","onClick","button","React","isValidElement","cloneElement","Dropdown","openTo","divClassName","up","onClose","onOpen","stopPropagation","alwaysClose","isOpen","outsideIsOpen","setIsOpen","useState","divRef","useRef","undefined","menuRef","useEffect","handleHeaderClick","useCallback","e","preventDefault","current","newIsOpen","useClickOutside","useClickInside","includes"],"mappings":"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"}