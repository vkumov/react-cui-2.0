{"version":3,"file":"index.js","sources":["../../src/Dropdown/Dropdown.tsx"],"sourcesContent":["import {\n  type Strategy,\n  type Placement,\n  autoUpdate,\n  flip,\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingPortal,\n  FloatingTree,\n  offset,\n  safePolygon,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingParentNodeId,\n  useFloatingTree,\n  useHover,\n  useInteractions,\n  useListNavigation,\n  useRole,\n  useTypeahead,\n} from \"@floating-ui/react\";\nimport React, {\n  type PropsWithChildren,\n  type ReactNode,\n  type ReactElement,\n  type HTMLProps,\n  Children,\n  cloneElement,\n  isValidElement,\n  useEffect,\n  useRef,\n  useState,\n  forwardRef,\n} from \"react\";\nimport cx from \"classnames\";\nimport { useMergeRefs } from \"use-callback-ref\";\nimport { Transition } from \"react-transition-group\";\n\nimport { useFloatingContext } from \"src/FloatingProvider\";\n\nimport styles from \"./Dropdown.module.scss\";\n\ntype MenuElementProps = {\n  selected?: boolean;\n  icon?: string | ReactElement;\n  submenu?: boolean;\n} & HTMLProps<HTMLAnchorElement>;\n\nexport const MenuElement = forwardRef<any, MenuElementProps>(\n  ({ selected, className, icon, children, submenu, ...props }, ref) => {\n    return (\n      <a\n        ref={ref}\n        {...props}\n        className={cx(className, {\n          selected: selected && !submenu,\n          [styles.submenu]: submenu,\n        })}\n      >\n        {icon ? (\n          isValidElement(icon) ? (\n            <>\n              {icon}\n              {isValidElement(children) ? (\n                children\n              ) : (\n                <span className=\"qtr-margin-left\">{children}</span>\n              )}\n            </>\n          ) : (\n            <>\n              <span className={icon} />\n              <span className=\"qtr-margin-left\">{children}</span>\n            </>\n          )\n        ) : (\n          children\n        )}\n      </a>\n    );\n  }\n);\n\nMenuElement.displayName = \"MenuElement\";\n\ntype DropdownProps = PropsWithChildren<{\n  label: ReactNode;\n  placement?: Placement;\n  noChevron?: boolean;\n  strategy?: Strategy;\n  portalRoot?: HTMLElement | null | undefined;\n  alwaysClose?: boolean;\n  onOpen?: () => unknown;\n}>;\n\ntype MenuComponentProps = {\n  nested?: boolean;\n} & DropdownProps;\n\nexport const Menu = forwardRef<\n  any,\n  MenuComponentProps & Omit<HTMLProps<HTMLButtonElement>, \"label\">\n>(\n  (\n    {\n      children,\n      label,\n      noChevron,\n      placement,\n      strategy: providedStrategy,\n      portalRoot,\n      alwaysClose,\n      onOpen,\n      nested,\n      ...props\n    },\n    ref\n  ) => {\n    const [open, setOpen] = useState(false);\n    const [activeIndex, setActiveIndex] = useState<number | null>(null);\n    const [allowHover, setAllowHover] = useState(false);\n\n    const listItemsRef = useRef<Array<HTMLButtonElement | null>>([]);\n    const listContentRef = useRef(\n      Children.map(children, (child) =>\n        isValidElement(child) ? child.props.label : null\n      ) as Array<string | null>\n    );\n\n    const tree = useFloatingTree();\n    const nodeId = useFloatingNodeId();\n    const parentId = useFloatingParentNodeId();\n    nested ??= parentId != null;\n\n    const { x, y, reference, floating, strategy, refs, context } =\n      useFloating<HTMLButtonElement>({\n        open,\n        onOpenChange: (st) => {\n          if (typeof onOpen === \"function\") onOpen();\n          setOpen(st);\n        },\n        middleware: [\n          offset({ mainAxis: nested ? 0 : 2, alignmentAxis: nested ? -5 : 0 }),\n          flip(),\n          shift(),\n        ],\n        placement: nested ? \"right-start\" : placement,\n        nodeId,\n        whileElementsMounted: autoUpdate,\n        strategy: providedStrategy,\n      });\n\n    const { getReferenceProps, getFloatingProps, getItemProps } =\n      useInteractions([\n        useHover(context, {\n          handleClose: safePolygon({ restMs: 25 }),\n          enabled: nested && allowHover,\n          delay: { open: 75 },\n        }),\n        useClick(context, {\n          toggle: !nested,\n          event: \"mousedown\",\n          ignoreMouse: nested,\n        }),\n        useRole(context, { role: \"menu\" }),\n        useDismiss(context),\n        useListNavigation(context, {\n          listRef: listItemsRef,\n          activeIndex,\n          nested,\n          onNavigate: setActiveIndex,\n        }),\n        useTypeahead(context, {\n          listRef: listContentRef,\n          onMatch: open ? setActiveIndex : undefined,\n          activeIndex,\n        }),\n      ]);\n\n    useEffect(() => {\n      function onTreeClick() {\n        if (alwaysClose) setOpen(false);\n\n        if (parentId === null) {\n          refs.domReference.current?.focus();\n        }\n      }\n\n      tree?.events.on(\"click\", onTreeClick);\n      return () => {\n        tree?.events.off(\"click\", onTreeClick);\n      };\n    }, [parentId, tree, refs, alwaysClose]);\n\n    useEffect(() => {\n      function onPointerMove() {\n        setAllowHover(true);\n      }\n\n      function onKeyDown() {\n        setAllowHover(false);\n      }\n\n      window.addEventListener(\"pointermove\", onPointerMove, {\n        once: true,\n        capture: true,\n      });\n      window.addEventListener(\"keydown\", onKeyDown, true);\n      return () => {\n        window.removeEventListener(\"pointermove\", onPointerMove, {\n          capture: true,\n        });\n        window.removeEventListener(\"keydown\", onKeyDown, true);\n      };\n    }, [allowHover]);\n\n    const floatingNodeRef = useRef<HTMLElement>(null);\n    const mergedReferenceRef = useMergeRefs([ref, reference]);\n\n    const rootCtx = useFloatingContext();\n    portalRoot ??= rootCtx?.rootRef?.current || undefined;\n\n    return (\n      <FloatingNode id={nodeId}>\n        {isValidElement(label) ? (\n          cloneElement(label, {\n            ...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", { open }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, label.props.className, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            }),\n          })\n        ) : (\n          <MenuElement\n            submenu={nested}\n            {...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", { open }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            })}\n          >\n            {label}\n          </MenuElement>\n        )}\n        <FloatingPortal root={portalRoot}>\n          <Transition\n            in={open}\n            mountOnEnter\n            unmountOnExit\n            timeout={{ enter: 100, exit: 250 }}\n            nodeRef={floatingNodeRef}\n          >\n            {(state) => (\n              <FloatingFocusManager\n                context={context}\n                modal={!nested}\n                returnFocus={!nested}\n                order={[\"reference\", \"content\"]}\n              >\n                <div\n                  {...getFloatingProps({\n                    className: cx(\"dropdown\", styles.active, styles.dropdown, {\n                      [styles.disappear]:\n                        state === \"exiting\" || state === \"exited\",\n                    }),\n                    ref(r) {\n                      floatingNodeRef.current = r;\n                      floating(r);\n                    },\n                    style: {\n                      position: strategy,\n                      top: y ?? 0,\n                      left: x ?? 0,\n                    },\n                    onKeyDown(event) {\n                      if (event.key === \"Tab\") {\n                        setOpen(false);\n                      }\n                    },\n                  })}\n                >\n                  <div\n                    className=\"dropdown__menu\"\n                    onClick={\n                      alwaysClose\n                        ? () => {\n                            tree?.events.emit(\"click\");\n                          }\n                        : undefined\n                    }\n                  >\n                    {Children.map(\n                      children,\n                      (child, index) =>\n                        isValidElement(child) &&\n                        cloneElement(\n                          child,\n                          getItemProps({\n                            tabIndex: -1,\n                            role: \"menuitem\",\n                            className: \"menu_item\",\n                            ref(node: HTMLButtonElement) {\n                              listItemsRef.current[index] = node;\n                            },\n                            onClick(e) {\n                              if (child.props.onClick) child.props.onClick(e);\n                              else tree?.events.emit(\"click\");\n                            },\n                            onPointerEnter() {\n                              if (allowHover) {\n                                setActiveIndex(index);\n                              }\n                            },\n                          })\n                        )\n                    )}\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            )}\n          </Transition>\n        </FloatingPortal>\n      </FloatingNode>\n    );\n  }\n);\n\nMenu.displayName = \"Menu\";\n\nexport const Dropdown = forwardRef<any, DropdownProps>(\n  ({ children, placement = \"bottom-start\", ...props }, ref) => {\n    return (\n      <FloatingTree>\n        <Menu placement={placement} {...props} nested={false} ref={ref}>\n          {children}\n        </Menu>\n      </FloatingTree>\n    );\n  }\n);\n\nDropdown.displayName = \"Dropdown\";\n\nexport const MenuDivider = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div {...props} className={cx(\"divider\", className)} ref={ref} />\n));\n\nMenuDivider.displayName = \"MenuDivider\";\n\nexport const MenuGroup = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & { header?: ReactNode }\n>(({ className, header, children, ...props }, ref) => (\n  <div className={cx(\"dropdown__group\", className)} {...props} ref={ref}>\n    {header ? <div className=\"dropdown__group-header\">{header}</div> : null}\n    {children}\n  </div>\n));\n\nMenuGroup.displayName = \"MenuGroup\";\n"],"names":["MenuElement","forwardRef","selected","className","icon","children","submenu","props","ref","a","cx","styles","isValidElement","span","displayName","Menu","label","noChevron","placement","strategy","providedStrategy","portalRoot","alwaysClose","onOpen","nested","rootCtx","open","setOpen","useState","activeIndex","setActiveIndex","allowHover","setAllowHover","listItemsRef","useRef","listContentRef","Children","map","child","tree","useFloatingTree","nodeId","useFloatingNodeId","parentId","useFloatingParentNodeId","x","y","reference","floating","refs","context","useFloating","onOpenChange","st","middleware","offset","mainAxis","alignmentAxis","flip","shift","whileElementsMounted","autoUpdate","getReferenceProps","getFloatingProps","getItemProps","useInteractions","useHover","handleClose","safePolygon","restMs","enabled","delay","useClick","toggle","event","ignoreMouse","useRole","role","useDismiss","useListNavigation","listRef","onNavigate","useTypeahead","onMatch","undefined","useEffect","onTreeClick","domReference","current","focus","events","on","off","onPointerMove","onKeyDown","window","addEventListener","once","capture","removeEventListener","floatingNodeRef","mergedReferenceRef","useMergeRefs","useFloatingContext","rootRef","FloatingNode","id","cloneElement","onClick","stopPropagation","currentTarget","key","menu_root","with_chevron","FloatingPortal","root","Transition","in","mountOnEnter","unmountOnExit","timeout","enter","exit","nodeRef","state","FloatingFocusManager","modal","returnFocus","order","div","active","dropdown","disappear","r","style","position","top","left","emit","index","tabIndex","node","e","onPointerEnter","Dropdown","FloatingTree","MenuDivider","MenuGroup","header"],"mappings":"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"}