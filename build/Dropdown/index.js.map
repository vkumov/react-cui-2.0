{"version":3,"file":"index.js","sources":["../../src/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, {\n  Children,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useEffect,\n  useRef,\n  useState,\n  type ComponentProps,\n  type FC,\n  type HTMLProps,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingOverlay,\n  FloatingPortal,\n  autoUpdate,\n  flip,\n  offset,\n  safePolygon,\n  shift,\n  size,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingParentNodeId,\n  useFloatingTree,\n  useHover,\n  useInteractions,\n  useListNavigation,\n  useMergeRefs,\n  useRole,\n  useTypeahead,\n  type Placement,\n  type Strategy,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { FloatingTreeWrapper, useFloatingContext } from \"src/FloatingProvider\";\nimport { useCustomDismiss } from \"src/hooks/useCustomDismiss\";\n\nimport styles from \"./Dropdown.module.scss\";\n\ntype MenuElementProps = {\n  selected?: boolean;\n  icon?: string | ReactElement;\n  submenu?: boolean;\n} & HTMLProps<HTMLAnchorElement>;\n\nexport const MenuElement = forwardRef<any, MenuElementProps>(\n  ({ selected, className, icon, children, submenu, ...props }, ref) => {\n    return (\n      <a\n        ref={ref}\n        {...props}\n        className={cx(className, {\n          selected: selected && !submenu,\n          [styles.submenu]: submenu,\n        })}\n      >\n        {icon ? (\n          isValidElement(icon) ? (\n            <>\n              {icon}\n              {isValidElement(children) ? (\n                children\n              ) : (\n                <span className=\"qtr-margin-left\">{children}</span>\n              )}\n            </>\n          ) : (\n            <>\n              <span className={icon as string} />\n              <span className=\"qtr-margin-left\">{children}</span>\n            </>\n          )\n        ) : (\n          children\n        )}\n      </a>\n    );\n  }\n);\n\nMenuElement.displayName = \"MenuElement\";\n\ntype DropdownProps = PropsWithChildren<{\n  label: ReactNode;\n  placement?: Placement;\n  noChevron?: boolean;\n  strategy?: Strategy;\n  alwaysClose?: boolean;\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  isOpen?: boolean;\n  withSizeLimit?: boolean;\n  portalRoot?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n}>;\n\ntype MenuComponentProps = {\n  nested?: boolean;\n} & DropdownProps &\n  Pick<MenuElementProps, \"icon\">;\n\nconst TreeClickHandleWrapper: FC<\n  PropsWithChildren<{ onClick: () => void }>\n> = ({ onClick, children }) => {\n  const tree = useFloatingTree();\n\n  useEffect(() => {\n    const t = tree;\n    t?.events.on(\"click\", onClick);\n    return () => {\n      t?.events.off(\"click\", onClick);\n    };\n  }, [tree, onClick]);\n\n  return <>{children}</>;\n};\n\nexport const Menu = forwardRef<\n  any,\n  MenuComponentProps & Omit<HTMLProps<HTMLButtonElement>, \"label\">\n>(\n  (\n    {\n      children,\n      label,\n      noChevron,\n      placement,\n      strategy: providedStrategy,\n      alwaysClose,\n      onOpen,\n      onClose,\n      isOpen,\n      nested,\n      withSizeLimit,\n      portalId,\n      portalRoot,\n      icon,\n      ...props\n    },\n    ref\n  ) => {\n    const [open, setOpen] = useState(isOpen ?? false);\n    const [activeIndex, setActiveIndex] = useState<number | null>(null);\n    const [allowHover, setAllowHover] = useState(false);\n\n    useEffect(() => {\n      if (typeof isOpen !== \"undefined\") setOpen(isOpen);\n    }, [isOpen]);\n\n    const listItemsRef = useRef<Array<HTMLButtonElement | null>>([]);\n    const listContentRef = useRef(\n      Children.map(children, (child) =>\n        isValidElement(child) ? child.props.label : null\n      ) as Array<string | null>\n    );\n\n    const tree = useFloatingTree();\n    const nodeId = useFloatingNodeId();\n    const parentId = useFloatingParentNodeId();\n    nested ??= parentId != null;\n\n    const { root, id } = useFloatingContext({\n      root: portalRoot,\n      portalId,\n      fallbackPortalId: \"--cui-dropdown-portal\",\n    });\n\n    const { x, y, reference, floating, strategy, refs, context } =\n      useFloating<HTMLButtonElement>({\n        open,\n        onOpenChange: (st) => {\n          if (typeof onOpen === \"function\" && st) onOpen();\n          if (typeof onClose === \"function\" && !st) onClose();\n          setOpen(st);\n        },\n        middleware: [\n          offset({ mainAxis: nested ? 0 : 2, alignmentAxis: nested ? -5 : 0 }),\n          flip(),\n          shift(),\n          withSizeLimit\n            ? size({\n                apply({ availableHeight, availableWidth, elements }) {\n                  Object.assign(elements.floating.style, {\n                    maxWidth: `${availableWidth}px`,\n                    maxHeight: `${availableHeight - 4}px`,\n                  });\n                },\n              })\n            : undefined,\n        ].filter(Boolean),\n        placement: nested ? \"right-start\" : placement,\n        nodeId,\n        whileElementsMounted: autoUpdate,\n        strategy: providedStrategy,\n      });\n\n    const { getReferenceProps, getFloatingProps, getItemProps } =\n      useInteractions([\n        useHover(context, {\n          handleClose: safePolygon({ restMs: 25 }),\n          enabled: nested && allowHover,\n          delay: { open: 75 },\n        }),\n        useClick(context, {\n          toggle: !nested,\n          event: \"mousedown\",\n          ignoreMouse: nested,\n        }),\n        useRole(context, { role: \"menu\" }),\n        useDismiss(context, {\n          bubbles: true,\n          outsidePress: true,\n          escapeKey: false,\n        }),\n        useCustomDismiss(context),\n        useListNavigation(context, {\n          listRef: listItemsRef,\n          activeIndex,\n          nested,\n          onNavigate: setActiveIndex,\n        }),\n        useTypeahead(context, {\n          listRef: listContentRef,\n          onMatch: open ? setActiveIndex : undefined,\n          activeIndex,\n        }),\n      ]);\n\n    const onTreeClick = useEvent(() => {\n      if (alwaysClose) setOpen(false);\n\n      if (parentId === null) {\n        refs.domReference.current?.focus();\n      }\n    });\n\n    useEffect(() => {\n      function onPointerMove() {\n        setAllowHover(true);\n      }\n\n      function onKeyDown() {\n        setAllowHover(false);\n      }\n\n      window.addEventListener(\"pointermove\", onPointerMove, {\n        once: true,\n        capture: true,\n      });\n      window.addEventListener(\"keydown\", onKeyDown, true);\n      return () => {\n        window.removeEventListener(\"pointermove\", onPointerMove, {\n          capture: true,\n        });\n        window.removeEventListener(\"keydown\", onKeyDown, true);\n      };\n    }, [allowHover]);\n\n    const floatingNodeRef = useRef<HTMLElement>(null);\n    const mergedFloatingRef = useMergeRefs([floatingNodeRef, floating]);\n    const mergedReferenceRef = useMergeRefs([ref, reference]);\n\n    useEffect(() => {\n      const onClick = (e: MouseEvent) => {\n        if (!floatingNodeRef.current) return;\n        if (floatingNodeRef.current.contains(e.target as Node)) {\n          if (tree) tree.events.emit(\"click\");\n          else onTreeClick();\n        }\n      };\n\n      document.addEventListener(\"click\", onClick);\n      return () => {\n        document.removeEventListener(\"click\", onClick);\n      };\n    }, [tree, onTreeClick]);\n\n    return (\n      <>\n        {isValidElement(label) ? (\n          cloneElement(label, {\n            ...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", label.props.className, {\n                      open,\n                    }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, label.props.className, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            }),\n          })\n        ) : (\n          <MenuElement\n            submenu={nested}\n            icon={icon}\n            {...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", { open }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            })}\n          >\n            {label}\n          </MenuElement>\n        )}\n        <Transition\n          in={open}\n          mountOnEnter\n          unmountOnExit\n          appear\n          timeout={{ enter: 100, exit: 250 }}\n          nodeRef={floatingNodeRef}\n        >\n          {(state) => (\n            <FloatingTreeWrapper\n              withPortal={!tree}\n              portalId={id}\n              portalRoot={root}\n            >\n              <FloatingNode id={nodeId}>\n                <TreeClickHandleWrapper onClick={onTreeClick}>\n                  <FloatingOverlay\n                    style={{\n                      zIndex: nested\n                        ? 50\n                        : \"calc(var(--cui-max-zindex, 1000) + 2)\",\n                    }}\n                  >\n                    <FloatingFocusManager\n                      context={context}\n                      modal={!nested}\n                      returnFocus={!nested}\n                      order={[\"reference\", \"content\"]}\n                    >\n                      <div\n                        {...getFloatingProps({\n                          className: cx(\"dropdown\", styles.dropdown, {\n                            [styles.disappear]:\n                              state === \"exiting\" || state === \"exited\",\n                            [styles.appear]: state === \"entering\",\n                            [styles.active]: state === \"entered\",\n                          }),\n                          ref: mergedFloatingRef,\n                          style: {\n                            position: strategy,\n                            top: y ?? 0,\n                            left: x ?? 0,\n                          },\n                          onKeyDown(event) {\n                            if (event.key === \"Tab\") {\n                              setOpen(false);\n                            }\n                          },\n                        })}\n                      >\n                        <div\n                          className=\"dropdown__menu\"\n                          onClick={\n                            alwaysClose\n                              ? () => {\n                                  tree?.events.emit(\"click\");\n                                }\n                              : undefined\n                          }\n                        >\n                          {Children.map(\n                            children,\n                            (child, index) =>\n                              isValidElement(child) &&\n                              cloneElement(\n                                child,\n                                getItemProps({\n                                  ...child.props,\n                                  tabIndex: -1,\n                                  role: \"menuitem\",\n                                  className: cx(\n                                    \"menu_item\",\n                                    child.props.className\n                                  ),\n                                  ref(node: HTMLButtonElement) {\n                                    listItemsRef.current[index] = node;\n                                  },\n                                  onPointerEnter() {\n                                    if (allowHover) {\n                                      setActiveIndex(index);\n                                    }\n                                  },\n                                })\n                              )\n                          )}\n                        </div>\n                      </div>\n                    </FloatingFocusManager>\n                  </FloatingOverlay>\n                </TreeClickHandleWrapper>\n              </FloatingNode>\n            </FloatingTreeWrapper>\n          )}\n        </Transition>\n      </>\n    );\n  }\n);\n\nMenu.displayName = \"Menu\";\n\nexport const Dropdown = forwardRef<any, DropdownProps>(\n  ({ children, placement = \"bottom-start\", ...props }, ref) => {\n    return (\n      <Menu placement={placement} {...props} nested={false} ref={ref}>\n        {children}\n      </Menu>\n    );\n  }\n);\n\nDropdown.displayName = \"Dropdown\";\n\nexport const MenuDivider = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div {...props} className={cx(\"divider\", className)} ref={ref} />\n));\n\nMenuDivider.displayName = \"MenuDivider\";\n\nexport const MenuGroup = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & { header?: ReactNode }\n>(({ className, header, children, ...props }, ref) => (\n  <div className={cx(\"dropdown__group\", className)} {...props} ref={ref}>\n    {header ? <div className=\"dropdown__group-header\">{header}</div> : null}\n    {children}\n  </div>\n));\n\nMenuGroup.displayName = \"MenuGroup\";\n"],"names":["MenuElement","forwardRef","selected","className","icon","children","submenu","props","ref","jsx","cx","styles","isValidElement","jsxs","Fragment","TreeClickHandleWrapper","onClick","tree","useFloatingTree","useEffect","t","Menu","label","noChevron","placement","providedStrategy","alwaysClose","onOpen","onClose","isOpen","nested","withSizeLimit","portalId","portalRoot","open","setOpen","useState","activeIndex","setActiveIndex","allowHover","setAllowHover","listItemsRef","useRef","listContentRef","Children","child","nodeId","useFloatingNodeId","parentId","useFloatingParentNodeId","root","id","useFloatingContext","x","y","reference","floating","strategy","refs","context","useFloating","st","offset","flip","shift","size","availableHeight","availableWidth","elements","autoUpdate","getReferenceProps","getFloatingProps","getItemProps","useInteractions","useHover","safePolygon","useClick","useRole","useDismiss","useCustomDismiss","useListNavigation","useTypeahead","onTreeClick","useEvent","_a","onPointerMove","onKeyDown","floatingNodeRef","mergedFloatingRef","useMergeRefs","mergedReferenceRef","e","cloneElement","event","Transition","state","FloatingTreeWrapper","FloatingNode","FloatingOverlay","FloatingFocusManager","index","node","Dropdown","MenuDivider","MenuGroup","header"],"mappings":"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"}