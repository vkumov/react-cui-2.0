{"version":3,"file":"index.js","sources":["../../src/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, {\n  Children,\n  ComponentProps,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useEffect,\n  useRef,\n  useState,\n  type HTMLProps,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingPortal,\n  FloatingTree,\n  autoUpdate,\n  flip,\n  offset,\n  safePolygon,\n  shift,\n  size,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingParentNodeId,\n  useFloatingTree,\n  useHover,\n  useInteractions,\n  useListNavigation,\n  useMergeRefs,\n  useRole,\n  useTypeahead,\n  type Placement,\n  type Strategy,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\n\nimport { useFloatingContext } from \"src/FloatingProvider\";\n\nimport styles from \"./Dropdown.module.scss\";\n\ntype MenuElementProps = {\n  selected?: boolean;\n  icon?: string | ReactElement;\n  submenu?: boolean;\n} & HTMLProps<HTMLAnchorElement>;\n\nexport const MenuElement = forwardRef<any, MenuElementProps>(\n  ({ selected, className, icon, children, submenu, ...props }, ref) => {\n    return (\n      <a\n        ref={ref}\n        {...props}\n        className={cx(className, {\n          selected: selected && !submenu,\n          [styles.submenu]: submenu,\n        })}\n      >\n        {icon ? (\n          isValidElement(icon) ? (\n            <>\n              {icon}\n              {isValidElement(children) ? (\n                children\n              ) : (\n                <span className=\"qtr-margin-left\">{children}</span>\n              )}\n            </>\n          ) : (\n            <>\n              <span className={icon as string} />\n              <span className=\"qtr-margin-left\">{children}</span>\n            </>\n          )\n        ) : (\n          children\n        )}\n      </a>\n    );\n  }\n);\n\nMenuElement.displayName = \"MenuElement\";\n\ntype DropdownProps = PropsWithChildren<{\n  label: ReactNode;\n  placement?: Placement;\n  noChevron?: boolean;\n  strategy?: Strategy;\n  portalRoot?: HTMLElement | null | undefined;\n  alwaysClose?: boolean;\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  isOpen?: boolean;\n  withSizeLimit?: boolean;\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n}>;\n\ntype MenuComponentProps = {\n  nested?: boolean;\n} & DropdownProps;\n\nexport const Menu = forwardRef<\n  any,\n  MenuComponentProps & Omit<HTMLProps<HTMLButtonElement>, \"label\">\n>(\n  (\n    {\n      children,\n      label,\n      noChevron,\n      placement,\n      strategy: providedStrategy,\n      portalRoot,\n      alwaysClose,\n      onOpen,\n      onClose,\n      isOpen,\n      nested,\n      withSizeLimit,\n      portalId,\n      ...props\n    },\n    ref\n  ) => {\n    const [open, setOpen] = useState(isOpen ?? false);\n    const [activeIndex, setActiveIndex] = useState<number | null>(null);\n    const [allowHover, setAllowHover] = useState(false);\n\n    useEffect(() => {\n      if (typeof isOpen !== \"undefined\") setOpen(isOpen);\n    }, [isOpen]);\n\n    const listItemsRef = useRef<Array<HTMLButtonElement | null>>([]);\n    const listContentRef = useRef(\n      Children.map(children, (child) =>\n        isValidElement(child) ? child.props.label : null\n      ) as Array<string | null>\n    );\n\n    const tree = useFloatingTree();\n    const nodeId = useFloatingNodeId();\n    const parentId = useFloatingParentNodeId();\n    nested ??= parentId != null;\n\n    const { x, y, reference, floating, strategy, refs, context } =\n      useFloating<HTMLButtonElement>({\n        open,\n        onOpenChange: (st) => {\n          if (typeof onOpen === \"function\" && st) onOpen();\n          if (typeof onClose === \"function\" && !st) onClose();\n          setOpen(st);\n        },\n        middleware: [\n          offset({ mainAxis: nested ? 0 : 2, alignmentAxis: nested ? -5 : 0 }),\n          flip(),\n          shift(),\n          withSizeLimit\n            ? size({\n                apply({ availableHeight, availableWidth, elements }) {\n                  Object.assign(elements.floating.style, {\n                    maxWidth: `${availableWidth}px`,\n                    maxHeight: `${availableHeight - 4}px`,\n                  });\n                },\n              })\n            : undefined,\n        ].filter(Boolean),\n        placement: nested ? \"right-start\" : placement,\n        nodeId,\n        whileElementsMounted: autoUpdate,\n        strategy: providedStrategy,\n      });\n\n    const { getReferenceProps, getFloatingProps, getItemProps } =\n      useInteractions([\n        useHover(context, {\n          handleClose: safePolygon({ restMs: 25 }),\n          enabled: nested && allowHover,\n          delay: { open: 75 },\n        }),\n        useClick(context, {\n          toggle: !nested,\n          event: \"mousedown\",\n          ignoreMouse: nested,\n        }),\n        useRole(context, { role: \"menu\" }),\n        useDismiss(context),\n        useListNavigation(context, {\n          listRef: listItemsRef,\n          activeIndex,\n          nested,\n          onNavigate: setActiveIndex,\n        }),\n        useTypeahead(context, {\n          listRef: listContentRef,\n          onMatch: open ? setActiveIndex : undefined,\n          activeIndex,\n        }),\n      ]);\n\n    useEffect(() => {\n      function onTreeClick() {\n        if (alwaysClose) setOpen(false);\n\n        if (parentId === null) {\n          refs.domReference.current?.focus();\n        }\n      }\n\n      tree?.events.on(\"click\", onTreeClick);\n      return () => {\n        tree?.events.off(\"click\", onTreeClick);\n      };\n    }, [parentId, tree, refs, alwaysClose]);\n\n    useEffect(() => {\n      function onPointerMove() {\n        setAllowHover(true);\n      }\n\n      function onKeyDown() {\n        setAllowHover(false);\n      }\n\n      window.addEventListener(\"pointermove\", onPointerMove, {\n        once: true,\n        capture: true,\n      });\n      window.addEventListener(\"keydown\", onKeyDown, true);\n      return () => {\n        window.removeEventListener(\"pointermove\", onPointerMove, {\n          capture: true,\n        });\n        window.removeEventListener(\"keydown\", onKeyDown, true);\n      };\n    }, [allowHover]);\n\n    const floatingNodeRef = useRef<HTMLElement>(null);\n    const mergedReferenceRef = useMergeRefs([ref, reference]);\n\n    const { root, id } = useFloatingContext({\n      root: portalRoot,\n      portalId,\n      fallbackPortalId: \"--cui-dropdown-portal\",\n    });\n\n    return (\n      <FloatingNode id={nodeId}>\n        {isValidElement(label) ? (\n          cloneElement(label, {\n            ...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", label.props.className, { open }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, label.props.className, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            }),\n          })\n        ) : (\n          <MenuElement\n            submenu={nested}\n            {...getReferenceProps({\n              ...props,\n              ref: mergedReferenceRef,\n              onClick(event) {\n                event.stopPropagation();\n                (event.currentTarget as HTMLButtonElement).focus();\n              },\n              ...(nested\n                ? {\n                    className: cx(\"menu_item\", { open }),\n                    role: \"menuitem\",\n                    onKeyDown(event) {\n                      if (\n                        event.key === \"ArrowUp\" ||\n                        event.key === \"ArrowDown\"\n                      ) {\n                        setOpen(false);\n                      }\n                    },\n                  }\n                : {\n                    className: cx(styles.menu_root, {\n                      open,\n                      [styles.with_chevron]: !noChevron,\n                    }),\n                  }),\n            })}\n          >\n            {label}\n          </MenuElement>\n        )}\n        <FloatingPortal root={root} id={id}>\n          <Transition\n            in={open}\n            mountOnEnter\n            unmountOnExit\n            timeout={{ enter: 100, exit: 250 }}\n            nodeRef={floatingNodeRef}\n          >\n            {(state) => (\n              <FloatingFocusManager\n                context={context}\n                modal={!nested}\n                returnFocus={!nested}\n                order={[\"reference\", \"content\"]}\n              >\n                <div\n                  {...getFloatingProps({\n                    className: cx(\"dropdown\", styles.active, styles.dropdown, {\n                      [styles.disappear]:\n                        state === \"exiting\" || state === \"exited\",\n                    }),\n                    ref(r) {\n                      floatingNodeRef.current = r;\n                      floating(r);\n                    },\n                    style: {\n                      position: strategy,\n                      top: y ?? 0,\n                      left: x ?? 0,\n                    },\n                    onKeyDown(event) {\n                      if (event.key === \"Tab\") {\n                        setOpen(false);\n                      }\n                    },\n                  })}\n                >\n                  <div\n                    className=\"dropdown__menu\"\n                    onClick={\n                      alwaysClose\n                        ? () => {\n                            tree?.events.emit(\"click\");\n                          }\n                        : undefined\n                    }\n                  >\n                    {Children.map(\n                      children,\n                      (child, index) =>\n                        isValidElement(child) &&\n                        cloneElement(\n                          child,\n                          getItemProps({\n                            tabIndex: -1,\n                            role: \"menuitem\",\n                            className: cx(\"menu_item\", child.props.className),\n                            ref(node: HTMLButtonElement) {\n                              listItemsRef.current[index] = node;\n                            },\n                            onClick(e) {\n                              if (child.props.onClick) child.props.onClick(e);\n                              else tree?.events.emit(\"click\");\n                            },\n                            onPointerEnter() {\n                              if (allowHover) {\n                                setActiveIndex(index);\n                              }\n                            },\n                          })\n                        )\n                    )}\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            )}\n          </Transition>\n        </FloatingPortal>\n      </FloatingNode>\n    );\n  }\n);\n\nMenu.displayName = \"Menu\";\n\nexport const Dropdown = forwardRef<any, DropdownProps>(\n  ({ children, placement = \"bottom-start\", ...props }, ref) => {\n    return (\n      <FloatingTree>\n        <Menu placement={placement} {...props} nested={false} ref={ref}>\n          {children}\n        </Menu>\n      </FloatingTree>\n    );\n  }\n);\n\nDropdown.displayName = \"Dropdown\";\n\nexport const MenuDivider = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div {...props} className={cx(\"divider\", className)} ref={ref} />\n));\n\nMenuDivider.displayName = \"MenuDivider\";\n\nexport const MenuGroup = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & { header?: ReactNode }\n>(({ className, header, children, ...props }, ref) => (\n  <div className={cx(\"dropdown__group\", className)} {...props} ref={ref}>\n    {header ? <div className=\"dropdown__group-header\">{header}</div> : null}\n    {children}\n  </div>\n));\n\nMenuGroup.displayName = \"MenuGroup\";\n"],"names":["_extends","MenuElement","forwardRef","ref","selected","className","icon","children","submenu","props","React","a","cx","styles","isValidElement","createElement","Fragment","span","displayName","Menu","label","noChevron","placement","strategy","providedStrategy","portalRoot","alwaysClose","onOpen","onClose","isOpen","nested","withSizeLimit","portalId","useState","open","setOpen","activeIndex","setActiveIndex","allowHover","setAllowHover","useEffect","listItemsRef","useRef","listContentRef","Children","map","child","tree","useFloatingTree","nodeId","useFloatingNodeId","parentId","useFloatingParentNodeId","useFloating","onOpenChange","st","middleware","offset","mainAxis","alignmentAxis","flip","shift","size","apply","availableHeight","availableWidth","elements","Object","assign","floating","style","maxWidth","maxHeight","undefined","filter","Boolean","whileElementsMounted","autoUpdate","x","y","reference","refs","context","useInteractions","useHover","handleClose","safePolygon","restMs","enabled","delay","useClick","toggle","event","ignoreMouse","useRole","role","useDismiss","useListNavigation","listRef","onNavigate","useTypeahead","onMatch","getReferenceProps","getFloatingProps","getItemProps","onTreeClick","domReference","current","focus","events","on","off","onPointerMove","onKeyDown","window","addEventListener","once","capture","removeEventListener","floatingNodeRef","mergedReferenceRef","useMergeRefs","useFloatingContext","root","fallbackPortalId","id","FloatingNode","cloneElement","onClick","stopPropagation","currentTarget","key","menu_root","with_chevron","FloatingPortal","Transition","in","mountOnEnter","unmountOnExit","timeout","enter","exit","nodeRef","state","FloatingFocusManager","modal","returnFocus","order","div","active","dropdown","disappear","r","position","top","left","emit","index","tabIndex","node","e","onPointerEnter","Dropdown","FloatingTree","MenuDivider","MenuGroup","header"],"mappings":"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"}