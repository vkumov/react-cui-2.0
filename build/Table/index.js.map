{"version":3,"file":"index.js","sources":["../../src/Table/GenericTable.tsx","../../src/Table/DefaultTablePagination.tsx","../../src/Table/Table.tsx"],"sourcesContent":["import React, { forwardRef, HTMLProps } from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { appendClass as ac } from \"src/utils\";\n\nconst Wrapper = <div className=\"responsive-table\" />;\n\nexport type GenericTableProps = {\n  outerWrap?: boolean;\n  lined?: boolean;\n  bordered?: boolean;\n  striped?: boolean;\n  selectable?: boolean;\n  fixed?: boolean;\n  wrapped?: boolean;\n  compressed?: boolean;\n  loose?: boolean;\n} & HTMLProps<HTMLTableElement>;\n\nexport const GenericTable = forwardRef<HTMLTableElement, GenericTableProps>(\n  (\n    {\n      outerWrap = true,\n      lined = false,\n      bordered = false,\n      striped = false,\n      selectable = false,\n      fixed = false,\n      wrapped = false,\n      compressed = false,\n      loose = false,\n      className = null,\n      ...props\n    },\n    forwardedRef\n  ) => (\n    <ConditionalWrapper condition={outerWrap} wrapper={Wrapper}>\n      <table\n        className={`table${ac(lined, \"table--lined\")}${ac(\n          bordered,\n          \"table--bordered\"\n        )}${ac(striped, \"table--striped\")}${ac(\n          selectable,\n          \"table--selectable\"\n        )}${ac(fixed, \"table--fixed\")}${ac(wrapped, \"table--wrapped\")}${ac(\n          compressed,\n          \"table--compressed\"\n        )}${ac(loose, \"table--loose\")}${ac(className)}`}\n        {...props}\n        ref={forwardedRef}\n      />\n    </ConditionalWrapper>\n  )\n);\n","import React, { FC, ReactNode } from \"react\";\n\nimport { Pagination } from \"src/Pagination\";\nimport { Dropdown } from \"src/Dropdown\";\n\ntype DefaultTablePaginationProps = {\n  total: number;\n  position: number;\n  onPageChange: (e, position: number) => void;\n  onPerPageChange: (value: number) => void;\n  perPageUp?: boolean;\n  paginationProps?: {\n    size?: \"small\" | \"default\" | \"large\";\n    rounded?: boolean;\n    icons?: boolean;\n    next?: ReactNode;\n    prev?: ReactNode;\n    firstAndLast?: boolean;\n  };\n};\n\nexport const DefaultTablePagination: FC<DefaultTablePaginationProps> = ({\n  perPageUp = false,\n  paginationProps = {},\n  total,\n  position,\n  onPageChange,\n  onPerPageChange,\n}) => {\n  const [perPage, setPerPage] = React.useState<number>(50);\n\n  React.useEffect(() => {\n    if (typeof onPerPageChange === \"function\") onPerPageChange(perPage);\n  }, [perPage, onPerPageChange]);\n\n  return (\n    <div className=\"flex-middle\">\n      <span className=\"qtr-margin-right\">Page:</span>\n      <Pagination\n        firstAndLast\n        icons\n        perPage={perPage}\n        total={total}\n        position={position}\n        onPageChange={onPageChange}\n        beginAt={0}\n        className=\"no-margin-top\"\n        {...paginationProps}\n      />\n      <span className=\"text-muted qtr-margin-left qtr-margin-right\">|</span>\n      <span className=\"qtr-margin-right\">Per page:</span>\n      <Dropdown\n        type=\"link\"\n        header={perPage}\n        openTo=\"left\"\n        alwaysClose\n        up={perPageUp}\n      >\n        {[10, 25, 50, 100, 250, 500].map((v) => (\n          <Dropdown.Element\n            onClick={() => setPerPage(v)}\n            key={v}\n            selected={v === perPage}\n          >\n            {v}\n          </Dropdown.Element>\n        ))}\n      </Dropdown>\n    </div>\n  );\n};\n","import React, { FC, forwardRef, ReactNode } from \"react\";\n\nimport { GenericTable, GenericTableProps } from \"./GenericTable\";\nimport { DefaultTablePagination } from \"./DefaultTablePagination\";\n\nimport { appendClass } from \"src/utils\";\n\nconst asArray = (v: unknown) => (Array.isArray(v) ? v : [v]);\n\ntype PaginationLocation =\n  | \"top-left\"\n  | \"bottom-left\"\n  | \"bottom-right\"\n  | \"top-right\";\n\ntype TableProps = {\n  pagination?: FC<any> | React.ComponentClass<any> | string;\n  paginationLocation?: PaginationLocation;\n  paginationProps?: {\n    size?: \"small\" | \"default\" | \"large\";\n    rounded?: boolean;\n    icons?: boolean;\n    next?: ReactNode;\n    prev?: ReactNode;\n    firstAndLast?: boolean;\n  };\n  data?: any[][];\n  children?: ReactNode;\n  start?: number;\n} & GenericTableProps;\n\nexport const Table: FC<TableProps> = forwardRef<HTMLTableElement, TableProps>(\n  (\n    {\n      pagination = DefaultTablePagination,\n      paginationLocation = \"bottom-right\",\n      paginationProps = {\n        icons: true,\n        firstAndLast: true,\n      },\n      data = null,\n      children = null,\n      start = 1,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const [position, setPosition] = React.useState(\n      typeof start === \"number\" ? start : 0\n    );\n    const [perPage, setPerPage] = React.useState(50);\n    const tbody = React.useMemo(\n      () =>\n        children\n          ? asArray(children).find((child) => child.type === \"tbody\")\n          : null,\n      [children]\n    );\n    const thead = React.useMemo(\n      () =>\n        children\n          ? asArray(children).find((child) => child.type === \"thead\")\n          : null,\n      [children]\n    );\n    const total = React.useMemo(\n      () => (data ? data.length : asArray(tbody.props.children).length) || 0,\n      [data, tbody]\n    );\n    React.useEffect(() => setPosition(0), [data, tbody]);\n\n    return (\n      <>\n        {Boolean(paginationLocation.includes(\"top-\")) && (\n          <div\n            className={`flex base-margin-bottom${appendClass(\n              paginationLocation === \"top-right\",\n              \"flex-right\"\n            )}`}\n          >\n            {React.createElement(pagination, {\n              total,\n              position,\n              onPageChange: (_, p) => setPosition(p),\n              onPerPageChange: (p) => setPerPage(p),\n              paginationProps,\n            })}\n          </div>\n        )}\n        <GenericTable {...props} ref={forwardedRef}>\n          {thead}\n          <tbody>\n            {data\n              ? data.slice(position, position + perPage).map((row, rid) => (\n                  <tr key={rid}>\n                    {row.map((col, cid) => (\n                      <td key={cid}>{col}</td>\n                    ))}\n                  </tr>\n                ))\n              : asArray(tbody.props.children).slice(\n                  position,\n                  position + perPage\n                )}\n          </tbody>\n        </GenericTable>\n        {Boolean(paginationLocation.includes(\"bottom-\")) && (\n          <div\n            className={`flex base-margin-top${appendClass(\n              paginationLocation === \"bottom-right\",\n              \"flex-right\"\n            )}`}\n          >\n            {React.createElement(pagination, {\n              total,\n              position,\n              onPageChange: (_, p) => setPosition(p),\n              onPerPageChange: (p) => setPerPage(p),\n              perPageUp: true,\n              paginationProps,\n            })}\n          </div>\n        )}\n      </>\n    );\n  }\n);\n"],"names":["_extends","Wrapper","div","className","GenericTable","forwardRef","outerWrap","lined","bordered","striped","selectable","fixed","wrapped","compressed","loose","props","forwardedRef","ConditionalWrapper","condition","wrapper","table","ac","ref","DefaultTablePagination","perPageUp","paginationProps","total","position","onPageChange","onPerPageChange","perPage","setPerPage","React","useState","useEffect","span","Pagination","firstAndLast","icons","beginAt","Dropdown","type","header","openTo","alwaysClose","up","map","v","Element","onClick","key","selected","asArray","Array","isArray","Table","pagination","paginationLocation","data","children","start","setPosition","tbody","useMemo","find","child","thead","length","Boolean","includes","appendClass","createElement","_","p","slice","row","rid","tr","col","cid","td"],"mappings":"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"}