{"version":3,"file":"index.js","sources":["../../src/Dropzone/Dropzone.tsx"],"sourcesContent":["import React, { FC, ReactNode, useCallback, useMemo } from \"react\";\nimport bytes from \"bytes\";\nimport ReactDropzone, {\n  DropzoneProps as ReactDropzoneProps,\n} from \"react-dropzone\";\n\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/dropzone.css\";\n\ntype FileCardProps = {\n  file: any;\n  i: number;\n  removeFile: (i: number) => void;\n  inline: boolean;\n};\n\nconst FileCard: FC<FileCardProps> = ({ file, i, removeFile, inline }) => (\n  <div\n    className=\"file-drop__card col-lg-4 col-md-6 col-sm-6\"\n    key={`${i}-${file.name}`}\n  >\n    <div\n      className=\"panel panel--bordered hover-emboss--small\"\n      onClick={(e) => e.stopPropagation()}\n    >\n      {inline ? (\n        <div className=\"panel__body flex flex-row\">\n          <div\n            className=\"text-left flex-fill\"\n            style={{ maxWidth: \"calc(100% - 20px)\" }}\n          >\n            <div className=\"text-ellipsis\">{file.name}</div>\n            <small style={{ whiteSpace: \"nowrap\" }}>\n              {bytes.format(file.size, { unitSeparator: \" \" })}\n            </small>\n          </div>\n          <a className=\"link pull-right\" onClick={() => removeFile(i)}>\n            <span className=\"icon-close\" title=\"Remove the file.\" />\n          </a>\n        </div>\n      ) : (\n        <div className=\"panel__body\">\n          <a\n            className=\"link pull-right\"\n            style={{ marginRight: \"5px\" }}\n            onClick={() => removeFile(i)}\n          >\n            <span className=\"icon-close\" title=\"Remove the file.\" />\n          </a>\n          <div className=\"text-ellipsis half-margin-bottom\">{file.name}</div>\n          <span className=\"file-icon text-muted icon-file-o qtr-margin-right\" />\n          <small>{bytes.format(file.size, { unitSeparator: \" \" })}</small>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nexport type DropzoneProps = {\n  name: string;\n  value?: any[];\n  maxFiles?: number;\n  inline?: boolean;\n  showTotalSelected?: boolean;\n  accept?: string;\n  loose?: boolean;\n  compressed?: boolean;\n  label: string;\n  multiple: boolean;\n  error?: ReactNode;\n  maxFileSize?: string | number;\n  onChange?: (value: File[]) => void;\n};\n\nconst DropzoneMessage: FC<\n  Pick<DropzoneProps, \"inline\" | \"accept\"> & { maxFileSize: number }\n> = ({ inline, accept, maxFileSize }) => {\n  if (inline) {\n    return (\n      <div className=\"dropzone-message flex flex-row flex-center-vertical\">\n        <h5 className=\"text-muted text-left flex-fill no-margin\">\n          Click Here or Drop Files to Upload\n        </h5>\n        {accept && (\n          <span className=\"text-muted text-small half-margin-right\">\n            {\"Allowed files: \"}\n            {typeof accept === \"string\" ? accept.split(\",\").join(\", \") : accept}\n          </span>\n        )}\n        <span className=\"file-drop__icon icon-upload\"></span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dropzone-message\">\n      <span className=\"file-drop__icon icon-upload\"></span>\n      <h4 className=\"text-muted\">Click Here or Drop Files to Upload</h4>\n      {accept && (\n        <div className=\"text-muted\">\n          Allowed files: {accept.split(\",\").join(\", \")}\n        </div>\n      )}\n      {maxFileSize && (\n        <div className=\"text-muted\">\n          Max file size: {bytes.format(maxFileSize, { unitSeparator: \" \" })}\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype DropzoneFilesProps = {\n  files?: File[];\n  removeFile: (toRemove: number) => void;\n};\n\nconst DropzoneFiles: FC<\n  DropzoneFilesProps &\n    Required<Pick<DropzoneProps, \"inline\" | \"showTotalSelected\">>\n> = ({ files, inline, showTotalSelected, removeFile }) => {\n  if (!Array.isArray(files) || !files.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"dropzone-previews\">\n      <div className=\"file-drop__container container--fluid\">\n        <div className=\"row\">\n          {files.map((file, i) => (\n            <FileCard\n              key={i}\n              file={file}\n              i={i}\n              inline={inline}\n              removeFile={removeFile}\n            />\n          ))}\n        </div>\n      </div>\n      {showTotalSelected ? (\n        <div className=\"file-drop__filecnt\">{files.length} selected</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport const Dropzone: FC<DropzoneProps & ReactDropzoneProps> = ({\n  error,\n  loose,\n  compressed,\n  inline,\n  label,\n  name,\n  value,\n  maxFileSize: customMaxFileSize,\n  maxFiles,\n  onChange,\n  showTotalSelected,\n  ...props\n}) => {\n  const maxFileSize = useMemo(() => {\n    if (customMaxFileSize) {\n      return bytes.parse(customMaxFileSize);\n    } else {\n      return null;\n    }\n  }, [customMaxFileSize]);\n\n  const padding = useMemo(() => {\n    let tmp = \"\";\n    if (loose) tmp = \"dropzone--loose\";\n    if (compressed) tmp = \"dropzone--compressed\";\n    if (inline && Array.isArray(value) && value.length) {\n      switch (tmp) {\n        case \"dropzone--loose\":\n          tmp = `${tmp} half-padding-bottom`;\n          break;\n        case \"dropzone--compressed\":\n          tmp = `${tmp} no-padding-bottom`;\n          break;\n        default:\n          tmp = `${tmp} qtr-padding-bottom`;\n          break;\n      }\n    }\n    return tmp;\n  }, [loose, compressed, value, inline]);\n\n  const handleDrop = useCallback(\n    (filesToUpload: File[]) => {\n      if (maxFileSize)\n        filesToUpload = filesToUpload.filter(\n          (file) => file.size <= maxFileSize\n        );\n\n      if (maxFiles && filesToUpload.length > maxFiles)\n        filesToUpload = filesToUpload.slice(0, maxFiles);\n\n      onChange(filesToUpload);\n    },\n    [maxFileSize, maxFiles, onChange]\n  );\n\n  const removeFile = (toRemove: number) => {\n    onChange(\n      Array.isArray(value) ? value.filter((_, idx) => toRemove !== idx) : value\n    );\n  };\n\n  return (\n    <div className={`form-group${ac(error, \"form-group--error\")}`}>\n      <div className=\"form-group__text\">\n        {label ? <label htmlFor={name}>{label}</label> : null}\n        <ReactDropzone {...props} onDrop={handleDrop} maxSize={maxFileSize}>\n          {({ getRootProps, getInputProps }) => (\n            <div className={`dropzone ${padding}`} {...getRootProps()}>\n              <input {...getInputProps()} />\n              <DropzoneFiles\n                files={value}\n                showTotalSelected={showTotalSelected}\n                inline={inline}\n                removeFile={removeFile}\n              />\n              {Array.isArray(value) && value.length ? null : (\n                <DropzoneMessage\n                  maxFileSize={maxFileSize}\n                  inline={inline}\n                  accept={props.accept}\n                />\n              )}\n            </div>\n          )}\n        </ReactDropzone>\n      </div>\n      {error ? (\n        <div className={`help-block text-danger`} role=\"alert\">\n          <span>{error}</span>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n"],"names":["_extends","FileCard","file","i","removeFile","inline","React","div","className","key","name","onClick","e","stopPropagation","style","maxWidth","small","whiteSpace","bytes","format","size","unitSeparator","a","span","title","marginRight","createElement","DropzoneMessage","accept","maxFileSize","h5","split","join","h4","DropzoneFiles","files","showTotalSelected","Array","isArray","length","map","Dropzone","error","loose","compressed","label","value","customMaxFileSize","maxFiles","onChange","props","useMemo","parse","padding","tmp","handleDrop","useCallback","filesToUpload","filter","slice","toRemove","_","idx","ac","htmlFor","ReactDropzone","onDrop","maxSize","getRootProps","getInputProps","input","role"],"mappings":"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"}