{"version":3,"file":"index.js","sources":["../../src/Dropzone/Dropzone.tsx"],"sourcesContent":["import React, { FC, ReactNode, useCallback, useMemo } from \"react\";\nimport ReactDropzone, {\n  DropzoneProps as ReactDropzoneProps,\n} from \"react-dropzone\";\nimport bytes from \"bytes\";\n\nimport { appendClass as ac } from \"src/utils\";\nimport \"../../css/dropzone.css\";\n\ntype FileCardProps = {\n  file: any;\n  i: number;\n  removeFile: (i: number) => void;\n  inline: boolean;\n};\n\nconst FileCard: FC<FileCardProps> = ({ file, i, removeFile, inline }) => (\n  <div\n    className=\"file-drop__card col-lg-4 col-md-6 col-sm-6\"\n    key={`${i}-${file.name}`}\n  >\n    <div\n      className=\"panel panel--bordered hover-emboss--small\"\n      onClick={(e) => e.stopPropagation()}\n    >\n      {inline ? (\n        <div className=\"panel__body flex flex-row\">\n          <div\n            className=\"text-left flex-fill\"\n            style={{ maxWidth: \"calc(100% - 20px)\" }}\n          >\n            <div className=\"text-ellipsis\">{file.name}</div>\n            <small style={{ whiteSpace: \"nowrap\" }}>\n              {bytes.format(file.size, { unitSeparator: \" \" })}\n            </small>\n          </div>\n          <a className=\"link pull-right\" onClick={() => removeFile(i)}>\n            <span className=\"icon-close\" title=\"Remove the file.\" />\n          </a>\n        </div>\n      ) : (\n        <div className=\"panel__body\">\n          <a\n            className=\"link pull-right\"\n            style={{ marginRight: \"5px\" }}\n            onClick={() => removeFile(i)}\n          >\n            <span className=\"icon-close\" title=\"Remove the file.\" />\n          </a>\n          <div className=\"text-ellipsis half-margin-bottom\">{file.name}</div>\n          <span className=\"file-icon text-muted icon-file-o qtr-margin-right\" />\n          <small>{bytes.format(file.size, { unitSeparator: \" \" })}</small>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nexport type DropzoneProps = {\n  name: string;\n  value?: any[];\n  maxFiles?: number;\n  inline?: boolean;\n  showTotalSelected?: boolean;\n  accept?: string;\n  loose?: boolean;\n  compressed?: boolean;\n  label: string;\n  multiple: boolean;\n  error?: ReactNode;\n  maxFileSize?: string | number;\n  onChange?: (value: File[]) => void;\n};\n\nconst DropzoneMessage: FC<\n  Pick<DropzoneProps, \"inline\" | \"accept\"> & { maxFileSize: number }\n> = ({ inline, accept, maxFileSize }) => {\n  if (inline) {\n    return (\n      <div className=\"dropzone-message flex flex-row flex-center-vertical\">\n        <h5 className=\"text-muted text-left flex-fill no-margin\">\n          Click Here or Drop Files to Upload\n        </h5>\n        {accept && (\n          <span className=\"text-muted text-small half-margin-right\">\n            {\"Allowed files: \"}\n            {typeof accept === \"string\" ? accept.split(\",\").join(\", \") : accept}\n          </span>\n        )}\n        <span className=\"file-drop__icon icon-upload\"></span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dropzone-message\">\n      <span className=\"file-drop__icon icon-upload\"></span>\n      <h4 className=\"text-muted\">Click Here or Drop Files to Upload</h4>\n      {accept && (\n        <div className=\"text-muted\">\n          Allowed files: {accept.split(\",\").join(\", \")}\n        </div>\n      )}\n      {maxFileSize && (\n        <div className=\"text-muted\">\n          Max file size: {bytes.format(maxFileSize, { unitSeparator: \" \" })}\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype DropzoneFilesProps = {\n  files?: File[];\n  removeFile: (toRemove: number) => void;\n};\n\nconst DropzoneFiles: FC<\n  DropzoneFilesProps &\n    Required<Pick<DropzoneProps, \"inline\" | \"showTotalSelected\">>\n> = ({ files, inline, showTotalSelected, removeFile }) => {\n  if (!Array.isArray(files) || !files.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"dropzone-previews\">\n      <div className=\"file-drop__container container--fluid\">\n        <div className=\"row\">\n          {files.map((file, i) => (\n            <FileCard\n              key={i}\n              file={file}\n              i={i}\n              inline={inline}\n              removeFile={removeFile}\n            />\n          ))}\n        </div>\n      </div>\n      {showTotalSelected ? (\n        <div className=\"file-drop__filecnt\">{files.length} selected</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport const Dropzone: FC<DropzoneProps & ReactDropzoneProps> = ({\n  error,\n  loose,\n  compressed,\n  inline,\n  label,\n  name,\n  value,\n  maxFileSize: customMaxFileSize,\n  maxFiles,\n  onChange,\n  showTotalSelected,\n  ...props\n}) => {\n  const maxFileSize = useMemo(() => {\n    if (customMaxFileSize) {\n      return bytes.parse(customMaxFileSize);\n    } else {\n      return null;\n    }\n  }, [customMaxFileSize]);\n\n  const padding = useMemo(() => {\n    let tmp = \"\";\n    if (loose) tmp = \"dropzone--loose\";\n    if (compressed) tmp = \"dropzone--compressed\";\n    if (inline && Array.isArray(value) && value.length) {\n      switch (tmp) {\n        case \"dropzone--loose\":\n          tmp = `${tmp} half-padding-bottom`;\n          break;\n        case \"dropzone--compressed\":\n          tmp = `${tmp} no-padding-bottom`;\n          break;\n        default:\n          tmp = `${tmp} qtr-padding-bottom`;\n          break;\n      }\n    }\n    return tmp;\n  }, [loose, compressed, value, inline]);\n\n  const handleDrop = useCallback(\n    (filesToUpload: File[]) => {\n      if (maxFileSize)\n        filesToUpload = filesToUpload.filter(\n          (file) => file.size <= maxFileSize\n        );\n\n      if (maxFiles && filesToUpload.length > maxFiles)\n        filesToUpload = filesToUpload.slice(0, maxFiles);\n\n      onChange(filesToUpload);\n    },\n    [maxFileSize, maxFiles, onChange]\n  );\n\n  const removeFile = (toRemove: number) => {\n    onChange(\n      Array.isArray(value) ? value.filter((_, idx) => toRemove !== idx) : value\n    );\n  };\n\n  return (\n    <div className={`form-group${ac(error, \"form-group--error\")}`}>\n      <div className=\"form-group__text\">\n        {label ? <label htmlFor={name}>{label}</label> : null}\n        <ReactDropzone {...props} onDrop={handleDrop} maxSize={maxFileSize}>\n          {({ getRootProps, getInputProps }) => (\n            <div className={`dropzone ${padding}`} {...getRootProps()}>\n              <input {...getInputProps()} />\n              <DropzoneFiles\n                files={value}\n                showTotalSelected={showTotalSelected}\n                inline={inline}\n                removeFile={removeFile}\n              />\n              {Array.isArray(value) && value.length ? null : (\n                <DropzoneMessage\n                  maxFileSize={maxFileSize}\n                  inline={inline}\n                  accept={props.accept}\n                />\n              )}\n            </div>\n          )}\n        </ReactDropzone>\n      </div>\n      {error ? (\n        <div className={`help-block text-danger`} role=\"alert\">\n          <span>{error}</span>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n"],"names":["FileCard","file","i","removeFile","inline","div","className","key","name","onClick","e","stopPropagation","style","maxWidth","small","whiteSpace","bytes","format","size","unitSeparator","a","span","title","marginRight","DropzoneMessage","accept","maxFileSize","h5","split","join","h4","DropzoneFiles","files","showTotalSelected","Array","isArray","length","map","Dropzone","error","loose","compressed","label","value","customMaxFileSize","maxFiles","onChange","props","useMemo","parse","padding","tmp","handleDrop","useCallback","filesToUpload","filter","slice","toRemove","_","idx","ac","htmlFor","ReactDropzone","onDrop","maxSize","getRootProps","getInputProps","input","role"],"mappings":"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"}