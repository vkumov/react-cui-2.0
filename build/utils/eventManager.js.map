{"version":3,"file":"eventManager.js","sources":["../../src/utils/eventManager.ts"],"sourcesContent":["import type React from \"react\";\nimport EventEmitter from \"eventemitter3\";\n\nimport type { ButtonProps } from \"src/Button\";\nimport type {\n  ConfirmationModalProps,\n  ModalProps,\n  PromptModalProps,\n} from \"src/Modal\";\n\ntype Callback = () => void;\nexport type FullBodyProps = { close: Callback };\ntype FullBodyRenderer = (props: FullBodyProps) => React.ReactElement;\n\ntype CommonModalProps = {\n  onModalClose?: () => unknown;\n  title?: React.ReactNode;\n  onClosed?: Callback;\n};\n\ntype PromptOptions<T extends string | number = any> = {\n  initial: PromptModalProps<T>[\"initial\"];\n  type: PromptModalProps<T>[\"type\"];\n  hint: PromptModalProps<T>[\"hint\"];\n  validate: PromptModalProps<T>[\"validate\"];\n};\n\nexport type EventModalProps = (\n  | {\n      modalType: \"confirmation\";\n      prompt: ConfirmationModalProps[\"prompt\"];\n      onConfirm: ConfirmationModalProps[\"confirmHandle\"];\n      confirmText?: ConfirmationModalProps[\"confirmText\"];\n      confirmType?: ConfirmationModalProps[\"confirmType\"];\n      dontAskAgain?: ConfirmationModalProps[\"dontAskAgain\"];\n    }\n  | {\n      modalType: \"notification\";\n      body: React.ReactNode;\n      buttonColor?: ButtonProps[\"color\"];\n      button: React.ReactNode;\n    }\n  | ({\n      modalType: \"prompt\";\n      options?: Partial<PromptOptions>;\n      question: React.ReactNode;\n      cb: PromptModalProps<any>[\"onSave\"];\n    } & Omit<Partial<PromptOptions>, \"validate\">)\n  | {\n      modalType: \"dynamic\";\n      fullBody:\n        | React.ReactElement<FullBodyProps & Record<string, any>>\n        | FullBodyRenderer;\n      modalProps?: Partial<ModalProps>;\n      body?: React.ReactNode;\n      buttons?: {\n        text?: React.ReactNode;\n        color?: ButtonProps[\"color\"];\n        onClick?: (\n          event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n          close: Callback\n        ) => void;\n      }[];\n    }\n) &\n  CommonModalProps;\n\ninterface KnownEvents {\n  showModal: (modal: EventModalProps) => void;\n}\n\nexport const eventManager = new EventEmitter<KnownEvents>();\n"],"names":["eventManager","EventEmitter"],"mappings":"6BAuEa,MAAAA,EAAe,IAAIC"}