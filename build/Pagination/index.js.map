{"version":3,"file":"index.js","sources":["../../src/Pagination/PaginationContext.tsx","../../src/Pagination/Pagination.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\n\ntype IPaginationContext = {\n  active: number;\n  beginAt: number;\n  changePage: (e, position: number) => void;\n  firstAndLast: boolean;\n  icons: boolean;\n  next: ReactNode;\n  perPage: number;\n  position: number;\n  prev: ReactNode;\n  total: number;\n};\n\nexport const PaginationContext = React.createContext<IPaginationContext>(null);\n","import React, { FC, ReactNode } from \"react\";\n\nimport { PaginationContext } from \"./PaginationContext\";\n\ntype ButtonProps = {\n  active?: boolean;\n  content: ReactNode;\n  disabled?: boolean;\n  position: number;\n};\n\nconst Button: FC<ButtonProps> = ({\n  content,\n  position,\n  active = false,\n  disabled = false,\n}) => (\n  <PaginationContext.Consumer>\n    {({ changePage }) => (\n      <li className={active ? \"active\" : \"\"}>\n        <a\n          className={disabled ? \"disabled\" : \"\"}\n          onClick={(e) => changePage(e, position)}\n        >\n          {content}\n        </a>\n      </li>\n    )}\n  </PaginationContext.Consumer>\n);\n\nconst FirstPrev = (): JSX.Element => {\n  const { perPage, firstAndLast, position, icons, prev, beginAt } =\n    React.useContext(PaginationContext);\n  const disabled = position < perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-left-double\" />}\n        disabled={disabled}\n        key=\"first-page\"\n        position={beginAt}\n      />\n    );\n\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-left\" /> : prev}\n      disabled={disabled}\n      key=\"previous-page\"\n      position={position - perPage}\n    />\n  );\n\n  return <>{r}</>;\n};\n\nconst NextLast = (): JSX.Element => {\n  const { beginAt, perPage, total, firstAndLast, position, icons, next } =\n    React.useContext(PaginationContext);\n  const pages = Math.floor(total / perPage) + 1;\n  const disabled = position > total - perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-right\" /> : next}\n      disabled={disabled}\n      key=\"next-page\"\n      position={position + perPage}\n    />\n  );\n\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-right-double\" />}\n        disabled={disabled}\n        key=\"last-page\"\n        position={(pages - 1) * perPage + beginAt}\n      />\n    );\n\n  return <>{r}</>;\n};\n\ntype PagesProps = {\n  start: number;\n  finish: number;\n};\n\nconst Pages: FC<PagesProps> = ({ start, finish }) => (\n  <PaginationContext.Consumer>\n    {({ perPage, active, beginAt }) =>\n      [...Array(finish - start + 1)].map((v, i) => {\n        const current = start + i;\n        return (\n          <Button\n            active={active === current}\n            content={`${current}`}\n            key={`${current}-page`}\n            position={(current - 1) * perPage + beginAt}\n          />\n        );\n      })\n    }\n  </PaginationContext.Consumer>\n);\n\nexport type PaginationProps = {\n  size?: \"small\" | \"default\" | \"large\";\n  rounded?: boolean;\n  icons?: boolean;\n  next?: ReactNode;\n  prev?: ReactNode;\n  position: number;\n  perPage?: number;\n  total: number;\n  onPageChange: (e, position: number) => void;\n  firstAndLast?: boolean;\n  beginAt?: number;\n  className?: string;\n};\n\nexport const Pagination: FC<PaginationProps> = ({\n  beginAt = 1,\n  rounded = false,\n  firstAndLast = true,\n  icons = false,\n  next = \"Next\",\n  perPage = 1,\n  prev = \"Previous\",\n  size = \"default\",\n  className = null,\n  position,\n  total,\n  onPageChange,\n  ...rest\n}) => {\n  const pages = Math.ceil(total / perPage);\n  const active = Math.floor(position / perPage) + 1;\n\n  const changePage = (e, newPosition) => {\n    if (typeof onPageChange === \"function\") onPageChange(e, newPosition);\n  };\n\n  return (\n    <PaginationContext.Provider\n      value={{\n        active,\n        beginAt,\n        changePage,\n        firstAndLast,\n        icons,\n        next,\n        perPage,\n        position,\n        prev,\n        total,\n      }}\n    >\n      <ul\n        className={`pagination${\n          size !== \"default\" ? ` pagination--${size}` : \"\"\n        }${rounded ? \" pagination--rounded\" : \"\"}${\n          className ? ` ${className}` : \"\"\n        }`}\n        {...rest}\n      >\n        <FirstPrev />\n        {active < 4 || pages === 4 ? (\n          <>\n            <Pages start={1} finish={Math.min(pages, 4)} />\n            {pages > 4 ? (\n              <>\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : null}\n          </>\n        ) : (\n          <>\n            <Button\n              active={active === beginAt}\n              content=\"1\"\n              key=\"1-page\"\n              position={beginAt}\n            />\n            <li>\n              <span className=\"icon-more\" />\n            </li>\n            {active < pages - 2 ? (\n              <>\n                <Pages start={active - 1} finish={active + 1} />\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  active={active === pages}\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : (\n              <Pages start={pages - 3} finish={pages} />\n            )}\n          </>\n        )}\n        <NextLast />\n      </ul>\n    </PaginationContext.Provider>\n  );\n};\n"],"names":["PaginationContext","React","Button","content","position","active","disabled","jsx","changePage","e","FirstPrev","perPage","firstAndLast","icons","prev","beginAt","r","Fragment","NextLast","total","next","pages","Pages","start","finish","v","i","current","Pagination","rounded","size","className","onPageChange","rest","newPosition","jsxs"],"mappings":"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"}