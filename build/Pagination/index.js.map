{"version":3,"file":"index.js","sources":["../../src/Pagination/PaginationContext.tsx","../../src/Pagination/Pagination.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\n\ntype IPaginationContext = {\n  active: number;\n  beginAt: number;\n  changePage: (e, position: number) => void;\n  firstAndLast: boolean;\n  icons: boolean;\n  next: ReactNode;\n  perPage: number;\n  position: number;\n  prev: ReactNode;\n  total: number;\n};\n\nexport const PaginationContext = React.createContext<IPaginationContext>(null);\n","import React, { FC, ReactNode } from \"react\";\n\nimport { PaginationContext } from \"./PaginationContext\";\n\ntype ButtonProps = {\n  active?: boolean;\n  content: ReactNode;\n  disabled?: boolean;\n  position: number;\n};\n\nconst Button: FC<ButtonProps> = ({\n  content,\n  position,\n  active = false,\n  disabled = false,\n}) => (\n  <PaginationContext.Consumer>\n    {({ changePage }) => (\n      <li className={active ? \"active\" : \"\"}>\n        <a\n          className={disabled ? \"disabled\" : \"\"}\n          onClick={(e) => changePage(e, position)}\n        >\n          {content}\n        </a>\n      </li>\n    )}\n  </PaginationContext.Consumer>\n);\n\nconst FirstPrev = (): JSX.Element => {\n  const { perPage, firstAndLast, position, icons, prev, beginAt } =\n    React.useContext(PaginationContext);\n  const disabled = position < perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-left-double\" />}\n        disabled={disabled}\n        key=\"first-page\"\n        position={beginAt}\n      />\n    );\n\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-left\" /> : prev}\n      disabled={disabled}\n      key=\"previous-page\"\n      position={position - perPage}\n    />\n  );\n\n  return <>{r}</>;\n};\n\nconst NextLast = (): JSX.Element => {\n  const { beginAt, perPage, total, firstAndLast, position, icons, next } =\n    React.useContext(PaginationContext);\n  const pages = Math.floor(total / perPage) + 1;\n  const disabled = position > total - perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-right\" /> : next}\n      disabled={disabled}\n      key=\"next-page\"\n      position={position + perPage}\n    />\n  );\n\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-right-double\" />}\n        disabled={disabled}\n        key=\"last-page\"\n        position={(pages - 1) * perPage + beginAt}\n      />\n    );\n\n  return <>{r}</>;\n};\n\ntype PagesProps = {\n  start: number;\n  finish: number;\n};\n\nconst Pages: FC<PagesProps> = ({ start, finish }) => (\n  <PaginationContext.Consumer>\n    {({ perPage, active, beginAt }) =>\n      [...Array(finish - start + 1)].map((v, i) => {\n        const current = start + i;\n        return (\n          <Button\n            active={active === current}\n            content={`${current}`}\n            key={`${current}-page`}\n            position={(current - 1) * perPage + beginAt}\n          />\n        );\n      })\n    }\n  </PaginationContext.Consumer>\n);\n\nexport type PaginationProps = {\n  size?: \"small\" | \"default\" | \"large\";\n  rounded?: boolean;\n  icons?: boolean;\n  next?: ReactNode;\n  prev?: ReactNode;\n  position: number;\n  perPage?: number;\n  total: number;\n  onPageChange: (e, position: number) => void;\n  firstAndLast?: boolean;\n  beginAt?: number;\n  className?: string;\n};\n\nexport const Pagination: FC<PaginationProps> = ({\n  beginAt = 1,\n  rounded = false,\n  firstAndLast = true,\n  icons = false,\n  next = \"Next\",\n  perPage = 1,\n  prev = \"Previous\",\n  size = \"default\",\n  className = null,\n  position,\n  total,\n  onPageChange,\n  ...rest\n}) => {\n  const pages = Math.ceil(total / perPage);\n  const active = Math.floor(position / perPage) + 1;\n\n  const changePage = (e, newPosition) => {\n    if (typeof onPageChange === \"function\") onPageChange(e, newPosition);\n  };\n\n  return (\n    <PaginationContext.Provider\n      value={{\n        active,\n        beginAt,\n        changePage,\n        firstAndLast,\n        icons,\n        next,\n        perPage,\n        position,\n        prev,\n        total,\n      }}\n    >\n      <ul\n        className={`pagination${\n          size !== \"default\" ? ` pagination--${size}` : \"\"\n        }${rounded ? \" pagination--rounded\" : \"\"}${\n          className ? ` ${className}` : \"\"\n        }`}\n        {...rest}\n      >\n        <FirstPrev />\n        {active < 4 || pages === 4 ? (\n          <>\n            <Pages start={1} finish={Math.min(pages, 4)} />\n            {pages > 4 ? (\n              <>\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : null}\n          </>\n        ) : (\n          <>\n            <Button\n              active={active === beginAt}\n              content=\"1\"\n              key=\"1-page\"\n              position={beginAt}\n            />\n            <li>\n              <span className=\"icon-more\" />\n            </li>\n            {active < pages - 2 ? (\n              <>\n                <Pages start={active - 1} finish={active + 1} />\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  active={active === pages}\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : (\n              <Pages start={pages - 3} finish={pages} />\n            )}\n          </>\n        )}\n        <NextLast />\n      </ul>\n    </PaginationContext.Provider>\n  );\n};\n"],"names":["PaginationContext","React","Button","content","position","active","disabled","changePage","e","FirstPrev","perPage","firstAndLast","icons","prev","beginAt","r","NextLast","total","next","pages","Pages","start","finish","v","i","current","Pagination","rounded","size","className","onPageChange","rest","newPosition"],"mappings":"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"}