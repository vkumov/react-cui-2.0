{"version":3,"file":"index.js","sources":["../../src/Pagination/PaginationContext.tsx","../../src/Pagination/Pagination.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\n\ntype IPaginationContext = {\n  active: number;\n  beginAt: number;\n  changePage: (e, position: number) => void;\n  firstAndLast: boolean;\n  icons: boolean;\n  next: ReactNode;\n  perPage: number;\n  position: number;\n  prev: ReactNode;\n  total: number;\n};\n\nexport const PaginationContext = React.createContext<IPaginationContext>(null);\n","import React, { FC, ReactNode } from \"react\";\nimport { PaginationContext } from \"./PaginationContext\";\n\ntype ButtonProps = {\n  active?: boolean;\n  content: ReactNode;\n  disabled?: boolean;\n  position: number;\n};\n\nconst Button: FC<ButtonProps> = ({\n  content,\n  position,\n  active = false,\n  disabled = false,\n}) => (\n  <PaginationContext.Consumer>\n    {({ changePage }) => (\n      <li className={active ? \"active\" : \"\"}>\n        <a\n          className={disabled ? \"disabled\" : \"\"}\n          onClick={(e) => changePage(e, position)}\n        >\n          {content}\n        </a>\n      </li>\n    )}\n  </PaginationContext.Consumer>\n);\n\nconst FirstPrev = (): JSX.Element => {\n  const { perPage, firstAndLast, position, icons, prev, beginAt } =\n    React.useContext(PaginationContext);\n  const disabled = position < perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-left-double\" />}\n        disabled={disabled}\n        key=\"first-page\"\n        position={beginAt}\n      />\n    );\n\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-left\" /> : prev}\n      disabled={disabled}\n      key=\"previous-page\"\n      position={position - perPage}\n    />\n  );\n\n  return <>{r}</>;\n};\n\nconst NextLast = (): JSX.Element => {\n  const { beginAt, perPage, total, firstAndLast, position, icons, next } =\n    React.useContext(PaginationContext);\n  const pages = Math.floor(total / perPage) + 1;\n  const disabled = position > total - perPage + beginAt;\n\n  const r: JSX.Element[] = [];\n  r.push(\n    <Button\n      content={icons ? <span className=\"icon-chevron-right\" /> : next}\n      disabled={disabled}\n      key=\"next-page\"\n      position={position + perPage}\n    />\n  );\n\n  if (icons && firstAndLast)\n    r.push(\n      <Button\n        content={<span className=\"icon-chevron-right-double\" />}\n        disabled={disabled}\n        key=\"last-page\"\n        position={(pages - 1) * perPage + beginAt}\n      />\n    );\n\n  return <>{r}</>;\n};\n\ntype PagesProps = {\n  start: number;\n  finish: number;\n};\n\nconst Pages: FC<PagesProps> = ({ start, finish }) => (\n  <PaginationContext.Consumer>\n    {({ perPage, active, beginAt }) =>\n      [...Array(finish - start + 1)].map((v, i) => {\n        const current = start + i;\n        return (\n          <Button\n            active={active === current}\n            content={`${current}`}\n            key={`${current}-page`}\n            position={(current - 1) * perPage + beginAt}\n          />\n        );\n      })\n    }\n  </PaginationContext.Consumer>\n);\n\nexport type PaginationProps = {\n  size?: \"small\" | \"default\" | \"large\";\n  rounded?: boolean;\n  icons?: boolean;\n  next?: ReactNode;\n  prev?: ReactNode;\n  position: number;\n  perPage?: number;\n  total: number;\n  onPageChange: (e, position: number) => void;\n  firstAndLast?: boolean;\n  beginAt?: number;\n  className?: string;\n};\n\nexport const Pagination: FC<PaginationProps> = ({\n  beginAt = 1,\n  rounded = false,\n  firstAndLast = true,\n  icons = false,\n  next = \"Next\",\n  perPage = 1,\n  prev = \"Previous\",\n  size = \"default\",\n  className = null,\n  position,\n  total,\n  onPageChange,\n  ...rest\n}) => {\n  const pages = Math.ceil(total / perPage);\n  const active = Math.floor(position / perPage) + 1;\n\n  const changePage = (e, newPosition) => {\n    if (typeof onPageChange === \"function\") onPageChange(e, newPosition);\n  };\n\n  return (\n    <PaginationContext.Provider\n      value={{\n        active,\n        beginAt,\n        changePage,\n        firstAndLast,\n        icons,\n        next,\n        perPage,\n        position,\n        prev,\n        total,\n      }}\n    >\n      <ul\n        className={`pagination${\n          size !== \"default\" ? ` pagination--${size}` : \"\"\n        }${rounded ? \" pagination--rounded\" : \"\"}${\n          className ? ` ${className}` : \"\"\n        }`}\n        {...rest}\n      >\n        <FirstPrev />\n        {active < 4 || pages === 4 ? (\n          <>\n            <Pages start={1} finish={Math.min(pages, 4)} />\n            {pages > 4 ? (\n              <>\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : null}\n          </>\n        ) : (\n          <>\n            <Button\n              active={active === beginAt}\n              content=\"1\"\n              key=\"1-page\"\n              position={beginAt}\n            />\n            <li>\n              <span className=\"icon-more\" />\n            </li>\n            {active < pages - 2 ? (\n              <>\n                <Pages start={active - 1} finish={active + 1} />\n                <li>\n                  <span className=\"icon-more\" />\n                </li>\n                <Button\n                  active={active === pages}\n                  content={pages}\n                  key={`${pages}-page`}\n                  position={(pages - 1) * perPage + beginAt}\n                />\n              </>\n            ) : (\n              <Pages start={pages - 3} finish={pages} />\n            )}\n          </>\n        )}\n        <NextLast />\n      </ul>\n    </PaginationContext.Provider>\n  );\n};\n"],"names":["PaginationContext","React","createContext","Button","content","position","active","disabled","Consumer","changePage","li","className","a","onClick","e","FirstPrev","perPage","firstAndLast","icons","prev","beginAt","useContext","r","push","span","key","NextLast","total","next","pages","Math","floor","Pages","start","finish","Array","map","v","i","current","Pagination","rounded","size","onPageChange","rest","ceil","newPosition","Provider","value","ul","min"],"mappings":"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"}