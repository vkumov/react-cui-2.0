{"version":3,"file":"index.js","sources":["../../src/SegmentedControl/SegmentedControl.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useState,\n  type FC,\n  type HTMLProps,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactNode,\n  type Ref,\n  type RefCallback,\n} from \"react\";\nimport cx from \"classnames\";\n\nimport styles from \"./Segmented.module.scss\";\n\nexport type SegmentedOption<V> = {\n  label: ReactNode;\n  value: V;\n  disabled?: boolean;\n};\n\ntype ActiveProps = {\n  activeElement: HTMLDivElement | null;\n  value: any;\n  fullWidth?: boolean;\n  small: boolean;\n};\n\nconst Active: FC<ActiveProps> = ({\n  activeElement,\n  value,\n  fullWidth,\n  small,\n}) => {\n  const [coord, setCoord] = useState({ x: 0, y: 0, w: 0, h: 0 });\n\n  useEffect(() => {\n    if (!activeElement) return;\n\n    setCoord({\n      x: activeElement.offsetLeft - (small ? 2 : 4),\n      y: activeElement.offsetTop - (small ? 2 : 4),\n      w: activeElement.offsetWidth,\n      h: activeElement.offsetHeight,\n    });\n  }, [activeElement, value, fullWidth, small]);\n\n  if (!activeElement) return null;\n\n  return (\n    <span\n      className={styles.segmented_active}\n      style={{\n        width: `${coord.w}px`,\n        height: `${coord.h}px`,\n        transform:\n          coord.x > 0 || coord.y > 0\n            ? `translateX(${coord.x}px) translateY(${coord.y}px) translateZ(0px)`\n            : \"none\",\n      }}\n    />\n  );\n};\n\ntype OptionDisplayProps = {\n  value: any;\n  active: boolean;\n  disabled?: boolean;\n  activeRef: MutableRefObject<HTMLDivElement> | RefCallback<HTMLDivElement>;\n} & HTMLProps<HTMLInputElement>;\n\nconst OptionDisplay: FC<PropsWithChildren<OptionDisplayProps>> = ({\n  children,\n  value,\n  activeRef,\n  active,\n  className,\n  disabled,\n  id,\n  ...props\n}) => {\n  return (\n    <div\n      className={cx(styles.segmented_option_control, className, {\n        [styles.segmented_option_control_active]: active,\n        disabled,\n      })}\n      ref={active ? activeRef : null}\n    >\n      <input\n        type=\"radio\"\n        className={styles.segmented_option_control_input}\n        value={value}\n        id={`${id || props.name}-${value}`}\n        {...props}\n      />\n      <label\n        className={styles.segmented_option_control_label}\n        htmlFor={`${id || props.name}-${value}`}\n      >\n        {children}\n      </label>\n    </div>\n  );\n};\n\ntype Props<V> = {\n  options: SegmentedOption<V>[] | readonly SegmentedOption<V>[];\n  value: V;\n  label?: ReactNode;\n  inline?: boolean;\n  fullWidth?: boolean;\n  small?: boolean;\n} & HTMLProps<HTMLInputElement>;\n\nfunction UrefedSegmented<V extends string | number = string>(\n  {\n    options,\n    value,\n    label,\n    inline,\n    className,\n    fullWidth,\n    small,\n    ...props\n  }: Props<V>,\n  ref: Ref<HTMLDivElement>\n): JSX.Element {\n  const [el, setEl] = useState<HTMLDivElement | null>(null);\n  const activeRefCb: RefCallback<HTMLDivElement> = useCallback((node) => {\n    if (node !== null) {\n      setEl(node);\n    } else setEl(null);\n  }, []);\n\n  return (\n    <div\n      className={cx(\"form-group\", className, { \"form-group--inline\": inline })}\n    >\n      <div\n        className={cx(styles.form_group, {\n          [styles[\"form_group--full\"]]: fullWidth,\n          [styles.small]: small,\n        })}\n      >\n        {label ? <label>{label}</label> : null}\n        <div\n          className={cx(styles.segmented_root, {\n            [styles[\"segmented_root--full\"]]: fullWidth,\n          })}\n          ref={ref}\n        >\n          <Active\n            activeElement={el}\n            value={value}\n            fullWidth={fullWidth}\n            small={small}\n          />\n          {options.map((o) => (\n            <OptionDisplay\n              activeRef={activeRefCb}\n              active={value === o.value}\n              value={o.value}\n              key={o.value}\n              disabled={o.disabled}\n              {...props}\n            >\n              {o.label}\n            </OptionDisplay>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport type SegmentedControlProps<V> = Props<V> & {\n  ref?: React.ForwardedRef<HTMLDivElement>;\n};\n\nexport const SegmentedControl = forwardRef(UrefedSegmented) as <\n  V extends string | number = string\n>({\n  options,\n  value,\n  ...props\n}: SegmentedControlProps<V>) => ReturnType<typeof UrefedSegmented>;\n"],"names":["_extends","Active","activeElement","value","fullWidth","small","useState","x","y","w","h","coord","setCoord","useEffect","offsetLeft","offsetTop","offsetWidth","offsetHeight","React","span","className","styles","segmented_active","style","width","height","transform","OptionDisplay","children","activeRef","active","disabled","id","props","div","cx","segmented_option_control","segmented_option_control_active","ref","input","type","segmented_option_control_input","name","label","segmented_option_control_label","htmlFor","UrefedSegmented","options","inline","el","setEl","activeRefCb","useCallback","node","form_group","segmented_root","map","o","key","SegmentedControl","forwardRef"],"mappings":"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"}