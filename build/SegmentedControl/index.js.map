{"version":3,"file":"index.js","sources":["../../src/SegmentedControl/SegmentedControl.tsx"],"sourcesContent":["import React, {\n  type FC,\n  type HTMLProps,\n  type PropsWithChildren,\n  type ReactNode,\n  type RefObject,\n  type Ref,\n  useEffect,\n  useRef,\n  useState,\n  forwardRef,\n} from \"react\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport styles from \"./Segmented.module.scss\";\n\nexport type SegmentedOption<V> = {\n  label: ReactNode;\n  value: V;\n  disabled?: boolean;\n};\n\ntype ActiveProps = {\n  activeRef: RefObject<HTMLDivElement>;\n  value: any;\n  fullWidth?: boolean;\n};\n\nconst Active: FC<ActiveProps> = ({ activeRef, value, fullWidth }) => {\n  const [coord, setCoord] = useState({ x: 0, y: 0, w: 0, h: 0 });\n\n  useEffect(() => {\n    if (!activeRef.current) return;\n\n    setCoord({\n      x: activeRef.current.offsetLeft - 4,\n      y: activeRef.current.offsetTop - 4,\n      w: activeRef.current.offsetWidth,\n      h: activeRef.current.offsetHeight,\n    });\n  }, [activeRef.current, value, fullWidth]);\n\n  if (!activeRef.current) return null;\n\n  return (\n    <span\n      className={styles.segmented_active}\n      style={{\n        width: `${coord.w}px`,\n        height: `${coord.h}px`,\n        transform:\n          coord.x > 0 || coord.y > 0\n            ? `translateX(${coord.x}px) translateY(${coord.y}px) translateZ(0px)`\n            : \"none\",\n      }}\n    />\n  );\n};\n\ntype OptionDisplayProps = {\n  value: any;\n  active: boolean;\n  disabled?: boolean;\n} & Pick<ActiveProps, \"activeRef\"> &\n  HTMLProps<HTMLInputElement>;\n\nconst OptionDisplay: FC<PropsWithChildren<OptionDisplayProps>> = ({\n  children,\n  value,\n  activeRef,\n  active,\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <div\n      className={`${styles.segmented_option_control}${ac(\n        active,\n        styles.segmented_option_control_active\n      )}${ac(disabled, \"disabled\")}`}\n      ref={active ? activeRef : null}\n    >\n      <input\n        type=\"radio\"\n        className={styles.segmented_option_control_input}\n        value={value}\n        id={`${props.name}-${value}`}\n        {...props}\n      />\n      <label\n        className={styles.segmented_option_control_label}\n        htmlFor={`${props.name}-${value}`}\n      >\n        {children}\n      </label>\n    </div>\n  );\n};\n\ntype Props<V> = {\n  options: SegmentedOption<V>[] | readonly SegmentedOption<V>[];\n  value: V;\n  label?: ReactNode;\n  inline?: boolean;\n  fullWidth?: boolean;\n} & HTMLProps<HTMLInputElement>;\n\nfunction UrefedSegmented<V extends string | number = string>(\n  { options, value, label, inline, className, fullWidth, ...props }: Props<V>,\n  ref: Ref<HTMLDivElement>\n): JSX.Element {\n  const activeRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n        className\n      )}`}\n    >\n      <div\n        className={`${styles.form_group}${ac(\n          fullWidth,\n          styles[\"form_group--full\"]\n        )}`}\n      >\n        {label ? <label>{label}</label> : null}\n        <div\n          className={`${styles.segmented_root}${ac(\n            fullWidth,\n            styles[\"segmented_root--full\"]\n          )}`}\n          ref={ref}\n        >\n          <Active activeRef={activeRef} value={value} fullWidth={fullWidth} />\n          {options.map((o) => (\n            <OptionDisplay\n              activeRef={activeRef}\n              active={value === o.value}\n              value={o.value}\n              key={o.value}\n              disabled={o.disabled}\n              {...props}\n            >\n              {o.label}\n            </OptionDisplay>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport type SegmentedControlProps<V> = Props<V> & {\n  ref?: React.ForwardedRef<HTMLDivElement>;\n};\n\nexport const SegmentedControl = forwardRef(UrefedSegmented) as <\n  V extends string | number = string\n>({\n  options,\n  value,\n  ...props\n}: SegmentedControlProps<V>) => ReturnType<typeof UrefedSegmented>;\n"],"names":["Active","activeRef","value","fullWidth","coord","setCoord","useState","x","y","w","h","useEffect","current","offsetLeft","offsetTop","offsetWidth","offsetHeight","span","className","styles","segmented_active","style","width","height","transform","OptionDisplay","children","active","disabled","props","div","segmented_option_control","ac","segmented_option_control_active","ref","input","type","segmented_option_control_input","id","name","label","segmented_option_control_label","htmlFor","UrefedSegmented","options","inline","useRef","form_group","segmented_root","map","o","key","SegmentedControl","forwardRef"],"mappings":"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"}