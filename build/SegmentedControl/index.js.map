{"version":3,"file":"index.js","sources":["../../src/SegmentedControl/SegmentedControl.tsx"],"sourcesContent":["import React, {\n  type FC,\n  type HTMLProps,\n  type PropsWithChildren,\n  type ReactNode,\n  type RefObject,\n  type Ref,\n  useEffect,\n  useRef,\n  useState,\n  forwardRef,\n} from \"react\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport styles from \"./Segmented.module.scss\";\n\nexport type SegmentedOption<V> = {\n  label: ReactNode;\n  value: V;\n  disabled?: boolean;\n};\n\ntype ActiveProps = {\n  activeRef: RefObject<HTMLDivElement>;\n  value: any;\n  fullWidth?: boolean;\n};\n\nconst Active: FC<ActiveProps> = ({ activeRef, value, fullWidth }) => {\n  const [coord, setCoord] = useState({ x: 0, y: 0, w: 0, h: 0 });\n\n  useEffect(() => {\n    if (!activeRef.current) return;\n\n    setCoord({\n      x: activeRef.current.offsetLeft - 4,\n      y: activeRef.current.offsetTop - 4,\n      w: activeRef.current.offsetWidth,\n      h: activeRef.current.offsetHeight,\n    });\n  }, [activeRef.current, value, fullWidth]);\n\n  if (!activeRef.current) return null;\n\n  return (\n    <span\n      className={styles.segmented_active}\n      style={{\n        width: `${coord.w}px`,\n        height: `${coord.h}px`,\n        transform:\n          coord.x > 0 || coord.y > 0\n            ? `translateX(${coord.x}px) translateY(${coord.y}px) translateZ(0px)`\n            : \"none\",\n      }}\n    />\n  );\n};\n\ntype OptionDisplayProps = {\n  value: any;\n  active: boolean;\n  disabled?: boolean;\n} & Pick<ActiveProps, \"activeRef\"> &\n  HTMLProps<HTMLInputElement>;\n\nconst OptionDisplay: FC<PropsWithChildren<OptionDisplayProps>> = ({\n  children,\n  value,\n  activeRef,\n  active,\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <div\n      className={`${styles.segmented_option_control}${ac(\n        active,\n        styles.segmented_option_control_active\n      )}${ac(disabled, \"disabled\")}`}\n      ref={active ? activeRef : null}\n    >\n      <input\n        type=\"radio\"\n        className={styles.segmented_option_control_input}\n        value={value}\n        id={`${props.name}-${value}`}\n        {...props}\n      />\n      <label\n        className={styles.segmented_option_control_label}\n        htmlFor={`${props.name}-${value}`}\n      >\n        {children}\n      </label>\n    </div>\n  );\n};\n\ntype Props<V> = {\n  options: SegmentedOption<V>[] | readonly SegmentedOption<V>[];\n  value: V;\n  label?: ReactNode;\n  inline?: boolean;\n  fullWidth?: boolean;\n} & HTMLProps<HTMLInputElement>;\n\nfunction UrefedSegmented<V extends string | number = string>(\n  { options, value, label, inline, className, fullWidth, ...props }: Props<V>,\n  ref: Ref<HTMLDivElement>\n): JSX.Element {\n  const activeRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n        className\n      )}`}\n    >\n      <div\n        className={`${styles.form_group}${ac(\n          fullWidth,\n          styles[\"form_group--full\"]\n        )}`}\n      >\n        {label ? <label>{label}</label> : null}\n        <div\n          className={`${styles.segmented_root}${ac(\n            fullWidth,\n            styles[\"segmented_root--full\"]\n          )}`}\n          ref={ref}\n        >\n          <Active activeRef={activeRef} value={value} fullWidth={fullWidth} />\n          {options.map((o) => (\n            <OptionDisplay\n              activeRef={activeRef}\n              active={value === o.value}\n              value={o.value}\n              key={o.value}\n              disabled={o.disabled}\n              {...props}\n            >\n              {o.label}\n            </OptionDisplay>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport type SegmentedControlProps<V> = Props<V> & {\n  ref?: React.ForwardedRef<HTMLDivElement>;\n};\n\nexport const SegmentedControl = forwardRef(UrefedSegmented) as <\n  V extends string | number = string\n>({\n  options,\n  value,\n  ...props\n}: SegmentedControlProps<V>) => ReturnType<typeof UrefedSegmented>;\n"],"names":["Active","activeRef","value","fullWidth","coord","setCoord","useState","x","y","w","h","useEffect","current","offsetLeft","offsetTop","offsetWidth","offsetHeight","span","className","styles","segmented_active","style","width","height","transform","OptionDisplay","children","active","disabled","props","div","segmented_option_control","ac","segmented_option_control_active","ref","input","type","segmented_option_control_input","id","name","label","segmented_option_control_label","htmlFor","UrefedSegmented","options","inline","useRef","form_group","segmented_root","map","o","key","SegmentedControl","forwardRef"],"mappings":"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"}