{"version":3,"file":"index.js","sources":["../../src/InputChips/InputChips.tsx"],"sourcesContent":["import React, {\n  HTMLProps,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { InputHelpBaloon, InputHelpBlock } from \"src/InputHelp\";\nimport { Label, LabelColor } from \"src/Label\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/chips.css\";\n\nexport type InputChipsProps = {\n  label?: ReactNode;\n  chipsColor?: LabelColor;\n  addOnBlur?: boolean;\n  allowRepeat?: boolean;\n  allowRegex?: string;\n  delimiters?: string | number[];\n  valueValidator?: (value: any) => boolean;\n  maxChips?: number;\n  baloon?: string;\n  className?: string;\n  id?: string;\n  error?: ReactNode;\n  value?: string[];\n  outerWrap?: boolean;\n  onChange?: (newValue: string[]) => void;\n  onChipRemove?: (idx: number) => void;\n  chipsOutside?: boolean;\n  noInput?: boolean;\n  renderChip?: (params: {\n    onDelete: () => unknown;\n    value: string;\n    idx: number;\n  }) => JSX.Element;\n};\n\nexport type FullInputChipsProps = InputChipsProps &\n  Omit<HTMLProps<HTMLInputElement>, \"id\" | \"value\" | \"onChange\" | \"label\">;\n\nconst emptyList: string[] = [];\n\nexport const InputChips = React.forwardRef<HTMLDivElement, FullInputChipsProps>(\n  (\n    {\n      chipsColor = \"light\",\n      addOnBlur = true,\n      delimiters = [13],\n      label = null,\n      allowRepeat = false,\n      allowRegex = null,\n      valueValidator = null,\n      maxChips = null,\n      baloon = null,\n      className = null,\n      id = null,\n      error = null,\n      value: initialValue = null,\n      onChange,\n      outerWrap = true,\n      chipsOutside = false,\n      renderChip = null,\n      onBlur = null,\n      onChipRemove = null,\n      onClick,\n      noInput,\n      ...input\n    },\n    ref\n  ) => {\n    const [value, setValue] = useState<string[]>(emptyList);\n\n    useEffect(() => {\n      setValue((curr) => initialValue || curr || emptyList);\n    }, [initialValue]);\n\n    const addValue = useCallback(\n      (v) => {\n        if (typeof valueValidator === \"function\") {\n          if (!valueValidator(v)) return;\n        }\n        setValue((curr) => {\n          if (allowRepeat || !(curr || []).includes(v)) {\n            const n = (curr || []).concat(v);\n            if (typeof onChange === \"function\") onChange(n);\n            return n;\n          } else return curr;\n        });\n      },\n      [allowRepeat, valueValidator, onChange]\n    );\n\n    const handleKeyDown = useCallback(\n      (event) => {\n        let d = delimiters;\n        if (typeof d === \"string\") {\n          const { map } = Array.prototype;\n          d = map.call(d, (ch) => ch.charCodeAt(0));\n        }\n\n        if (Array.isArray(d) && d.includes(event.keyCode)) {\n          addValue(event.target.value);\n          event.target.value = \"\";\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      },\n      [delimiters, addValue]\n    );\n\n    const handleBlur = useCallback(\n      (event) => {\n        if (addOnBlur && event.target?.value) {\n          const { value } = event.target;\n          if (allowRegex && RegExp(allowRegex).test(value)) {\n            addValue(value);\n          } else if (!allowRegex) {\n            addValue(value);\n          }\n        }\n        event.target.value = \"\";\n        if (typeof onBlur === \"function\") onBlur(event);\n      },\n      [addOnBlur, allowRegex, addValue, onBlur]\n    );\n\n    const handleDelete = useCallback(\n      (idx) => {\n        setValue((curr) => {\n          curr.splice(idx, 1);\n          if (typeof onChange === \"function\") onChange(curr.slice());\n          return curr.slice();\n        });\n        if (typeof onChipRemove === \"function\") onChipRemove(idx);\n      },\n      [onChange, onChipRemove]\n    );\n\n    const showInput =\n      (!maxChips ||\n        (maxChips && Array.isArray(value) && value.length < maxChips)) &&\n      !noInput;\n\n    return (\n      <ConditionalWrapper\n        wrapper={\n          <div\n            className={`form-group${ac(className)}${ac(\n              error,\n              \"form-group--error\"\n            )}`}\n            ref={ref}\n          ></div>\n        }\n        condition={outerWrap}\n      >\n        <div\n          className={`form-group__text chips${ac(\n            !outerWrap && className,\n            className\n          )}`}\n        >\n          {label ? (\n            <label htmlFor={id || input.name}>\n              {label}\n              {baloon ? <InputHelpBaloon baloon={baloon} /> : null}\n            </label>\n          ) : null}\n          {chipsOutside && Array.isArray(value) && value.length ? (\n            <span className=\"chips-outer qtr-margin-bottom\">\n              <span className=\"chips-inner\">\n                {value.map((v, i) =>\n                  renderChip ? (\n                    renderChip({\n                      value: v,\n                      idx: i,\n                      onDelete: () => handleDelete(i),\n                    })\n                  ) : (\n                    <Label\n                      removable\n                      onRemove={() => handleDelete(i)}\n                      color={chipsColor}\n                      size=\"small\"\n                      key={`${v}-${i}`}\n                      className=\"no-margin-bottom\"\n                    >\n                      {v}\n                    </Label>\n                  )\n                )}\n              </span>\n            </span>\n          ) : null}\n          <div\n            className={`input ${ac(!showInput, \"dbl-padding-right\")}`}\n            onClick={onClick}\n          >\n            {!chipsOutside && Array.isArray(value) && value.length ? (\n              <span className=\"chips-outer\">\n                <span className=\"chips-inner\">\n                  {value.map((v, i) =>\n                    renderChip ? (\n                      renderChip({\n                        value: v,\n                        idx: i,\n                        onDelete: () => handleDelete(i),\n                      })\n                    ) : (\n                      <Label\n                        removable\n                        onRemove={(e: MouseEvent) => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          handleDelete(i);\n                        }}\n                        color={chipsColor}\n                        size=\"small\"\n                        key={`${v}-${i}`}\n                        className=\"no-margin-bottom\"\n                      >\n                        {v}\n                      </Label>\n                    )\n                  )}\n                </span>\n              </span>\n            ) : null}\n            {showInput ? (\n              <input\n                type=\"text\"\n                onKeyDown={handleKeyDown}\n                onBlur={handleBlur}\n                id={id || input.name}\n                {...input}\n              />\n            ) : null}\n          </div>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </ConditionalWrapper>\n    );\n  }\n);\n"],"names":["_extends","emptyList","InputChips","React","forwardRef","ref","chipsColor","addOnBlur","delimiters","label","allowRepeat","allowRegex","valueValidator","maxChips","baloon","className","id","error","initialValue","value","onChange","outerWrap","chipsOutside","renderChip","onBlur","onChipRemove","onClick","noInput","input","useState","setValue","useEffect","curr","addValue","useCallback","v","includes","n","concat","handleKeyDown","event","d","map","Array","prototype","call","ch","charCodeAt","isArray","keyCode","target","stopPropagation","preventDefault","handleBlur","RegExp","test","handleDelete","idx","splice","slice","showInput","length","ConditionalWrapper","wrapper","div","ac","condition","htmlFor","name","InputHelpBaloon","span","i","onDelete","Label","removable","onRemove","color","size","key","e","type","onKeyDown","InputHelpBlock","text"],"mappings":"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"}