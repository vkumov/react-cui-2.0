{"version":3,"file":"index.js","sources":["../../src/InputChips/InputChips.tsx"],"sourcesContent":["import React, {\n  HTMLProps,\n  ReactNode,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { Label, LabelColor } from \"src/Label\";\nimport { InputHelpBlock, InputHelpBaloon } from \"src/InputHelp\";\n\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/chips.css\";\n\nexport type InputChipsProps = {\n  label?: ReactNode;\n  chipsColor?: LabelColor;\n  addOnBlur?: boolean;\n  allowRepeat?: boolean;\n  allowRegex?: string;\n  delimiters?: string | number[];\n  valueValidator?: (value: any) => boolean;\n  maxChips?: number;\n  baloon?: string;\n  className?: string;\n  id?: string;\n  error?: ReactNode;\n  value?: string[];\n  outerWrap?: boolean;\n  onChange?: (newValue: string[]) => void;\n  onChipRemove?: (idx: number) => void;\n  chipsOutside?: boolean;\n  noInput?: boolean;\n  renderChip?: (params: {\n    onDelete: () => unknown;\n    value: string;\n    idx: number;\n  }) => JSX.Element;\n};\n\nexport type FullInputChipsProps = InputChipsProps &\n  Omit<HTMLProps<HTMLInputElement>, \"id\" | \"value\" | \"onChange\" | \"label\">;\n\nconst emptyList: string[] = [];\n\nexport const InputChips = React.forwardRef<HTMLDivElement, FullInputChipsProps>(\n  (\n    {\n      chipsColor = \"light\",\n      addOnBlur = true,\n      delimiters = [13],\n      label = null,\n      allowRepeat = false,\n      allowRegex = null,\n      valueValidator = null,\n      maxChips = null,\n      baloon = null,\n      className = null,\n      id = null,\n      error = null,\n      value: initialValue = null,\n      onChange,\n      outerWrap = true,\n      chipsOutside = false,\n      renderChip = null,\n      onBlur = null,\n      onChipRemove = null,\n      onClick,\n      noInput,\n      ...input\n    },\n    ref\n  ) => {\n    const [value, setValue] = useState<string[]>(emptyList);\n\n    useEffect(() => {\n      setValue((curr) => initialValue || curr || emptyList);\n    }, [initialValue]);\n\n    const addValue = useCallback(\n      (v) => {\n        if (typeof valueValidator === \"function\") {\n          if (!valueValidator(v)) return;\n        }\n        setValue((curr) => {\n          if (allowRepeat || !(curr || []).includes(v)) {\n            const n = (curr || []).concat(v);\n            if (typeof onChange === \"function\") onChange(n);\n            return n;\n          } else return curr;\n        });\n      },\n      [allowRepeat, valueValidator, onChange]\n    );\n\n    const handleKeyDown = useCallback(\n      (event) => {\n        let d = delimiters;\n        if (typeof d === \"string\") {\n          const { map } = Array.prototype;\n          d = map.call(d, (ch) => ch.charCodeAt(0));\n        }\n\n        if (Array.isArray(d) && d.includes(event.keyCode)) {\n          addValue(event.target.value);\n          event.target.value = \"\";\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      },\n      [delimiters, addValue]\n    );\n\n    const handleBlur = useCallback(\n      (event) => {\n        if (addOnBlur && event.target?.value) {\n          const { value } = event.target;\n          if (allowRegex && RegExp(allowRegex).test(value)) {\n            addValue(value);\n          } else if (!allowRegex) {\n            addValue(value);\n          }\n        }\n        event.target.value = \"\";\n        if (typeof onBlur === \"function\") onBlur(event);\n      },\n      [addOnBlur, allowRegex, addValue, onBlur]\n    );\n\n    const handleDelete = useCallback(\n      (idx) => {\n        setValue((curr) => {\n          curr.splice(idx, 1);\n          if (typeof onChange === \"function\") onChange(curr.slice());\n          return curr.slice();\n        });\n        if (typeof onChipRemove === \"function\") onChipRemove(idx);\n      },\n      [onChange, onChipRemove]\n    );\n\n    const showInput =\n      (!maxChips ||\n        (maxChips && Array.isArray(value) && value.length < maxChips)) &&\n      !noInput;\n\n    return (\n      <ConditionalWrapper\n        wrapper={\n          <div\n            className={`form-group${ac(className)}${ac(\n              error,\n              \"form-group--error\"\n            )}`}\n            ref={ref}\n          ></div>\n        }\n        condition={outerWrap}\n      >\n        <div\n          className={`form-group__text chips${ac(\n            !outerWrap && className,\n            className\n          )}`}\n        >\n          {label ? (\n            <label htmlFor={id || input.name}>\n              {label}\n              {baloon ? <InputHelpBaloon baloon={baloon} /> : null}\n            </label>\n          ) : null}\n          {chipsOutside && Array.isArray(value) && value.length ? (\n            <span className=\"chips-outer qtr-margin-bottom\">\n              <span className=\"chips-inner\">\n                {value.map((v, i) =>\n                  renderChip ? (\n                    renderChip({\n                      value: v,\n                      idx: i,\n                      onDelete: () => handleDelete(i),\n                    })\n                  ) : (\n                    <Label\n                      removable\n                      onRemove={() => handleDelete(i)}\n                      color={chipsColor}\n                      size=\"small\"\n                      key={`${v}-${i}`}\n                      className=\"no-margin-bottom\"\n                    >\n                      {v}\n                    </Label>\n                  )\n                )}\n              </span>\n            </span>\n          ) : null}\n          <div\n            className={`input ${ac(!showInput, \"dbl-padding-right\")}`}\n            onClick={onClick}\n          >\n            {!chipsOutside && Array.isArray(value) && value.length ? (\n              <span className=\"chips-outer\">\n                <span className=\"chips-inner\">\n                  {value.map((v, i) =>\n                    renderChip ? (\n                      renderChip({\n                        value: v,\n                        idx: i,\n                        onDelete: () => handleDelete(i),\n                      })\n                    ) : (\n                      <Label\n                        removable\n                        onRemove={(e: MouseEvent) => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          handleDelete(i);\n                        }}\n                        color={chipsColor}\n                        size=\"small\"\n                        key={`${v}-${i}`}\n                        className=\"no-margin-bottom\"\n                      >\n                        {v}\n                      </Label>\n                    )\n                  )}\n                </span>\n              </span>\n            ) : null}\n            {showInput ? (\n              <input\n                type=\"text\"\n                onKeyDown={handleKeyDown}\n                onBlur={handleBlur}\n                id={id || input.name}\n                {...input}\n              />\n            ) : null}\n          </div>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </ConditionalWrapper>\n    );\n  }\n);\n"],"names":["emptyList","InputChips","React","forwardRef","chipsColor","addOnBlur","delimiters","label","allowRepeat","allowRegex","valueValidator","maxChips","baloon","className","id","error","value","initialValue","onChange","outerWrap","chipsOutside","renderChip","onBlur","onChipRemove","onClick","noInput","input","ref","setValue","useState","useEffect","curr","addValue","useCallback","v","includes","n","concat","handleKeyDown","event","d","map","Array","prototype","call","ch","charCodeAt","isArray","keyCode","target","stopPropagation","preventDefault","handleBlur","RegExp","test","handleDelete","idx","splice","slice","showInput","length","ConditionalWrapper","wrapper","div","ac","condition","htmlFor","name","InputHelpBaloon","span","i","onDelete","Label","removable","onRemove","color","size","key","e","type","onKeyDown","InputHelpBlock","text"],"mappings":"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"}