{"version":3,"file":"index.js","sources":["../../src/InputChips/InputChips.tsx"],"sourcesContent":["import React, {\n  HTMLProps,\n  ReactNode,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { Label, LabelColor } from \"src/Label\";\nimport { InputHelpBlock, InputHelpBaloon } from \"src/InputHelp\";\n\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/chips.css\";\n\nexport type InputChipsProps = {\n  label?: ReactNode;\n  chipsColor?: LabelColor;\n  addOnBlur?: boolean;\n  allowRepeat?: boolean;\n  allowRegex?: string;\n  delimiters?: string | number[];\n  valueValidator?: (value: any) => boolean;\n  maxChips?: number;\n  baloon?: string;\n  className?: string;\n  id?: string;\n  error?: ReactNode;\n  value?: string[];\n  outerWrap?: boolean;\n  onChange?: (newValue: string[]) => void;\n  onChipRemove?: (idx: number) => void;\n  chipsOutside?: boolean;\n  noInput?: boolean;\n  renderChip?: (params: {\n    onDelete: () => unknown;\n    value: string;\n    idx: number;\n  }) => JSX.Element;\n};\n\nexport type FullInputChipsProps = InputChipsProps &\n  Omit<HTMLProps<HTMLInputElement>, \"id\" | \"value\" | \"onChange\" | \"label\">;\n\nconst emptyList: string[] = [];\n\nexport const InputChips = React.forwardRef<HTMLDivElement, FullInputChipsProps>(\n  (\n    {\n      chipsColor = \"light\",\n      addOnBlur = true,\n      delimiters = [13],\n      label = null,\n      allowRepeat = false,\n      allowRegex = null,\n      valueValidator = null,\n      maxChips = null,\n      baloon = null,\n      className = null,\n      id = null,\n      error = null,\n      value: initialValue = null,\n      onChange,\n      outerWrap = true,\n      chipsOutside = false,\n      renderChip = null,\n      onBlur = null,\n      onChipRemove = null,\n      onClick,\n      noInput,\n      ...input\n    },\n    ref\n  ) => {\n    const [value, setValue] = useState<string[]>(emptyList);\n\n    useEffect(() => {\n      setValue((curr) => initialValue || curr || emptyList);\n    }, [initialValue]);\n\n    const addValue = useCallback(\n      (v) => {\n        if (typeof valueValidator === \"function\") {\n          if (!valueValidator(v)) return;\n        }\n        setValue((curr) => {\n          if (allowRepeat || !(curr || []).includes(v)) {\n            const n = (curr || []).concat(v);\n            if (typeof onChange === \"function\") onChange(n);\n            return n;\n          } else return curr;\n        });\n      },\n      [allowRepeat, valueValidator, onChange]\n    );\n\n    const handleKeyDown = useCallback(\n      (event) => {\n        let d = delimiters;\n        if (typeof d === \"string\") {\n          const { map } = Array.prototype;\n          d = map.call(d, (ch) => ch.charCodeAt(0));\n        }\n\n        if (Array.isArray(d) && d.includes(event.keyCode)) {\n          addValue(event.target.value);\n          event.target.value = \"\";\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      },\n      [delimiters, addValue]\n    );\n\n    const handleBlur = useCallback(\n      (event) => {\n        if (addOnBlur && event.target?.value) {\n          const { value } = event.target;\n          if (allowRegex && RegExp(allowRegex).test(value)) {\n            addValue(value);\n          } else if (!allowRegex) {\n            addValue(value);\n          }\n        }\n        event.target.value = \"\";\n        if (typeof onBlur === \"function\") onBlur(event);\n      },\n      [addOnBlur, allowRegex, addValue, onBlur]\n    );\n\n    const handleDelete = useCallback(\n      (idx) => {\n        setValue((curr) => {\n          curr.splice(idx, 1);\n          if (typeof onChange === \"function\") onChange(curr.slice());\n          return curr.slice();\n        });\n        if (typeof onChipRemove === \"function\") onChipRemove(idx);\n      },\n      [onChange, onChipRemove]\n    );\n\n    const showInput =\n      (!maxChips ||\n        (maxChips && Array.isArray(value) && value.length < maxChips)) &&\n      !noInput;\n\n    return (\n      <ConditionalWrapper\n        wrapper={\n          <div\n            className={`form-group${ac(className)}${ac(\n              error,\n              \"form-group--error\"\n            )}`}\n            ref={ref}\n          ></div>\n        }\n        condition={outerWrap}\n      >\n        <div\n          className={`form-group__text chips${ac(\n            !outerWrap && className,\n            className\n          )}`}\n        >\n          {label ? (\n            <label htmlFor={id || input.name}>\n              {label}\n              {baloon ? <InputHelpBaloon baloon={baloon} /> : null}\n            </label>\n          ) : null}\n          {chipsOutside && Array.isArray(value) && value.length ? (\n            <span className=\"chips-outer qtr-margin-bottom\">\n              <span className=\"chips-inner\">\n                {value.map((v, i) =>\n                  renderChip ? (\n                    renderChip({\n                      value: v,\n                      idx: i,\n                      onDelete: () => handleDelete(i),\n                    })\n                  ) : (\n                    <Label\n                      removable\n                      onRemove={() => handleDelete(i)}\n                      color={chipsColor}\n                      size=\"small\"\n                      key={`${v}-${i}`}\n                      className=\"no-margin-bottom\"\n                    >\n                      {v}\n                    </Label>\n                  )\n                )}\n              </span>\n            </span>\n          ) : null}\n          <div\n            className={`input ${ac(!showInput, \"dbl-padding-right\")}`}\n            onClick={onClick}\n          >\n            {!chipsOutside && Array.isArray(value) && value.length ? (\n              <span className=\"chips-outer\">\n                <span className=\"chips-inner\">\n                  {value.map((v, i) =>\n                    renderChip ? (\n                      renderChip({\n                        value: v,\n                        idx: i,\n                        onDelete: () => handleDelete(i),\n                      })\n                    ) : (\n                      <Label\n                        removable\n                        onRemove={(e: MouseEvent) => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          handleDelete(i);\n                        }}\n                        color={chipsColor}\n                        size=\"small\"\n                        key={`${v}-${i}`}\n                        className=\"no-margin-bottom\"\n                      >\n                        {v}\n                      </Label>\n                    )\n                  )}\n                </span>\n              </span>\n            ) : null}\n            {showInput ? (\n              <input\n                type=\"text\"\n                onKeyDown={handleKeyDown}\n                onBlur={handleBlur}\n                id={id || input.name}\n                {...input}\n              />\n            ) : null}\n          </div>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </ConditionalWrapper>\n    );\n  }\n);\n"],"names":["emptyList","InputChips","React","forwardRef","chipsColor","addOnBlur","delimiters","label","allowRepeat","allowRegex","valueValidator","maxChips","baloon","className","id","error","value","initialValue","onChange","outerWrap","chipsOutside","renderChip","onBlur","onChipRemove","onClick","noInput","input","ref","setValue","useState","useEffect","curr","addValue","useCallback","v","includes","n","concat","handleKeyDown","event","d","map","Array","prototype","call","ch","charCodeAt","isArray","keyCode","target","stopPropagation","preventDefault","handleBlur","RegExp","test","handleDelete","idx","splice","slice","showInput","length","ConditionalWrapper","wrapper","div","ac","condition","htmlFor","name","InputHelpBaloon","span","i","onDelete","Label","removable","onRemove","color","size","key","e","type","onKeyDown","InputHelpBlock","text"],"mappings":"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"}