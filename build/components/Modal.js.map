{"version":3,"file":"Modal.js","sources":["../../components/Modal.jsx"],"sourcesContent":["/* eslint-disable react/jsx-wrap-multilines */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from \"react\";\nimport Transition from \"react-transition-group/Transition\";\nimport ReactModal from \"react-modal\";\nimport PropTypes from \"prop-types\";\n\nimport { Input } from \"./Input\";\nimport { ConditionalWrapper, DisplayIf as If } from \"./Conditional\";\nimport { Button } from \"./Button\";\nimport \"../css/modal.css\";\n\nimport { eventManager, EVENTS, appendClass as ac } from \"../utils\";\n\nexport const ModalHeader = ({ className, children, ...props }) => (\n  <div\n    className={`modal__header${className ? ` ${className}` : \"\"}`}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nModalHeader.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nModalHeader.defaultProps = {\n  className: null,\n};\n\nexport const ModalBody = ({ className, children, ...props }) => (\n  <div className={`modal__body${className ? ` ${className}` : \"\"}`} {...props}>\n    {children}\n  </div>\n);\n\nModalBody.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nModalBody.defaultProps = {\n  className: null,\n};\n\nexport const ModalFooter = ({ className, children, ...props }) => (\n  <div\n    className={`modal__footer${className ? ` ${className}` : \"\"}`}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nModalFooter.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nModalFooter.defaultProps = {\n  className: null,\n};\n\nexport const Modal = ({\n  size,\n  closeIcon,\n  closeHandle,\n  title,\n  left,\n  children,\n  autoClose,\n  isOpen,\n  animationDuration,\n  transitionEvents,\n  dialogProps,\n  contentProps,\n  maximize,\n  ...props\n}) => {\n  const [maximized, setMaximized] = React.useState(false);\n  React.useEffect(() => setMaximized(false), [isOpen]);\n  const realSize = React.useMemo(() => (maximized ? \"full\" : size), [\n    maximized,\n    size,\n  ]);\n\n  const maximizeCb = React.useCallback(() => {\n    setMaximized((curr) => !curr);\n  }, []);\n\n  return (\n    <Transition\n      in={isOpen}\n      mountOnEnter\n      unmountOnExit\n      timeout={animationDuration}\n      {...transitionEvents}\n    >\n      {(state) => (\n        <ReactModal\n          {...props}\n          autoClose={autoClose}\n          onRequestClose={autoClose && closeHandle ? closeHandle : undefined}\n          overlayClassName=\"modal-backdrop\"\n          isOpen={[\"entering\", \"entered\"].includes(state)}\n          className={`modal${ac(realSize, `modal--${realSize}`)}${ac(\n            left,\n            \"modal--left\"\n          )}`}\n          closeTimeoutMS={\n            typeof animationDuration === \"object\"\n              ? animationDuration.exiting\n              : animationDuration\n          }\n        >\n          <div\n            className=\"modal__dialog\"\n            {...dialogProps}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"modal__content\" {...contentProps}>\n              <If condition={!!(closeIcon && closeHandle) || maximize}>\n                <ConditionalWrapper\n                  condition={!!(closeIcon && closeHandle) && maximize}\n                  wrapper={<div className=\"modal__close\" />}\n                >\n                  <If condition={maximize}>\n                    <a\n                      className={`${ac(\n                        !(closeIcon && closeHandle),\n                        \"modal__close\"\n                      )}${ac(closeIcon && closeHandle, \"qtr-margin-right\")}`}\n                      onClick={maximizeCb}\n                    >\n                      <span\n                        className={\n                          maximized ? \"icon-minimize\" : \"icon-maximize\"\n                        }\n                      />\n                    </a>\n                  </If>\n                  <If condition={!!(closeIcon && closeHandle)}>\n                    <a\n                      className={!maximize ? \"modal__close\" : \"\"}\n                      onClick={closeHandle}\n                    >\n                      <span className=\"icon-close\" />\n                    </a>\n                  </If>\n                </ConditionalWrapper>\n              </If>\n              <If condition={!!title}>\n                <ModalHeader>\n                  <h1 className=\"modal__title\">{title}</h1>\n                </ModalHeader>\n              </If>\n              {children}\n            </div>\n          </div>\n        </ReactModal>\n      )}\n    </Transition>\n  );\n};\n\nModal.propTypes = {\n  size: PropTypes.oneOf([false, \"small\", \"default\", \"large\", \"full\", \"fluid\"]),\n  closeIcon: PropTypes.bool,\n  closeHandle: PropTypes.func,\n  title: PropTypes.string,\n  isOpen: PropTypes.bool.isRequired,\n  autoClose: PropTypes.bool,\n  left: PropTypes.bool,\n  animationDuration: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      entering: PropTypes.number,\n      exiting: PropTypes.number,\n    }),\n  ]),\n  children: PropTypes.node.isRequired,\n  transitionEvents: PropTypes.objectOf(PropTypes.func),\n  dialogProps: PropTypes.shape({}),\n  contentProps: PropTypes.shape({}),\n  maximize: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  size: false,\n  autoClose: true,\n  animationDuration: 250,\n  closeIcon: false,\n  title: null,\n  closeHandle: null,\n  left: false,\n  transitionEvents: null,\n  dialogProps: null,\n  contentProps: null,\n  maximize: false,\n};\n\nModal.Small = (props) => <Modal {...props} size=\"small\" />;\nModal.Large = (props) => <Modal {...props} size=\"large\" />;\nModal.Full = (props) => <Modal {...props} size=\"full\" />;\nModal.Fluid = (props) => <Modal {...props} size=\"fluid\" />;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n\nexport const ConfirmationModal = ({\n  isOpen,\n  confirmHandle,\n  closeHandle,\n  prompt,\n  confirmType,\n  confirmText,\n  autoClose,\n}) => {\n  const [doing, setDoing] = React.useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={closeHandle}\n      autoClose={autoClose}\n      title=\"Confirmation\"\n    >\n      <ModalBody>\n        <p>{prompt}</p>\n      </ModalBody>\n      <ModalFooter>\n        <Button.Light onClick={closeHandle}>Close</Button.Light>\n        <Button\n          color={confirmType}\n          disabled={doing}\n          onClick={async () => {\n            setDoing(true);\n            if (await confirmHandle()) setDoing(false);\n          }}\n        >\n          {confirmText}\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nConfirmationModal.propTypes = {\n  isOpen: PropTypes.bool,\n  confirmHandle: PropTypes.func.isRequired,\n  closeHandle: PropTypes.func.isRequired,\n  prompt: PropTypes.node.isRequired,\n  confirmType: PropTypes.string,\n  confirmText: PropTypes.string,\n  autoClose: PropTypes.bool,\n};\n\nConfirmationModal.defaultProps = {\n  isOpen: false,\n  confirmType: \"primary\",\n  autoClose: true,\n  confirmText: \"Confirm\",\n};\n\nexport const PromptModal = ({\n  title,\n  question,\n  onSave: cb,\n  onClose,\n  initial,\n  type,\n  isOpen,\n  hint,\n}) => {\n  const [val, setVal] = React.useState(initial);\n  const onSave = React.useCallback(() => {\n    onClose();\n    cb(val);\n  }, [onClose, cb, val]);\n\n  React.useLayoutEffect(() => setVal(initial), [initial]);\n\n  return (\n    <Modal isOpen={isOpen} closeIcon closeHandle={onClose} title={title}>\n      <ModalBody>\n        <Input\n          type={type}\n          form={{ errors: {}, touched: {} }}\n          field={{\n            onChange: (e) => setVal(e.target.value),\n            name: \"promptInput\",\n            value: val,\n          }}\n          label={\n            <>\n              {question}\n              <If condition={!!hint && typeof hint === \"string\"}>\n                <span\n                  data-balloon={hint}\n                  data-balloon-length=\"large\"\n                  data-balloon-pos=\"up\"\n                >\n                  <span\n                    className=\"icon-question-circle qtr-margin-left\"\n                    style={{ cursor: \"help\" }}\n                  />\n                </span>\n              </If>\n            </>\n          }\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"light\" onClick={onClose}>\n          Close\n        </Button>\n        <Button color=\"primary\" onClick={onSave}>\n          OK\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nPromptModal.propTypes = {\n  title: PropTypes.node.isRequired,\n  question: PropTypes.node.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onClose: PropTypes.func,\n  initial: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  type: PropTypes.string,\n  isOpen: PropTypes.bool.isRequired,\n  hint: PropTypes.node,\n};\n\nPromptModal.defaultProps = {\n  onClose: null,\n  initial: null,\n  type: \"text\",\n  hint: null,\n};\n\nexport const ConfirmationListener = () => {\n  const [modal, setModal] = React.useState(null);\n  const [modalShown, setModalShown] = React.useState(false);\n\n  React.useEffect(() => {\n    eventManager.on(EVENTS.SHOW_MODAL, (m) => setModal(m));\n  }, []);\n  React.useEffect(() => {\n    if (modal) setModalShown(true);\n  }, [modal]);\n\n  const onClose = () => setModalShown(false);\n\n  if (!modal) return null;\n\n  if (modal.modalType === \"notification\")\n    return (\n      <Modal\n        isOpen={modalShown}\n        closeIcon\n        closeHandle={onClose}\n        title={modal.title}\n      >\n        <ModalBody>{modal.body}</ModalBody>\n        <ModalFooter>\n          <Button color={modal.buttonColor || \"light\"} onClick={onClose}>\n            {modal.button}\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n\n  if (modal.modalType === \"prompt\")\n    return (\n      <PromptModal\n        isOpen={modalShown}\n        onClose={onClose}\n        onSave={modal.cb}\n        title={modal.title}\n        question={modal.question}\n        initial={modal.initial}\n        type={modal.type}\n        hint={modal.hint}\n      />\n    );\n\n  if (modal.modalType === \"confirmation\")\n    return (\n      <ConfirmationModal\n        isOpen={modalShown}\n        prompt={modal.prompt}\n        confirmHandle={async () => {\n          const r = await modal.onConfirm();\n          if (r) onClose();\n          return true;\n        }}\n        closeHandle={onClose}\n        confirmText={modal.confirmText}\n        confirmType={modal.confirmType}\n      />\n    );\n\n  return null;\n};\n\nexport { ConfirmationListener as DynamicModal };\n\nexport const confirmation = (\n  prompt,\n  onConfirm,\n  confirmType = \"primary\",\n  confirmText = \"Confirm\"\n) => {\n  if (!prompt) throw new Error(\"Prompt must be specified\");\n  if (!onConfirm || typeof onConfirm !== \"function\")\n    throw new Error(\"onConfirm must be specified and must be a function\");\n\n  eventManager.emit(EVENTS.SHOW_MODAL, {\n    modalType: \"confirmation\",\n    prompt,\n    onConfirm,\n    confirmText,\n    confirmType,\n  });\n};\n\nexport const notificationModal = (\n  title,\n  body,\n  buttonColor = \"light\",\n  button = \"OK\"\n) => {\n  if (!title || !body) throw new Error(\"Title and body must be specified\");\n\n  eventManager.emit(EVENTS.SHOW_MODAL, {\n    modalType: \"notification\",\n    title,\n    body,\n    buttonColor,\n    button,\n  });\n};\n\nexport { notificationModal as notification };\n\nexport const prompt = (\n  title,\n  question,\n  cb,\n  initial = \"\",\n  type = \"text\",\n  hint = undefined\n) => {\n  if (!title || !question)\n    throw new Error(\"Title and question must be specified\");\n\n  eventManager.emit(EVENTS.SHOW_MODAL, {\n    modalType: \"prompt\",\n    title,\n    initial,\n    type,\n    question,\n    cb,\n    hint,\n  });\n};\n"],"names":["ModalHeader","className","children","props","React","propTypes","PropTypes","string","node","isRequired","defaultProps","ModalBody","ModalFooter","Modal","size","closeIcon","closeHandle","title","left","autoClose","isOpen","animationDuration","transitionEvents","dialogProps","contentProps","maximize","maximized","setMaximized","useState","useEffect","realSize","useMemo","maximizeCb","useCallback","curr","Transition","in","mountOnEnter","unmountOnExit","timeout","state","ReactModal","onRequestClose","undefined","overlayClassName","includes","ac","closeTimeoutMS","exiting","onClick","e","stopPropagation","If","condition","ConditionalWrapper","wrapper","oneOf","bool","func","oneOfType","number","shape","entering","objectOf","Small","Large","Full","Fluid","Header","Body","Footer","ConfirmationModal","confirmHandle","prompt","confirmType","confirmText","doing","setDoing","Button","Light","color","disabled","async","PromptModal","question","onSave","cb","onClose","initial","type","hint","val","setVal","useLayoutEffect","Input","form","errors","touched","field","onChange","target","value","name","label","style","cursor","ConfirmationListener","modal","setModal","modalShown","setModalShown","eventManager","on","EVENTS","SHOW_MODAL","m","modalType","body","buttonColor","button","onConfirm","confirmation","Error","emit","notificationModal"],"mappings":"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"}