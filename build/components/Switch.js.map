{"version":3,"file":"Switch.js","sources":["../../components/Switch.jsx"],"sourcesContent":["/* eslint-disable react/jsx-wrap-multilines */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getIn } from \"formik\";\n\nimport { ConditionalWrapper } from \"./Conditional\";\nimport { appendClass as ac } from \"../utils\";\n\nconst Switch = ({\n  field,\n  left,\n  right,\n  disabled,\n  inline,\n  className,\n  asFormGroup,\n  form,\n  spacing,\n  id,\n  style,\n}) => (\n  <ConditionalWrapper\n    condition={asFormGroup}\n    wrapper={\n      <div\n        className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n          className\n        )}${ac(spacing, ` form-group--${spacing}`)}`}\n        style={style}\n      />\n    }\n  >\n    <label\n      className={`switch${disabled ? \" disabled\" : \"\"}`}\n      htmlFor={id || field.name}\n    >\n      <input\n        type=\"checkbox\"\n        {...field}\n        id={id || field.name}\n        checked={getIn(form.values, field.name, false)}\n      />\n      {left ? <span className=\"switch__label\">{left}</span> : null}\n      <span className=\"switch__input\" />\n      {right ? <span className=\"switch__label\">{right}</span> : null}\n    </label>\n  </ConditionalWrapper>\n);\n\nSwitch.propTypes = {\n  left: PropTypes.node,\n  right: PropTypes.node,\n  disabled: PropTypes.bool,\n  inline: PropTypes.bool,\n  spacing: PropTypes.oneOf([false, \"compressed\", \"loose\"]),\n  asFormGroup: PropTypes.bool,\n  form: PropTypes.shape({\n    values: PropTypes.object,\n  }).isRequired,\n  field: PropTypes.shape({\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n  }).isRequired,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  style: PropTypes.shape({}),\n};\n\nSwitch.defaultProps = {\n  left: null,\n  right: null,\n  disabled: false,\n  inline: false,\n  spacing: false,\n  asFormGroup: true,\n  className: null,\n  id: null,\n  style: null,\n};\n\nexport { Switch };\n"],"names":["Switch","field","left","right","disabled","inline","className","asFormGroup","form","spacing","id","style","React","ConditionalWrapper","condition","wrapper","ac","htmlFor","name","type","checked","getIn","values","propTypes","PropTypes","node","bool","oneOf","shape","object","isRequired","string","onChange","func","defaultProps"],"mappings":"oOAQMA,EAAS,EACbC,MAAAA,EACAC,KAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,GAAAA,EACAC,MAAAA,KAEAC,gBAACC,GACCC,UAAWP,EACXQ,QACEH,uBACEN,UAAY,aAAYU,EAAGX,EAAQ,wBAAwBW,EACzDV,KACEU,EAAGP,EAAU,gBAAeA,KAChCE,MAAOA,KAIXC,yBACEN,UAAY,UAAQF,EAAW,YAAc,IAC7Ca,QAASP,GAAMT,EAAMiB,MAErBN,2BACEO,KAAK,YACDlB,GACJS,GAAIA,GAAMT,EAAMiB,KAChBE,QAASC,EAAMb,EAAKc,OAAQrB,EAAMiB,MAAM,MAEzChB,EAAOU,wBAAMN,UAAU,iBAAiBJ,GAAe,KACxDU,wBAAMN,UAAU,kBACfH,EAAQS,wBAAMN,UAAU,iBAAiBH,GAAgB,OAKhEH,EAAOuB,UAAY,CACjBrB,KAAMsB,EAAUC,KAChBtB,MAAOqB,EAAUC,KACjBrB,SAAUoB,EAAUE,KACpBrB,OAAQmB,EAAUE,KAClBjB,QAASe,EAAUG,MAAM,EAAC,EAAO,aAAc,UAC/CpB,YAAaiB,EAAUE,KACvBlB,KAAMgB,EAAUI,MAAM,CACpBN,OAAQE,EAAUK,SACjBC,WACH7B,MAAOuB,EAAUI,MAAM,CACrBV,KAAMM,EAAUO,OAChBC,SAAUR,EAAUS,OACnBH,WACHxB,UAAWkB,EAAUO,OACrBrB,GAAIc,EAAUO,OACdpB,MAAOa,EAAUI,MAAM,KAGzB5B,EAAOkC,aAAe,CACpBhC,KAAM,KACNC,MAAO,KACPC,UAAU,EACVC,QAAQ,EACRI,SAAS,EACTF,aAAa,EACbD,UAAW,KACXI,GAAI,KACJC,MAAO"}