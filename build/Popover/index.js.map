{"version":3,"file":"index.js","sources":["../../src/Popover/GenericPopover.tsx","../../src/Popover/context.tsx","../../src/Popover/Popover.tsx","../../src/Popover/PopoverTitle.tsx","../../src/Popover/usePopover.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useRef, type HTMLProps } from \"react\";\nimport { offset, useMergeRefs } from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { TransitionStatus } from \"react-transition-group\";\n\nimport styles from \"./Popover.module.scss\";\n\nexport const GenericPopover = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & {\n    wrapperClassName?: string;\n    state: TransitionStatus;\n    offset?: Parameters<typeof offset>[0];\n  }\n>(function GenericPopoverRefed(\n  {\n    className,\n    children,\n    wrapperClassName,\n    state,\n    offset: offsetOptions,\n    ...props\n  },\n  ref\n) {\n  const ownRef = useRef<HTMLDivElement>(null);\n  const merged = useMergeRefs([ref, ownRef]);\n\n  useEffect(() => {\n    const r = ownRef.current;\n\n    if (r && offsetOptions && typeof offsetOptions !== \"function\")\n      r.style.setProperty(\n        \"--offset\",\n        `${\n          typeof offsetOptions === \"number\"\n            ? offsetOptions\n            : offsetOptions.mainAxis ?? 4\n        }px`\n      );\n\n    return () => {\n      if (r) r.style.setProperty(\"--offset\", \"4px\");\n    };\n  }, [offsetOptions]);\n\n  return (\n    <div\n      ref={merged}\n      className={cx(styles.wrapper, wrapperClassName, {\n        [styles.disappear]: state === \"exiting\" || state === \"exited\",\n      })}\n      {...props}\n    >\n      <div\n        className={cx(\n          \"panel panel--bordered panel--raised\",\n          styles.body,\n          className\n        )}\n        tabIndex={-1}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n","import React, {\n  createContext,\n  useContext,\n  type FC,\n  type PropsWithChildren,\n  type ReactNode,\n} from \"react\";\n\ntype PopoverContextProps = {\n  setOverlayState: (show: boolean) => void;\n  setOverlay: (overlay: ReactNode) => void;\n};\n\nconst PopoverContext = createContext<PopoverContextProps>(null!);\n\nexport const PopoverProvider: FC<PropsWithChildren<PopoverContextProps>> = ({\n  children,\n  ...props\n}) => (\n  <PopoverContext.Provider value={props}>{children}</PopoverContext.Provider>\n);\n\nexport const usePopoverContext = () => useContext(PopoverContext);\n","import React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  type ComponentProps,\n  type FC,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingPortal,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  useMergeRefs,\n  type Placement,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\n\nimport { useFloatingContext } from \"src/FloatingProvider\";\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\n\nimport { GenericPopover } from \"./GenericPopover\";\nimport styles from \"./Popover.module.scss\";\nimport { PopoverProvider, usePopoverContext } from \"./context\";\n\nexport { usePopoverContext };\n\nconst Overlay: FC<\n  PropsWithChildren<{ show: boolean; background?: string; className?: string }>\n> = ({\n  show,\n  children,\n  background = \"var(--cui-background-color)\",\n  className,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  return (\n    <Transition\n      in={show}\n      mountOnEnter\n      unmountOnExit\n      timeout={250}\n      nodeRef={ref}\n    >\n      {(state) => (\n        <div\n          style={{\n            background,\n          }}\n          className={cx(styles.overlay, className, {\n            [styles.disappear]: state === \"exiting\" || state === \"exited\",\n          })}\n          ref={ref}\n        >\n          {children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport type PopoverProps = PropsWithChildren<{\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  showClassName?: string;\n  overlay?: ReactNode;\n  showOverlay?: boolean;\n  placement?: Placement;\n  portalRoot?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  offset?: Parameters<typeof offset>[0];\n  lockBody?: boolean;\n  lockRootId?: string;\n  element: ReactElement;\n  closeRef?: MutableRefObject<() => unknown>;\n  initialFocus?: ComponentProps<typeof FloatingFocusManager>[\"initialFocus\"];\n  guardsFocus?: ComponentProps<typeof FloatingFocusManager>[\"guards\"];\n  modalFocus?: ComponentProps<typeof FloatingFocusManager>[\"modal\"];\n  closeOnFocusOut?: ComponentProps<\n    typeof FloatingFocusManager\n  >[\"closeOnFocusOut\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n}>;\n\nexport const Popover: FC<PopoverProps> = ({\n  children,\n  element,\n  onClose,\n  onOpen,\n  showClassName,\n  overlay: overlayProvided,\n  showOverlay: overlayShowProvided,\n  placement,\n  portalRoot,\n  offset: offsetOptions = 4,\n  closeRef,\n  initialFocus,\n  guardsFocus,\n  modalFocus,\n  closeOnFocusOut,\n  portalId,\n}) => {\n  const [show, setShow] = useLockedBody(false, \"root\");\n\n  const { x, y, reference, floating, strategy, context } = useFloating({\n    placement,\n    middleware: [\n      offset(offsetOptions),\n      flip(),\n      shift({ padding: { left: 8, right: 8 } }),\n    ],\n    open: show,\n    onOpenChange: (newOpen) => {\n      if (newOpen && typeof onOpen === \"function\") onOpen();\n      if (!newOpen && typeof onClose === \"function\") onClose();\n      setShow(newOpen);\n    },\n    whileElementsMounted: autoUpdate,\n  });\n\n  const dismiss = useDismiss(context);\n  const click = useClick(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    click,\n    dismiss,\n  ]);\n\n  const [overlayShow, setOverlayShow] = useState(overlayShowProvided);\n  const [overlay, setOverlay] = useState(overlayProvided);\n\n  const ref = useMergeRefs([reference, (element as any).ref]);\n\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n  const { root, id } = useFloatingContext({\n    root: portalRoot,\n    portalId,\n    fallbackPortalId: \"--cui-popover-portal\",\n  });\n\n  const closeCb = useCallback(() => setShow(false), [setShow]);\n  if (closeRef) closeRef.current = closeCb;\n\n  return (\n    <>\n      {cloneElement(\n        element,\n        getReferenceProps({\n          ref,\n          ...element.props,\n          className: cx(\n            element.props.className,\n            showClassName ? { [showClassName]: show } : undefined\n          ),\n        })\n      )}\n      <FloatingPortal root={root} id={id}>\n        <Transition\n          in={show}\n          mountOnEnter\n          unmountOnExit\n          timeout={250}\n          nodeRef={transitionRef}\n        >\n          {(state) => (\n            <FloatingFocusManager\n              context={context}\n              initialFocus={initialFocus ?? (floatingRef as any)}\n              guards={guardsFocus}\n              modal={modalFocus}\n              closeOnFocusOut={closeOnFocusOut}\n            >\n              <GenericPopover\n                ref={floatingRef}\n                style={{\n                  position: strategy,\n                  top: y ?? 0,\n                  left: x ?? 0,\n                }}\n                state={state}\n                offset={offsetOptions}\n                {...getFloatingProps()}\n              >\n                <PopoverProvider\n                  setOverlayState={setOverlayShow}\n                  setOverlay={setOverlay}\n                >\n                  <Overlay show={overlayShow || false}>{overlay}</Overlay>\n                  {children}\n                </PopoverProvider>\n              </GenericPopover>\n            </FloatingFocusManager>\n          )}\n        </Transition>\n      </FloatingPortal>\n    </>\n  );\n};\n","import React, { forwardRef, type HTMLProps, type ReactNode } from \"react\";\nimport cx from \"classnames\";\n\ntype PopoverTitleProps = {\n  children: ReactNode;\n  noLine?: boolean;\n} & HTMLProps<HTMLHeadingElement>;\n\nexport const PopoverTitle = forwardRef<HTMLHeadingElement, PopoverTitleProps>(\n  ({ className, noLine, ...props }, ref) => {\n    return (\n      <>\n        <h5\n          ref={ref}\n          className={cx(\"no-margin-bottom\", className)}\n          {...props}\n        />\n        {!noLine && <hr className=\"half-margin-top\" />}\n      </>\n    );\n  }\n);\n\nPopoverTitle.displayName = \"PopoverTitle\";\n","import React, {\n  ComponentProps,\n  ComponentType,\n  ReactNode,\n  createElement,\n  useCallback,\n  useRef,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingPortal,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  useMergeRefs,\n} from \"@floating-ui/react\";\nimport { Transition } from \"react-transition-group\";\n\nimport { useFloatingContext } from \"src/FloatingProvider\";\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\n\nimport { PopoverProps } from \".\";\nimport { GenericPopover } from \"./GenericPopover\";\n\ntype Options = {\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  popoverComponent?: ComponentType<ComponentProps<typeof GenericPopover>>;\n} & Pick<\n  PopoverProps,\n  | \"initialFocus\"\n  | \"guardsFocus\"\n  | \"modalFocus\"\n  | \"closeOnFocusOut\"\n  | \"offset\"\n  | \"portalRoot\"\n  | \"placement\"\n  | \"portalId\"\n>;\n\nexport function usePopover({\n  onClose,\n  onOpen,\n  popoverComponent = GenericPopover,\n  placement,\n  initialFocus,\n  guardsFocus,\n  modalFocus,\n  closeOnFocusOut,\n  offset: offsetOptions = 4,\n  portalRoot,\n  portalId,\n}: Options) {\n  const [show, setShow] = useLockedBody(false, \"root\");\n\n  const { x, y, reference, floating, strategy, context, refs } = useFloating({\n    placement,\n    middleware: [\n      offset(offsetOptions),\n      flip(),\n      shift({ padding: { left: 8, right: 8 } }),\n    ],\n    open: show,\n    onOpenChange: (newOpen) => {\n      if (newOpen && typeof onOpen === \"function\") onOpen();\n      if (!newOpen && typeof onClose === \"function\") onClose();\n      setShow(newOpen);\n    },\n    whileElementsMounted: autoUpdate,\n  });\n\n  const dismiss = useDismiss(context);\n  const click = useClick(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    click,\n    dismiss,\n  ]);\n\n  const closeCb = useCallback(() => setShow(false), [setShow]);\n  const openCb = useCallback(() => setShow(true), [setShow]);\n\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n  const { root, id } = useFloatingContext({\n    root: portalRoot,\n    portalId,\n    fallbackPortalId: \"--cui-popover-portal\",\n  });\n\n  const render = (body: ReactNode) => {\n    return (\n      <FloatingPortal root={root} id={id}>\n        <Transition\n          in={show}\n          mountOnEnter\n          unmountOnExit\n          timeout={250}\n          nodeRef={transitionRef}\n        >\n          {(state) => (\n            <FloatingFocusManager\n              context={context}\n              initialFocus={initialFocus ?? (floating as any)}\n              guards={guardsFocus}\n              modal={modalFocus}\n              closeOnFocusOut={closeOnFocusOut}\n            >\n              {createElement(\n                popoverComponent,\n                {\n                  ref: floatingRef,\n                  state,\n                  offset: offsetOptions,\n                  ...getFloatingProps({\n                    style: { position: strategy, top: y ?? 0, left: x ?? 0 },\n                  }),\n                },\n                body\n              )}\n            </FloatingFocusManager>\n          )}\n        </Transition>\n      </FloatingPortal>\n    );\n  };\n\n  return {\n    getReferenceProps,\n    reference,\n    render,\n    isShown: show,\n    refs,\n    close: closeCb,\n    open: openCb,\n  };\n}\n"],"names":["_extends","GenericPopover","forwardRef","GenericPopoverRefed","ref","className","children","wrapperClassName","state","offset","offsetOptions","props","ownRef","useRef","merged","useMergeRefs","useEffect","r","current","style","setProperty","mainAxis","React","div","cx","styles","wrapper","disappear","body","tabIndex","PopoverContext","createContext","PopoverProvider","Provider","value","usePopoverContext","useContext","Overlay","show","background","Transition","in","mountOnEnter","unmountOnExit","timeout","nodeRef","overlay","Popover","element","onClose","onOpen","showClassName","overlayProvided","showOverlay","overlayShowProvided","placement","portalRoot","closeRef","initialFocus","guardsFocus","modalFocus","closeOnFocusOut","portalId","useLockedBody","setShow","useFloating","middleware","flip","shift","padding","left","right","open","onOpenChange","newOpen","whileElementsMounted","autoUpdate","x","y","reference","floating","strategy","context","dismiss","useDismiss","click","useClick","useInteractions","getReferenceProps","getFloatingProps","useState","overlayShow","setOverlayShow","setOverlay","transitionRef","floatingRef","useFloatingContext","root","fallbackPortalId","id","closeCb","useCallback","createElement","Fragment","cloneElement","undefined","FloatingPortal","FloatingFocusManager","guards","modal","position","top","setOverlayState","PopoverTitle","noLine","h5","hr","displayName","usePopover","popoverComponent","refs","openCb","render","isShown","close"],"mappings":"ylIAAA,SAAAA,YAAA,qQAOO,IAAMC,eAAiBC,WAO5B,SAASC,oBACT,OAQAC,GAAG,CACH,KAREC,UADF,OACEA,UACAC,SAFF,OAEEA,SACAC,iBAHF,OAGEA,iBACAC,MAJF,OAIEA,MACAC,AAAQC,cALV,OAKED,OACGE,+BANL,QACEN,YACAC,WACAC,mBACAC,QACAC,WAKF,IAAMG,OAASC,OAAuB,IAAI,EAC1C,IAAMC,OAASC,aAAa,CAACX,IAAKQ,OAAO,EAEzCI,UAAU,UAAM,CACd,IAAMC,EAAIL,OAAOM,OAAO,CAQdR,IAAAA,UANV,GAAIO,GAAKP,eAAiB,OAAOA,gBAAkB,WACjDO,EAAEE,KAAK,CAACC,WAAW,CACjB,WACA,AAAC,GAIA,OAHC,OAAOV,gBAAkB,SACrBA,cACAA,AAAAA,CAAAA,UAAAA,cAAcW,QAAQ,AAARA,IAAdX,IAAAA,EAAAA,YAAAA,KAAAA,EAAAA,UAA0B,CAAC,CAChC,MAAG,CAGR,OAAO,UAAM,CACX,GAAIO,EAAGA,EAAEE,KAAK,CAACC,WAAW,CAAC,WAAY,MAAA,AACzC,GACC,CAACV,cAAc,EAElB,OACEY,MAACC,aAAAA,CAAAA,MAAAA,WAAAA,CACCnB,IAAKU,OACLT,UAAWmB,GAAGC,OAAOC,OAAO,CAAEnB,iBAC5B,mBAACkB,OAAOE,SAAS,CAAGnB,QAAU,WAAaA,QAAU,UAEnDG,EAAAA,OAEJW,MAACC,aAAAA,CAAAA,MAAAA,CACClB,UAAWmB,GACT,sCACAC,OAAOG,IAAI,CACXvB,WAEFwB,SAAU,CAAC,CAEVvB,EAAAA,UAIT,GCrDA,IAAMwB,eAAiBC,cAAmC,IAAI,EAEvD,IAAMC,gBAA8D,gBAIzEV,KAHAhB,gBAAAA,SACGK,uCADHL,oBAGAgB,MAACQ,aAAAA,CAAAA,eAAeG,QAAQ,CAAA,CAACC,MAAOvB,OAAQL,SACxC,EAEW6B,IAAAA,kBAAoB,kBAAMC,WAAWN,iBCtBlD,SAAA9B,YAAA,qQAsCA,IAAMqC,QAEF,eAKE,KAJJC,WAAAA,KACAhC,eAAAA,2BACAiC,WAAAA,gCAAa,0CACblC,gBAAAA,UAEA,IAAMD,IAAMS,OAAuB,IAAI,EACvC,OACES,MAACkB,aAAAA,CAAAA,WAAAA,CACCC,GAAIH,KACJI,aAAAA,IAAY,CACZC,cAAAA,IAAa,CACbC,QAAS,IACTC,QAASzC,GAER,EAAA,SAACI,cACAc,MAACC,aAAAA,CAAAA,MAAAA,CACCJ,MAAO,CACLoB,WAAAA,UACF,EACAlC,UAAWmB,GAAGC,OAAOqB,OAAO,CAAEzC,UAC5B,mBAACoB,OAAOE,SAAS,CAAGnB,QAAU,WAAaA,QAAU,WAEvDJ,IAAKA,GAEJE,EAAAA,WAKX,MAwBayC,QAA4B,eAiBnC,KAhBJzC,eAAAA,SACA0C,cAAAA,QACAC,cAAAA,QACAC,aAAAA,OACAC,oBAAAA,cACAL,AAASM,sBAATN,QACAO,AAAaC,0BAAbD,YACAE,gBAAAA,UACAC,iBAAAA,WACQ9C,UAARD,OAAQC,cAAAA,aAAgB,EAAhBA,IACR+C,eAAAA,SACAC,mBAAAA,aACAC,kBAAAA,YACAC,iBAAAA,WACAC,sBAAAA,gBACAC,eAAAA,SAEA,IAAwBC,mBAAAA,cAAc,KAAK,CAAE,WAAtCzB,KAAiByB,OAAXC,QAAWD,OAExB,IAAyDE,KAAAA,YAAY,CACnEV,UAAAA,UACAW,WAAY,CACVzD,OAAOC,eACPyD,OACAC,MAAM,CAAEC,QAAS,CAAEC,KAAM,EAAGC,MAAO,CAAE,CAAE,GACxC,CACDC,KAAMlC,KACNmC,aAAc,SAACC,QAAY,CACzB,GAAIA,SAAW,OAAOxB,SAAW,WAAYA,QAAAA,CAC7C,GAAI,CAACwB,SAAW,OAAOzB,UAAY,WAAYA,SAAAA,CAC/Ce,QAAQU,QACV,EACAC,qBAAsBC,UACxB,GAdQC,EAAiDZ,KAAjDY,EAAGC,EAA8Cb,KAA9Ca,EAAGC,UAA2Cd,KAA3Cc,UAAWC,SAAgCf,KAAhCe,SAAUC,SAAsBhB,KAAtBgB,SAAUC,QAAYjB,KAAZiB,QAgB7C,IAAMC,QAAUC,WAAWF,SAC3B,IAAMG,MAAQC,SAASJ,SAEvB,IAAgDK,KAAAA,gBAAgB,CAC9DF,MACAF,QACD,EAHOK,kBAAwCD,KAAxCC,kBAAmBC,iBAAqBF,KAArBE,iBAK3B,IAAsCC,oBAAAA,SAASpC,wBAAxCqC,YAA+BD,QAAlBE,eAAkBF,QACtC,IAA8BA,oBAAAA,SAAStC,oBAAhCN,QAAuB4C,QAAdG,WAAcH,QAE9B,IAAMtF,KAAMW,aAAa,CAACgE,UAAY/B,QAAgB5C,GAAG,CAAC,EAE1D,IAAM0F,cAAgBjF,OAAuB,IAAI,EACjD,IAAMkF,YAAchF,aAA6B,CAAC+E,cAAed,SAAS,EAE1E,IAAqBgB,KAAAA,mBAAmB,CACtCC,KAAMzC,WACNM,SAAAA,SACAoC,iBAAkB,sBACpB,GAJQD,KAAaD,KAAbC,KAAME,GAAOH,KAAPG,GAMd,IAAMC,QAAUC,YAAY,kBAAMrC,QAAQ,KAAK,GAAG,CAACA,QAAQ,EAC3D,GAAIP,SAAUA,SAASvC,OAAO,CAAGkF,OAAAA,CAEjC,OACE9E,MAAAgF,aAAA,CAAAhF,MAAAiF,QAAA,CAAA,IAAA,CACGC,aACCxD,QACAwC,kBAAkB,kCAChBpF,IAAAA,MACG4C,QAAQrC,KAAK,GAChBN,UAAWmB,GACTwB,QAAQrC,KAAK,CAACN,SAAS,CACvB8C,cAAkB,mBAACA,cAAgBb,MAASmE,SAAS,MAI3DnF,MAACoF,aAAAA,CAAAA,eAAAA,CAAeT,KAAMA,KAAME,GAAIA,IAC9B7E,MAACkB,aAAAA,CAAAA,WAAAA,CACCC,GAAIH,KACJI,aAAAA,IAAY,CACZC,cAAAA,IAAa,CACbC,QAAS,IACTC,QAASiD,aAER,EAAA,SAACtF,cACAc,MAACqF,aAAAA,CAAAA,qBAAAA,CACCzB,QAASA,QACTxB,aAAcA,eAAAA,IAAAA,EAAAA,eAAAA,KAAAA,EAAAA,aAAiBqC,WAAmB,CAClDa,OAAQjD,YACRkD,MAAOjD,WACPC,gBAAiBA,iBAEjBvC,MAACrB,aAAAA,CAAAA,eAAAA,WAAAA,CACCG,IAAK2F,YACL5E,MAAO,CACL2F,SAAU7B,SACV8B,IAAKjC,IAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,EAAK,CAAC,CACXR,KAAMO,IAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,EAAK,CAAC,AACd,EACArE,MAAOA,MACPC,OAAQC,aACJ+E,EAAAA,oBAEJnE,MAACU,aAAAA,CAAAA,gBAAAA,CACCgF,gBAAiBpB,eACjBC,WAAYA,YAEZvE,MAACe,aAAAA,CAAAA,QAAAA,CAAQC,KAAMqD,aAAe,KAAK,EAAG7C,SACrCxC,eASnB,ECjNA,SAAAN,UAAA,iQAQaiH,IAAAA,aAAe/G,WAC1B,gBAAkCE,IAAQ,KAAvCC,iBAAAA,UAAW6G,cAAAA,OAAWvG,uCAAtBN,YAAW6G,WACZ,OACE5F,wCACEA,MAAC6F,aAAAA,CAAAA,KAAAA,SAAAA,CACC/G,IAAKA,IACLC,UAAWmB,GAAG,mBAAoBnB,YAC9BM,QAEL,CAACuG,QAAU5F,MAAC8F,aAAAA,CAAAA,KAAAA,CAAG/G,UAAU,oBAGhC,EAGF4G,CAAAA,aAAaI,WAAW,CAAG,eCsBpB,SAASC,WAAW,KAYjB,CAAE,KAXVrE,QADyB,MACzBA,QACAC,OAFyB,MAEzBA,yBAFyB,MAGzBqE,iBAAAA,4CAAmBtH,iCACnBsD,UAJyB,MAIzBA,UACAG,aALyB,MAKzBA,aACAC,YANyB,MAMzBA,YACAC,WAPyB,MAOzBA,WACAC,gBARyB,MAQzBA,gBACQnD,IATiB,MASzBD,OAAQC,cAAAA,aAAgB,EAAhBA,IACR8C,WAVyB,MAUzBA,WACAM,SAXyB,MAWzBA,SAEA,IAAwBC,mBAAAA,cAAc,KAAK,CAAE,WAAtCzB,KAAiByB,OAAXC,QAAWD,OAExB,IAA+DE,KAAAA,YAAY,CACzEV,UAAAA,UACAW,WAAY,CACVzD,OAAOC,eACPyD,OACAC,MAAM,CAAEC,QAAS,CAAEC,KAAM,EAAGC,MAAO,CAAE,CAAE,GACxC,CACDC,KAAMlC,KACNmC,aAAc,SAACC,QAAY,CACzB,GAAIA,SAAW,OAAOxB,SAAW,WAAYA,QAAAA,CAC7C,GAAI,CAACwB,SAAW,OAAOzB,UAAY,WAAYA,SAAAA,CAC/Ce,QAAQU,QACV,EACAC,qBAAsBC,UACxB,GAdQC,EAAuDZ,KAAvDY,EAAGC,EAAoDb,KAApDa,EAAGC,UAAiDd,KAAjDc,UAAWC,SAAsCf,KAAtCe,SAAUC,SAA4BhB,KAA5BgB,SAAUC,QAAkBjB,KAAlBiB,QAASsC,KAASvD,KAATuD,KAgBtD,IAAMrC,QAAUC,WAAWF,SAC3B,IAAMG,MAAQC,SAASJ,SAEvB,IAAgDK,KAAAA,gBAAgB,CAC9DF,MACAF,QACD,EAHOK,kBAAwCD,KAAxCC,kBAAmBC,iBAAqBF,KAArBE,iBAK3B,IAAMW,QAAUC,YAAY,kBAAMrC,QAAQ,KAAK,GAAG,CAACA,QAAQ,EAC3D,IAAMyD,OAASpB,YAAY,kBAAMrC,QAAQ,IAAI,GAAG,CAACA,QAAQ,EAEzD,IAAM8B,cAAgBjF,OAAuB,IAAI,EACjD,IAAMkF,YAAchF,aAA6B,CAAC+E,cAAed,SAAS,EAE1E,IAAqBgB,KAAAA,mBAAmB,CACtCC,KAAMzC,WACNM,SAAAA,SACAoC,iBAAkB,sBACpB,GAJQD,KAAaD,KAAbC,KAAME,GAAOH,KAAPG,GAMd,IAAMuB,OAAS,SAAC9F,KAAoB,CAClC,OACEN,MAACoF,aAAAA,CAAAA,eAAAA,CAAeT,KAAMA,KAAME,GAAIA,IAC9B7E,MAACkB,aAAAA,CAAAA,WAAAA,CACCC,GAAIH,KACJI,aAAAA,IAAY,CACZC,cAAAA,IAAa,CACbC,QAAS,IACTC,QAASiD,aAER,EAAA,SAACtF,cACAc,MAACqF,aAAAA,CAAAA,qBAAAA,CACCzB,QAASA,QACTxB,aAAcA,eAAAA,IAAAA,EAAAA,eAAAA,KAAAA,EAAAA,aAAiBsB,QAAgB,CAC/C4B,OAAQjD,YACRkD,MAAOjD,WACPC,gBAAiBA,eAEhByC,EAAAA,cACCiB,iBACA,eACEnH,IAAK2F,YACLvF,MAAAA,MACAC,OAAQC,eACL+E,iBAAiB,CAClBtE,MAAO,CAAE2F,SAAU7B,SAAU8B,IAAKjC,IAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,EAAK,CAAC,CAAER,KAAMO,IAAAA,IAAAA,EAAAA,IAAAA,KAAAA,EAAAA,EAAK,CAAC,AAAC,KAG3DjD,SAOd,EAEA,MAAO,CACL4D,kBAAAA,kBACAT,UAAAA,UACA2C,OAAAA,OACAC,QAASrF,KACTkF,KAAAA,KACAI,MAAOxB,QACP5B,KAAMiD,MACR,CACF"}