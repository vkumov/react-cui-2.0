{"version":3,"file":"index.js","sources":["../../src/Popover/context.tsx","../../src/Popover/Popover.tsx","../../src/Popover/PopoverTitle.tsx","../../src/Popover/usePopover.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  type FC,\n  type PropsWithChildren,\n  type ReactNode,\n} from \"react\";\n\ntype PopoverContextProps = {\n  setOverlayState: (show: boolean) => void;\n  setOverlay: (overlay: ReactNode) => void;\n};\n\nconst PopoverContext = createContext<PopoverContextProps>(null!);\n\nexport const PopoverProvider: FC<PropsWithChildren<PopoverContextProps>> = ({\n  children,\n  ...props\n}) => (\n  <PopoverContext.Provider value={props}>{children}</PopoverContext.Provider>\n);\n\nexport const usePopoverContext = () => useContext(PopoverContext);\n","import React, {\n  type FC,\n  type ReactNode,\n  type HTMLProps,\n  type PropsWithChildren,\n  type ComponentProps,\n  type MutableRefObject,\n  type ReactElement,\n  cloneElement,\n  forwardRef,\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\nimport {\n  type Placement,\n  flip,\n  FloatingFocusManager,\n  FloatingPortal,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  autoUpdate,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition, TransitionStatus } from \"react-transition-group\";\n\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\nimport { useFloatingContext } from \"src/FloatingProvider\";\n\nimport styles from \"./Popover.module.scss\";\nimport { PopoverProvider, usePopoverContext } from \"./context\";\n\nexport { usePopoverContext };\n\nconst Overlay: FC<\n  PropsWithChildren<{ show: boolean; background?: string; className?: string }>\n> = ({\n  show,\n  children,\n  background = \"var(--cui-background-color)\",\n  className,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  return (\n    <Transition\n      in={show}\n      mountOnEnter\n      unmountOnExit\n      timeout={250}\n      nodeRef={ref}\n    >\n      {(state) => (\n        <div\n          style={{\n            background,\n          }}\n          className={cx(styles.overlay, className, {\n            [styles.disappear]: state === \"exiting\" || state === \"exited\",\n          })}\n          ref={ref}\n        >\n          {children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport const GenericPopover = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & {\n    wrapperClassName?: string;\n    state: TransitionStatus;\n    offset?: Parameters<typeof offset>[0];\n  }\n>(function GenericPopoverRefed(\n  {\n    className,\n    children,\n    wrapperClassName,\n    state,\n    offset: offsetOptions,\n    ...props\n  },\n  ref\n) {\n  const ownRef = useRef<HTMLDivElement>(null);\n  const merged = useMergeRefs([ref, ownRef]);\n\n  useEffect(() => {\n    const r = ownRef.current;\n\n    if (r && offsetOptions && typeof offsetOptions !== \"function\")\n      r.style.setProperty(\n        \"--offset\",\n        `${\n          typeof offsetOptions === \"number\"\n            ? offsetOptions\n            : offsetOptions.mainAxis ?? 4\n        }px`\n      );\n\n    return () => {\n      if (r) r.style.setProperty(\"--offset\", \"4px\");\n    };\n  }, [offsetOptions]);\n\n  return (\n    <div\n      ref={merged}\n      className={cx(styles.wrapper, wrapperClassName, {\n        [styles.disappear]: state === \"exiting\" || state === \"exited\",\n      })}\n      {...props}\n    >\n      <div\n        className={cx(\n          \"panel panel--bordered panel--raised\",\n          styles.body,\n          className\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nexport type PopoverProps = PropsWithChildren<{\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  showClassName?: string;\n  overlay?: ReactNode;\n  showOverlay?: boolean;\n  placement?: Placement;\n  portalRoot?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  offset?: Parameters<typeof offset>[0];\n  lockBody?: boolean;\n  lockRootId?: string;\n  element: ReactElement;\n  closeRef?: MutableRefObject<() => unknown>;\n  initialFocus?: ComponentProps<typeof FloatingFocusManager>[\"initialFocus\"];\n  guardsFocus?: ComponentProps<typeof FloatingFocusManager>[\"guards\"];\n  modalFocus?: ComponentProps<typeof FloatingFocusManager>[\"modal\"];\n  closeOnFocusOut?: ComponentProps<\n    typeof FloatingFocusManager\n  >[\"closeOnFocusOut\"];\n}>;\n\nexport const Popover: FC<PopoverProps> = ({\n  children,\n  element,\n  onClose,\n  onOpen,\n  showClassName,\n  overlay: overlayProvided,\n  showOverlay: overlayShowProvided,\n  placement,\n  portalRoot,\n  offset: offsetOptions = 4,\n  closeRef,\n  initialFocus,\n  guardsFocus,\n  modalFocus,\n  closeOnFocusOut,\n}) => {\n  const [show, setShow] = useLockedBody(false, \"root\");\n\n  const { x, y, reference, floating, strategy, context } = useFloating({\n    placement,\n    middleware: [\n      offset(offsetOptions),\n      flip(),\n      shift({ padding: { left: 8, right: 8 } }),\n    ],\n    open: show,\n    onOpenChange: (newOpen) => {\n      if (newOpen && typeof onOpen === \"function\") onOpen();\n      if (!newOpen && typeof onClose === \"function\") onClose();\n      setShow(newOpen);\n    },\n    whileElementsMounted: autoUpdate,\n  });\n\n  const dismiss = useDismiss(context);\n  const click = useClick(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    click,\n    dismiss,\n  ]);\n\n  const [overlayShow, setOverlayShow] = useState(overlayShowProvided);\n  const [overlay, setOverlay] = useState(overlayProvided);\n\n  const ref = useMergeRefs([reference, (element as any).ref]);\n\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n  const rootCtx = useFloatingContext();\n  portalRoot ??= rootCtx?.rootRef?.current || undefined;\n\n  const closeCb = useCallback(() => setShow(false), [setShow]);\n  if (closeRef) closeRef.current = closeCb;\n\n  return (\n    <>\n      {cloneElement(\n        element,\n        getReferenceProps({\n          ref,\n          ...element.props,\n          className: cx(\n            element.props.className,\n            showClassName ? { [showClassName]: show } : undefined\n          ),\n        })\n      )}\n      <Transition\n        in={show}\n        mountOnEnter\n        unmountOnExit\n        timeout={250}\n        nodeRef={transitionRef}\n      >\n        {(state) => (\n          <FloatingPortal root={portalRoot}>\n            <FloatingFocusManager\n              context={context}\n              initialFocus={initialFocus}\n              guards={guardsFocus}\n              modal={modalFocus}\n              closeOnFocusOut={closeOnFocusOut}\n            >\n              <GenericPopover\n                ref={floatingRef}\n                style={{\n                  position: strategy,\n                  top: y ?? 0,\n                  left: x ?? 0,\n                }}\n                state={state}\n                offset={offsetOptions}\n                {...getFloatingProps()}\n              >\n                <PopoverProvider\n                  setOverlayState={setOverlayShow}\n                  setOverlay={setOverlay}\n                >\n                  <Overlay show={overlayShow || false}>{overlay}</Overlay>\n                  {children}\n                </PopoverProvider>\n              </GenericPopover>\n            </FloatingFocusManager>\n          </FloatingPortal>\n        )}\n      </Transition>\n    </>\n  );\n};\n","import React, { forwardRef, type HTMLProps, type ReactNode } from \"react\";\nimport cx from \"classnames\";\n\ntype PopoverTitleProps = {\n  children: ReactNode;\n  noLine?: boolean;\n} & HTMLProps<HTMLHeadingElement>;\n\nexport const PopoverTitle = forwardRef<HTMLHeadingElement, PopoverTitleProps>(\n  ({ className, noLine, ...props }, ref) => {\n    return (\n      <>\n        <h5\n          ref={ref}\n          className={cx(\"no-margin-bottom\", className)}\n          {...props}\n        />\n        {!noLine && <hr className=\"half-margin-top\" />}\n      </>\n    );\n  }\n);\n\nPopoverTitle.displayName = \"PopoverTitle\";\n","import React, {\n  ComponentProps,\n  ComponentType,\n  createElement,\n  ReactNode,\n  useCallback,\n  useRef,\n} from \"react\";\nimport {\n  flip,\n  FloatingFocusManager,\n  FloatingPortal,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  autoUpdate,\n} from \"@floating-ui/react\";\nimport { Transition } from \"react-transition-group\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\nimport { useFloatingContext } from \"src/FloatingProvider\";\nimport { GenericPopover, PopoverProps } from \".\";\n\ntype Options = {\n  body: ReactNode;\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  popoverComponent?: ComponentType<ComponentProps<typeof GenericPopover>>;\n} & Pick<\n  PopoverProps,\n  | \"initialFocus\"\n  | \"guardsFocus\"\n  | \"modalFocus\"\n  | \"closeOnFocusOut\"\n  | \"offset\"\n  | \"portalRoot\"\n  | \"placement\"\n>;\n\nexport function usePopover({\n  body,\n  onClose,\n  onOpen,\n  popoverComponent = GenericPopover,\n  placement,\n  initialFocus,\n  guardsFocus,\n  modalFocus,\n  closeOnFocusOut,\n  offset: offsetOptions = 4,\n  portalRoot,\n}: Options) {\n  const [show, setShow] = useLockedBody(false, \"root\");\n\n  const { x, y, reference, floating, strategy, context, refs } = useFloating({\n    placement,\n    middleware: [\n      offset(offsetOptions),\n      flip(),\n      shift({ padding: { left: 8, right: 8 } }),\n    ],\n    open: show,\n    onOpenChange: (newOpen) => {\n      if (newOpen && typeof onOpen === \"function\") onOpen();\n      if (!newOpen && typeof onClose === \"function\") onClose();\n      setShow(newOpen);\n    },\n    whileElementsMounted: autoUpdate,\n  });\n\n  const dismiss = useDismiss(context);\n  const click = useClick(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    click,\n    dismiss,\n  ]);\n\n  const closeCb = useCallback(() => setShow(false), [setShow]);\n  const openCb = useCallback(() => setShow(true), [setShow]);\n\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n  const rootCtx = useFloatingContext();\n  portalRoot ??= rootCtx?.rootRef?.current || undefined;\n\n  const render = () => {\n    return (\n      <Transition\n        in={show}\n        mountOnEnter\n        unmountOnExit\n        timeout={250}\n        nodeRef={transitionRef}\n      >\n        {(state) => (\n          <FloatingPortal root={portalRoot}>\n            <FloatingFocusManager\n              context={context}\n              initialFocus={initialFocus}\n              guards={guardsFocus}\n              modal={modalFocus}\n              closeOnFocusOut={closeOnFocusOut}\n            >\n              {createElement(\n                popoverComponent,\n                {\n                  ref: floatingRef,\n                  state,\n                  offset: offsetOptions,\n                  ...getFloatingProps({\n                    style: { position: strategy, top: y ?? 0, left: x ?? 0 },\n                  }),\n                },\n                body\n              )}\n            </FloatingFocusManager>\n          </FloatingPortal>\n        )}\n      </Transition>\n    );\n  };\n\n  return {\n    getReferenceProps,\n    reference,\n    render,\n    isShown: show,\n    refs,\n    close: closeCb,\n    open: openCb,\n  };\n}\n"],"names":["PopoverContext","createContext","PopoverProvider","children","props","Provider","value","usePopoverContext","useContext","_extends","Overlay","show","background","className","ref","useRef","Transition","in","mountOnEnter","unmountOnExit","timeout","nodeRef","state","div","style","cx","styles","overlay","disappear","GenericPopover","forwardRef","GenericPopoverRefed","wrapperClassName","offset","offsetOptions","ownRef","merged","useMergeRefs","useEffect","r","current","setProperty","mainAxis","wrapper","body","Popover","element","onClose","onOpen","showClassName","overlayProvided","showOverlay","overlayShowProvided","placement","portalRoot","closeRef","initialFocus","guardsFocus","modalFocus","closeOnFocusOut","rootCtx","setShow","useLockedBody","x","y","reference","floating","strategy","context","useFloating","middleware","flip","shift","padding","left","right","open","onOpenChange","newOpen","whileElementsMounted","autoUpdate","dismiss","useDismiss","click","useClick","getReferenceProps","getFloatingProps","useInteractions","overlayShow","setOverlayShow","useState","setOverlay","transitionRef","floatingRef","useFloatingContext","rootRef","undefined","closeCb","useCallback","cloneElement","FloatingPortal","root","FloatingFocusManager","guards","modal","position","top","setOverlayState","PopoverTitle","noLine","h5","hr","displayName","usePopover","popoverComponent","refs","openCb","render","createElement","isShown","close"],"mappings":"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"}