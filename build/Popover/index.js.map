{"version":3,"file":"index.js","sources":["../../src/Popover/GenericPopover.tsx","../../src/Popover/context.tsx","../../src/Popover/Popover.tsx","../../src/Popover/PopoverTitle.tsx","../../src/Popover/usePopover.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useRef, type HTMLProps } from \"react\";\nimport { useMergeRefs, type offset } from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport type { TransitionStatus } from \"react-transition-group\";\n\nimport styles from \"./Popover.module.scss\";\n\nexport const GenericPopover = forwardRef<\n  HTMLDivElement,\n  HTMLProps<HTMLDivElement> & {\n    wrapperClassName?: string;\n    state: TransitionStatus;\n    offset?: Parameters<typeof offset>[0];\n  }\n>(function GenericPopoverRefed(\n  {\n    className,\n    children,\n    wrapperClassName,\n    state,\n    offset: offsetOptions,\n    ...props\n  },\n  ref\n) {\n  const ownRef = useRef<HTMLDivElement>(null);\n  const merged = useMergeRefs([ref, ownRef]);\n\n  useEffect(() => {\n    const r = ownRef.current;\n\n    if (r && offsetOptions && typeof offsetOptions !== \"function\")\n      r.style.setProperty(\n        \"--offset\",\n        `${\n          typeof offsetOptions === \"number\"\n            ? offsetOptions\n            : offsetOptions.mainAxis ?? 4\n        }px`\n      );\n\n    return () => {\n      if (r) r.style.setProperty(\"--offset\", \"4px\");\n    };\n  }, [offsetOptions]);\n\n  return (\n    <div\n      ref={merged}\n      className={cx(styles.wrapper, wrapperClassName, {\n        [styles.disappear]: state === \"exiting\" || state === \"exited\",\n      })}\n      {...props}\n    >\n      <div\n        className={cx(\n          \"panel panel--bordered panel--raised\",\n          styles.body,\n          className\n        )}\n        tabIndex={-1}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n","import React, {\n  createContext,\n  useContext,\n  type FC,\n  type PropsWithChildren,\n  type ReactNode,\n} from \"react\";\n\ntype PopoverContextProps = {\n  setOverlayState: (show: boolean) => void;\n  setOverlay: (overlay: ReactNode) => void;\n};\n\nconst PopoverContext = createContext<PopoverContextProps>(null!);\n\nexport const PopoverProvider: FC<PropsWithChildren<PopoverContextProps>> = ({\n  children,\n  ...props\n}) => (\n  <PopoverContext.Provider value={props}>{children}</PopoverContext.Provider>\n);\n\nexport const usePopoverContext = () => useContext(PopoverContext);\n","import {\n  cloneElement,\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useImperativeHandle,\n  useRef,\n  useState,\n  type ComponentProps,\n  type FC,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingOverlay,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingTree,\n  useInteractions,\n  useMergeRefs,\n  type Placement,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\n\nimport { FloatingTreeWrapper, useFloatingContext } from \"src/FloatingProvider\";\nimport { useCustomDismiss } from \"src/hooks/useCustomDismiss\";\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\n\nimport { GenericPopover } from \"./GenericPopover\";\nimport styles from \"./Popover.module.scss\";\nimport { PopoverProvider, usePopoverContext } from \"./context\";\n\nexport { usePopoverContext };\n\nconst Overlay: FC<\n  PropsWithChildren<{ show: boolean; background?: string; className?: string }>\n> = ({\n  show,\n  children,\n  background = \"var(--cui-background-color)\",\n  className,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  return (\n    <Transition\n      in={show}\n      mountOnEnter\n      unmountOnExit\n      timeout={250}\n      nodeRef={ref}\n    >\n      {(state) => (\n        <div\n          style={{\n            background,\n          }}\n          className={cx(styles.overlay, className, {\n            [styles.disappear]: state === \"exiting\" || state === \"exited\",\n          })}\n          ref={ref}\n        >\n          {children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport type PopoverProps = PropsWithChildren<\n  {\n    onOpen?: () => unknown;\n    onClose?: () => unknown;\n    showClassName?: string;\n    overlay?: ReactNode;\n    showOverlay?: boolean;\n    placement?: Placement;\n    offset?: Parameters<typeof offset>[0];\n    lockBody?: boolean;\n    lockRootId?: string;\n    element: ReactElement;\n    closeRef?: MutableRefObject<(() => unknown) | undefined | null>;\n    initialFocus?: ComponentProps<typeof FloatingFocusManager>[\"initialFocus\"];\n    guardsFocus?: ComponentProps<typeof FloatingFocusManager>[\"guards\"];\n    modalFocus?: ComponentProps<typeof FloatingFocusManager>[\"modal\"];\n    closeOnFocusOut?: ComponentProps<\n      typeof FloatingFocusManager\n    >[\"closeOnFocusOut\"];\n    portalRoot?: ComponentProps<typeof FloatingTreeWrapper>[\"portalRoot\"];\n    portalId?: ComponentProps<typeof FloatingTreeWrapper>[\"portalId\"];\n    explicitPortal?: boolean;\n    autoDismiss?: boolean;\n  } & Pick<\n    ComponentProps<typeof GenericPopover>,\n    \"wrapperClassName\" | \"className\"\n  >\n>;\n\nexport interface PopoverHandlers {\n  close: () => void;\n  open: () => void;\n  setAutoDismiss: (enabled: boolean) => void;\n}\n\nconst popoverHandlersContext =\n  createContext<MutableRefObject<PopoverHandlers>>(null);\n\nexport const usePopoverHandlers = (): PopoverHandlers | undefined => {\n  const ref = useContext(popoverHandlersContext);\n  if (!ref) return undefined;\n\n  return ref.current;\n};\n\nexport const Popover = forwardRef<PopoverHandlers | null, PopoverProps>(\n  function (\n    {\n      children,\n      element,\n      onClose,\n      onOpen,\n      showClassName,\n      overlay: overlayProvided,\n      showOverlay: overlayShowProvided,\n      placement,\n      portalRoot,\n      offset: offsetOptions = 4,\n      closeRef,\n      initialFocus,\n      guardsFocus,\n      modalFocus,\n      closeOnFocusOut,\n      portalId,\n      wrapperClassName,\n      className,\n      explicitPortal,\n      autoDismiss: providedAutoDismiss = true,\n    },\n    impRef\n  ) {\n    const [show, setShow] = useLockedBody(false, \"root\");\n    const [autoDismiss, setAutoDismiss] = useState(providedAutoDismiss);\n\n    const tree = useFloatingTree();\n    const nodeId = useFloatingNodeId();\n\n    const { x, y, reference, floating, strategy, context } = useFloating({\n      placement,\n      middleware: [\n        offset(offsetOptions),\n        flip(),\n        shift({ padding: { left: 8, right: 8 } }),\n      ],\n      open: show,\n      onOpenChange: (newOpen) => {\n        if (newOpen && typeof onOpen === \"function\") onOpen();\n        if (!newOpen && typeof onClose === \"function\") onClose();\n        setShow(newOpen);\n      },\n      whileElementsMounted: autoUpdate,\n      nodeId,\n    });\n\n    const { getReferenceProps, getFloatingProps } = useInteractions([\n      useClick(context),\n      useDismiss(context, {\n        escapeKey: false,\n        bubbles: false,\n        enabled: autoDismiss,\n      }),\n      useCustomDismiss(context, { enabled: autoDismiss }),\n    ]);\n\n    const [overlayShow, setOverlayShow] = useState(overlayShowProvided);\n    const [overlay, setOverlay] = useState(overlayProvided);\n\n    const ref = useMergeRefs([reference, (element as any).ref]);\n\n    const transitionRef = useRef<HTMLDivElement>(null);\n    const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n    const { root, id } = useFloatingContext({\n      root: portalRoot,\n      portalId,\n      fallbackPortalId: \"--cui-popover-portal\",\n    });\n\n    const closeCb = useCallback(() => setShow(false), [setShow]);\n    if (closeRef) closeRef.current = closeCb;\n\n    const handlersRef = useRef<PopoverHandlers>(null);\n    useImperativeHandle(\n      useMergeRefs([impRef, handlersRef]),\n      () => ({\n        close: () => setShow(false),\n        open: () => setShow(true),\n        setAutoDismiss,\n      }),\n      [setShow]\n    );\n\n    return (\n      <popoverHandlersContext.Provider value={handlersRef}>\n        {cloneElement(\n          element,\n          getReferenceProps({\n            ref,\n            ...element.props,\n            className: cx(\n              element.props.className,\n              showClassName ? { [showClassName]: show } : undefined\n            ),\n          })\n        )}\n        <FloatingTreeWrapper\n          withPortal={explicitPortal || !tree}\n          portalId={id}\n          portalRoot={root}\n          force={explicitPortal ? true : undefined}\n        >\n          <FloatingNode id={nodeId}>\n            <Transition\n              in={show}\n              mountOnEnter\n              unmountOnExit\n              timeout={250}\n              nodeRef={transitionRef}\n            >\n              {(state) => (\n                <FloatingOverlay\n                  style={{ zIndex: \"calc(var(--cui-max-zindex, 1000) + 2)\" }}\n                  id={nodeId}\n                >\n                  <FloatingFocusManager\n                    context={context}\n                    initialFocus={initialFocus ?? (floatingRef as any)}\n                    guards={guardsFocus}\n                    modal={modalFocus}\n                    closeOnFocusOut={closeOnFocusOut}\n                  >\n                    <GenericPopover\n                      ref={floatingRef}\n                      style={{\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                      }}\n                      state={state}\n                      offset={offsetOptions}\n                      wrapperClassName={wrapperClassName}\n                      {...getFloatingProps({ className })}\n                    >\n                      <PopoverProvider\n                        setOverlayState={setOverlayShow}\n                        setOverlay={setOverlay}\n                      >\n                        <Overlay show={overlayShow || false}>{overlay}</Overlay>\n                        {children}\n                      </PopoverProvider>\n                    </GenericPopover>\n                  </FloatingFocusManager>\n                </FloatingOverlay>\n              )}\n            </Transition>\n          </FloatingNode>\n        </FloatingTreeWrapper>\n      </popoverHandlersContext.Provider>\n    );\n  }\n);\n","import React, { forwardRef, type HTMLProps, type ReactNode } from \"react\";\nimport cx from \"classnames\";\n\ntype PopoverTitleProps = {\n  children: ReactNode;\n  noLine?: boolean;\n} & HTMLProps<HTMLHeadingElement>;\n\nexport const PopoverTitle = forwardRef<HTMLHeadingElement, PopoverTitleProps>(\n  ({ className, noLine, ...props }, ref) => {\n    return (\n      <>\n        <h5\n          ref={ref}\n          className={cx(\"no-margin-bottom\", className)}\n          {...props}\n        />\n        {!noLine && <hr className=\"half-margin-top\" />}\n      </>\n    );\n  }\n);\n\nPopoverTitle.displayName = \"PopoverTitle\";\n","import React, {\n  createElement,\n  useCallback,\n  useRef,\n  type ComponentProps,\n  type ComponentType,\n  type ReactNode,\n} from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingPortal,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  useMergeRefs,\n} from \"@floating-ui/react\";\nimport { Transition } from \"react-transition-group\";\n\nimport { useFloatingContext } from \"src/FloatingProvider\";\nimport { useCustomDismiss } from \"src/hooks/useCustomDismiss\";\nimport { useLockedBody } from \"src/hooks/useLockedBody\";\n\nimport { PopoverProps } from \".\";\nimport { GenericPopover } from \"./GenericPopover\";\n\ntype Options = {\n  onOpen?: () => unknown;\n  onClose?: () => unknown;\n  popoverComponent?: ComponentType<ComponentProps<typeof GenericPopover>>;\n} & Pick<\n  PopoverProps,\n  | \"initialFocus\"\n  | \"guardsFocus\"\n  | \"modalFocus\"\n  | \"closeOnFocusOut\"\n  | \"offset\"\n  | \"portalRoot\"\n  | \"placement\"\n  | \"portalId\"\n>;\n\nexport function usePopover({\n  onClose,\n  onOpen,\n  popoverComponent = GenericPopover,\n  placement,\n  initialFocus,\n  guardsFocus,\n  modalFocus,\n  closeOnFocusOut,\n  offset: offsetOptions = 4,\n  portalRoot,\n  portalId,\n}: Options) {\n  const [show, setShow] = useLockedBody(false, \"root\");\n\n  const { x, y, reference, floating, strategy, context, refs } = useFloating({\n    placement,\n    middleware: [\n      offset(offsetOptions),\n      flip(),\n      shift({ padding: { left: 8, right: 8 } }),\n    ],\n    open: show,\n    onOpenChange: (newOpen) => {\n      if (newOpen && typeof onOpen === \"function\") onOpen();\n      if (!newOpen && typeof onClose === \"function\") onClose();\n      setShow(newOpen);\n    },\n    whileElementsMounted: autoUpdate,\n  });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    useClick(context),\n    useDismiss(context, { bubbles: false, escapeKey: false }),\n    useCustomDismiss(context),\n  ]);\n\n  const closeCb = useCallback(() => setShow(false), [setShow]);\n  const openCb = useCallback(() => setShow(true), [setShow]);\n\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const floatingRef = useMergeRefs<HTMLDivElement>([transitionRef, floating]);\n\n  const { root, id } = useFloatingContext({\n    root: portalRoot,\n    portalId,\n    fallbackPortalId: \"--cui-popover-portal\",\n  });\n\n  const render = (body: ReactNode) => {\n    return (\n      <FloatingPortal root={root} id={id}>\n        <Transition\n          in={show}\n          mountOnEnter\n          unmountOnExit\n          timeout={250}\n          nodeRef={transitionRef}\n        >\n          {(state) => (\n            <FloatingFocusManager\n              context={context}\n              initialFocus={initialFocus ?? (floating as any)}\n              guards={guardsFocus}\n              modal={modalFocus}\n              closeOnFocusOut={closeOnFocusOut}\n            >\n              {createElement(\n                popoverComponent,\n                {\n                  ref: floatingRef,\n                  state,\n                  offset: offsetOptions,\n                  ...getFloatingProps({\n                    style: { position: strategy, top: y ?? 0, left: x ?? 0 },\n                  }),\n                },\n                body\n              )}\n            </FloatingFocusManager>\n          )}\n        </Transition>\n      </FloatingPortal>\n    );\n  };\n\n  return {\n    getReferenceProps,\n    reference,\n    render,\n    isShown: show,\n    refs,\n    close: closeCb,\n    open: openCb,\n  };\n}\n"],"names":["GenericPopover","forwardRef","className","children","wrapperClassName","state","offsetOptions","props","ref","ownRef","useRef","merged","useMergeRefs","useEffect","_a","r","jsx","cx","styles","PopoverContext","createContext","PopoverProvider","usePopoverContext","useContext","Overlay","show","background","Transition","popoverHandlersContext","usePopoverHandlers","Popover","element","onClose","onOpen","showClassName","overlayProvided","overlayShowProvided","placement","portalRoot","closeRef","initialFocus","guardsFocus","modalFocus","closeOnFocusOut","portalId","explicitPortal","providedAutoDismiss","impRef","setShow","useLockedBody","autoDismiss","setAutoDismiss","useState","tree","useFloatingTree","nodeId","useFloatingNodeId","x","y","reference","floating","strategy","context","useFloating","offset","flip","shift","newOpen","autoUpdate","getReferenceProps","getFloatingProps","useInteractions","useClick","useDismiss","useCustomDismiss","overlayShow","setOverlayShow","overlay","setOverlay","transitionRef","floatingRef","root","id","useFloatingContext","closeCb","useCallback","handlersRef","useImperativeHandle","jsxs","cloneElement","FloatingTreeWrapper","FloatingNode","FloatingOverlay","FloatingFocusManager","PopoverTitle","noLine","Fragment","usePopover","popoverComponent","refs","openCb","body","FloatingPortal","createElement"],"mappings":"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"}