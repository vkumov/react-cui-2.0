{"version":3,"file":"index.js","sources":["../../src/Checkbox/Checkbox.tsx","../../src/Checkbox/IndeterminateCheckbox.tsx"],"sourcesContent":["import React, { forwardRef, HTMLProps, ReactNode } from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/checkbox.css\";\n\ntype CheckboxProps = {\n  inline?: boolean;\n  asFormGroup?: boolean;\n  children?: ReactNode;\n  spacing?: \"compressed\" | \"default\" | \"loose\";\n};\n\nexport const Checkbox = forwardRef<\n  HTMLInputElement,\n  CheckboxProps & HTMLProps<HTMLInputElement>\n>(\n  (\n    {\n      inline = false,\n      asFormGroup = true,\n      children = null,\n      spacing = null,\n      ...input\n    },\n    ref\n  ) => (\n    <ConditionalWrapper\n      condition={asFormGroup}\n      wrapper={\n        <div\n          className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n            spacing && spacing !== \"default\",\n            `form-group--${spacing}`\n          )}`}\n        />\n      }\n    >\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...input} ref={ref} />\n        <span className=\"checkbox__input\" />\n        {children ? <span className=\"checkbox__label\">{children}</span> : null}\n      </label>\n    </ConditionalWrapper>\n  )\n);\n","import React, {\n  useEffect,\n  useRef,\n  forwardRef,\n  type ComponentProps,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { Checkbox } from \"./Checkbox\";\n\nexport const IndeterminateCheckbox = forwardRef<\n  HTMLInputElement,\n  { indeterminate?: boolean } & ComponentProps<typeof Checkbox>\n>(({ indeterminate, ...rest }, fwd) => {\n  const ref = useRef<HTMLInputElement>(null!);\n\n  const refs = useMergeRefs([ref, fwd]);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n  }, [ref, indeterminate]);\n\n  return <Checkbox ref={refs} {...rest} />;\n});\n"],"names":["_extends","Checkbox","forwardRef","inline","asFormGroup","children","spacing","input","ref","ConditionalWrapper","condition","wrapper","div","className","ac","label","type","span","IndeterminateCheckbox","indeterminate","rest","fwd","useRef","refs","useMergeRefs","useEffect","current","checked"],"mappings":";;;;;AAAA,SAAAA,UAAA,GAAA;;;;;;;;;;;;;;AAcO,MAAMC,QAAWC,iBAAAA,UAAAA,CAItB,CACE,EACEC,QAAS,KAAK,GACdC,WAAAA,EAAc,IAAI,GAClBC,QAAW,EAAA,IAAI,GACfC,OAAU,EAAA,IAAI,GACd,GAAGC,KAAAA,EACJ,EACDC,GAAAA,iBAEA,KAACC,CAAAA,aAAAA,CAAAA,kBAAAA,EAAAA;QACCC,SAAWN,EAAAA,WAAAA;AACXO,QAAAA,OAAAA,gBACE,KAACC,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;AACCC,YAAAA,SAAAA,EAAW,CAAC,UAAU,EAAEC,WAAGX,CAAAA,MAAAA,EAAQ,sBAAsB,EAAEW,WAAAA,CACzDR,OAAWA,IAAAA,OAAAA,KAAY,WACvB,CAAC,YAAY,EAAEA,OAAQ,CAAA,CAAC,EACxB,CAAC;;qBAIP,KAACS,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA;QAAMF,SAAU,EAAA,UAAA;qBACf,KAACN,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA,UAAAA,CAAAA;QAAMS,IAAK,EAAA,UAAA;AAAeT,KAAAA,EAAAA,KAAAA,EAAAA;QAAOC,GAAKA,EAAAA,GAAAA;uBACvC,KAACS,CAAAA,aAAAA,CAAAA,MAAAA,EAAAA;QAAKJ,SAAU,EAAA,iBAAA;AACfR,KAAAA,CAAAA,EAAAA,QAAAA,iBAAW,KAACY,CAAAA,aAAAA,CAAAA,MAAAA,EAAAA;QAAKJ,SAAU,EAAA,iBAAA;AAAmBR,KAAAA,EAAAA,QAAAA,CAAAA,GAAmB,IAAI,CAI5E,CAAA;;AC9CF,SAAA,QAAA,GAAA;;;;;;;;;;;;;;AAUO,MAAMa,qBAAwBhB,iBAAAA,UAAAA,CAGnC,CAAC,EAAEiB,gBAAe,GAAGC,IAAM,EAAA,EAAEC,GAAQ,GAAA;IACrC,MAAMb,GAAAA,GAAMc,OAAyB,IAAI,CAAA,CAAA;AAEzC,IAAA,MAAMC,OAAOC,YAAa,CAAA;AAAChB,QAAAA,GAAAA;AAAKa,QAAAA,GAAAA;AAAI,KAAA,CAAA,CAAA;AAEpCI,IAAAA,SAAAA,CAAU,IAAM;QACd,IAAI,OAAON,kBAAkB,SAAW,EAAA;AACtCX,YAAAA,GAAAA,CAAIkB,OAAO,CAACP,aAAa,GAAG,CAACC,IAAAA,CAAKO,OAAO,IAAIR,aAAAA,CAAAA;SAC9C;KACA,EAAA;AAACX,QAAAA,GAAAA;AAAKW,QAAAA,aAAAA;AAAc,KAAA,CAAA,CAAA;AAEvB,IAAA,qBAAO,KAAClB,CAAAA,aAAAA,CAAAA,QAAAA,EAAAA,QAAAA,CAAAA;QAASO,GAAKe,EAAAA,IAAAA;AAAUH,KAAAA,EAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAClC,CAAG;;;;"}