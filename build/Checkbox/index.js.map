{"version":3,"file":"index.js","sources":["../../src/Checkbox/Checkbox.tsx","../../src/Checkbox/IndeterminateCheckbox.tsx"],"sourcesContent":["import React, { forwardRef, HTMLProps, ReactNode } from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/checkbox.css\";\n\ntype CheckboxProps = {\n  inline?: boolean;\n  asFormGroup?: boolean;\n  children?: ReactNode;\n  spacing?: \"compressed\" | \"default\" | \"loose\";\n};\n\nexport const Checkbox = forwardRef<\n  HTMLInputElement,\n  CheckboxProps & HTMLProps<HTMLInputElement>\n>(\n  (\n    {\n      inline = false,\n      asFormGroup = true,\n      children = null,\n      spacing = null,\n      ...input\n    },\n    ref\n  ) => (\n    <ConditionalWrapper\n      condition={asFormGroup}\n      wrapper={\n        <div\n          className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n            spacing && spacing !== \"default\",\n            `form-group--${spacing}`\n          )}`}\n        />\n      }\n    >\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...input} ref={ref} />\n        <span className=\"checkbox__input\" />\n        {children ? <span className=\"checkbox__label\">{children}</span> : null}\n      </label>\n    </ConditionalWrapper>\n  )\n);\n","import React, {\n  useEffect,\n  useRef,\n  forwardRef,\n  type ComponentProps,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { Checkbox } from \"./Checkbox\";\n\nexport const IndeterminateCheckbox = forwardRef<\n  HTMLInputElement,\n  { indeterminate?: boolean } & ComponentProps<typeof Checkbox>\n>(({ indeterminate, ...rest }, fwd) => {\n  const ref = useRef<HTMLInputElement>(null!);\n\n  const refs = useMergeRefs([ref, fwd]);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n  }, [ref, indeterminate]);\n\n  return <Checkbox ref={refs} {...rest} />;\n});\n"],"names":["_extends","Checkbox","forwardRef","inline","asFormGroup","children","spacing","input","ref","ConditionalWrapper","condition","wrapper","div","className","ac","label","type","span","IndeterminateCheckbox","indeterminate","rest","fwd","useRef","refs","useMergeRefs","useEffect","current","checked"],"mappings":";;;;;AAAA,SAAAA,UAAA,GAAA;;;;;;;;;;;;;;AAcaC,MAAAA,QAAQ,iBAAGC,UAAU,CAIhC,CACE,EACEC,MAAM,EAAG,KAAK,GACdC,WAAW,EAAG,IAAI,GAClBC,QAAQ,EAAG,IAAI,GACfC,OAAO,EAAG,IAAI,GACd,GAAGC,KAAK,EACT,EACDC,GAAG,iBAEH,oBAACC,kBAAkB,EAAA;AACjBC,QAAAA,SAAS,EAAEN,WAAW;QACtBO,OAAO,gBACL,oBAACC,KAAG,EAAA;AACFC,YAAAA,SAAS,EAAE,CAAC,UAAU,EAAEC,WAAE,CAACX,MAAM,EAAE,oBAAoB,CAAC,CAAC,EAAEW,WAAE,CAC3DR,OAAO,IAAIA,OAAO,KAAK,SAAS,EAChC,CAAC,YAAY,EAAEA,OAAO,CAAC,CAAC,CACzB,CAAC,CAAC;AACH,SAAA,CAAA;AAGJ,KAAA,gBAAA,KAAA,CAAA,aAAA,CAACS,OAAK,EAAA;AAACF,QAAAA,SAAS,EAAC,UAAU;AACzB,KAAA,gBAAA,KAAA,CAAA,aAAA,CAACN,OAAK,EAAAP,UAAA,CAAA;AAACgB,QAAAA,IAAI,EAAC,UAAU;OAAKT,KAAK,EAAA;AAAEC,QAAAA,GAAG,EAAEA,GAAG;AAAI,KAAA,CAAA,CAAA,gBAC9C,oBAACS,MAAI,EAAA;AAACJ,QAAAA,SAAS,EAAC,iBAAiB;MAAG,EACnCR,QAAQ,iBAAG,KAAA,CAAA,aAAA,CAACY,MAAI,EAAA;AAACJ,QAAAA,SAAS,EAAC,iBAAiB;AAAER,KAAAA,EAAAA,QAAQ,CAAQ,GAAG,IAAI,CAChE,CACW;AACtB;;AC7CH,SAAA,QAAA,GAAA;;;;;;;;;;;;;;AAUaa,MAAAA,qBAAqB,iBAAGhB,UAAU,CAG7C,CAAC,EAAEiB,aAAa,GAAE,GAAGC,IAAI,EAAE,EAAEC,GAAG,GAAK;AACrC,IAAA,MAAMb,GAAG,GAAGc,MAAM,CAAmB,IAAI,CAAE,CAAC;IAE5C,MAAMC,IAAI,GAAGC,YAAY,CAAC;QAAChB,GAAG;QAAEa,GAAG;AAAC,KAAA,CAAC,CAAC;AAEtCI,IAAAA,SAAS,CAAC,IAAM;AACd,QAAA,IAAI,OAAON,aAAa,KAAK,SAAS,EAAE;YACtCX,GAAG,CAACkB,OAAO,CAACP,aAAa,GAAG,CAACC,IAAI,CAACO,OAAO,IAAIR,aAAa,CAAC;AAC5D,SAAA;KACF,EAAE;QAACX,GAAG;QAAEW,aAAa;AAAC,KAAA,CAAC,CAAC;AAEzB,IAAA,qBAAO,oBAAClB,QAAQ,EAAA,QAAA,CAAA;AAACO,QAAAA,GAAG,EAAEe,IAAI;AAAMH,KAAAA,EAAAA,IAAI,EAAI,CAAC;AAC1C,CAAA;;;;"}