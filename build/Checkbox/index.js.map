{"version":3,"file":"index.js","sources":["../../src/Checkbox/Checkbox.tsx","../../src/Checkbox/IndeterminateCheckbox.tsx"],"sourcesContent":["import React, { HTMLProps, ReactNode, forwardRef } from \"react\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport \"../../css/checkbox.css\";\n\ntype CheckboxProps = {\n  inline?: boolean;\n  asFormGroup?: boolean;\n  children?: ReactNode;\n  spacing?: \"compressed\" | \"default\" | \"loose\";\n};\n\nexport const Checkbox = forwardRef<\n  HTMLInputElement,\n  CheckboxProps & HTMLProps<HTMLInputElement>\n>(\n  (\n    {\n      inline = false,\n      asFormGroup = true,\n      children = null,\n      spacing = null,\n      ...input\n    },\n    ref\n  ) => (\n    <ConditionalWrapper\n      condition={asFormGroup}\n      wrapper={\n        <div\n          className={`form-group${ac(inline, \"form-group--inline\")}${ac(\n            spacing && spacing !== \"default\",\n            `form-group--${spacing}`\n          )}`}\n        />\n      }\n    >\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...input} ref={ref} />\n        <span className=\"checkbox__input\" />\n        {children ? <span className=\"checkbox__label\">{children}</span> : null}\n      </label>\n    </ConditionalWrapper>\n  )\n);\n","import React, {\n  forwardRef,\n  useEffect,\n  useRef,\n  type ComponentProps,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { Checkbox } from \"./Checkbox\";\n\nexport const IndeterminateCheckbox = forwardRef<\n  HTMLInputElement,\n  { indeterminate?: boolean } & ComponentProps<typeof Checkbox>\n>(({ indeterminate, ...rest }, fwd) => {\n  const ref = useRef<HTMLInputElement>(null!);\n\n  const refs = useMergeRefs([ref, fwd]);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n  }, [ref, indeterminate]);\n\n  return <Checkbox ref={refs} {...rest} />;\n});\n"],"names":["_extends","Checkbox","forwardRef","ref","React","inline","asFormGroup","children","spacing","input","ConditionalWrapper","condition","wrapper","div","className","ac","label","type","span","IndeterminateCheckbox","fwd","indeterminate","rest","useRef","refs","useMergeRefs","useEffect","current","checked"],"mappings":"w4BAAA,SAAAA,YAAA,qQAcO,IAAMC,SAAWC,WAItB,gBAQEC,IAEAC,oBAREC,OAAAA,wBAAS,KAAK,6BACdC,YAAAA,kCAAc,IAAI,+BAClBC,SAAAA,4BAAW,IAAI,2BACfC,QAAAA,0BAAU,IAAI,UACXC,uCAJHJ,SACAC,cACAC,WACAC,mBAKFJ,MAACM,aAAAA,CAAAA,mBAAAA,CACCC,UAAWL,YACXM,QACER,MAACS,aAAAA,CAAAA,MAAAA,CACCC,UAAW,AAAC,aAA+CC,OAAnCA,YAAGV,OAAQ,uBAGjC,OAHyDU,YACzDP,SAAWA,UAAY,UACvB,AAAC,eAAsB,OAARA,cAKrBJ,MAACY,aAAAA,CAAAA,QAAAA,CAAMF,UAAU,YACfV,MAACK,aAAAA,CAAAA,QAAAA,WAAAA,CAAMQ,KAAK,UAAeR,EAAAA,MAAAA,CAAON,IAAKA,OACvCC,MAACc,aAAAA,CAAAA,OAAAA,CAAKJ,UAAU,iBACfP,GAAAA,SAAWH,MAACc,aAAAA,CAAAA,OAAAA,CAAKJ,UAAU,iBAAmBP,EAAAA,UAAmB,IAAI,EAI5E,GC9CF,SAAAP,UAAA,iQAUO,IAAMmB,sBAAwBjB,WAGnC,gBAA6BkB,IAAQ,KAAlCC,qBAAAA,cAAkBC,sCAAlBD,kBACH,IAAMlB,IAAMoB,OAAyB,IAAI,EAEzC,IAAMC,KAAOC,aAAa,CAACtB,IAAKiB,IAAI,EAEpCM,UAAU,UAAM,CACd,GAAI,OAAOL,gBAAkB,UAAW,CACtClB,IAAIwB,OAAO,CAACN,aAAa,CAAG,CAACC,KAAKM,OAAO,EAAIP,aAC9C,CAAA,EACA,CAAClB,IAAKkB,cAAc,EAEvB,OAAOjB,MAACH,aAAAA,CAAAA,SAAAA,SAAAA,CAASE,IAAKqB,IAAUF,EAAAA,MAClC"}