{"version":3,"file":"useLockedBody.js","sources":["../../src/hooks/useIsomorphicEffect.ts","../../src/hooks/useLockedBody.ts"],"sourcesContent":["import { useEffect, useLayoutEffect } from \"react\";\n\n// useLayoutEffect will show warning if used during ssr, e.g. with Next.js\n// useIsomorphicEffect removes it by replacing useLayoutEffect with useEffect during ssr\nexport const useIsomorphicEffect =\n  typeof document !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { useEffect, useState } from \"react\";\nimport { useIsomorphicEffect } from \"./useIsomorphicEffect\";\n\ntype UseLockedBodyOutput = [boolean, (locked: boolean) => void];\n\nexport function useLockedBody(\n  initialLocked = false,\n  rootId = \"___gatsby\" // Default to `___gatsby` to not introduce breaking change\n): UseLockedBodyOutput {\n  const [locked, setLocked] = useState(initialLocked);\n\n  // Do the side effect before render\n  useIsomorphicEffect(() => {\n    if (!locked) {\n      return;\n    }\n\n    // Save initial body style\n    const originalOverflow = document.body.style.overflow;\n    const originalPaddingRight = document.body.style.paddingRight;\n\n    // Lock body scroll\n    document.body.style.overflow = \"hidden\";\n\n    // Get the scrollBar width\n    const root = document.getElementById(rootId); // or root\n    const scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;\n\n    // Avoid width reflow\n    if (scrollBarWidth) {\n      document.body.style.paddingRight = `${scrollBarWidth}px`;\n    }\n\n    return () => {\n      document.body.style.overflow = originalOverflow;\n\n      if (scrollBarWidth) {\n        document.body.style.paddingRight = originalPaddingRight;\n      }\n    };\n  }, [locked]);\n\n  // Update state if initialValue changes\n  useEffect(() => {\n    if (locked !== initialLocked) {\n      setLocked(initialLocked);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialLocked]);\n\n  return [locked, setLocked];\n}\n"],"names":["useIsomorphicEffect","document","useLayoutEffect","useEffect","useLockedBody","initialLocked","rootId","locked","setLocked","useState","originalOverflow","body","style","overflow","originalPaddingRight","paddingRight","root","getElementById","scrollBarWidth","offsetWidth","scrollWidth"],"mappings":";;AAEA;AACA;AACO,MAAMA,mBACX,GAAA,OAAOC,aAAa,WAAcC,GAAAA,eAAAA,GAAkBC,SAAS;;ACAxD,SAASC,aACdC,CAAAA,aAAAA,GAAgB,KAAK,EACrBC,MAAAA,GAAS;AAAW,EACC;AACrB,IAAA,MAAM,CAACC,MAAAA,EAAQC,SAAU,CAAA,GAAGC,QAASJ,CAAAA,aAAAA,CAAAA,CAAAA;;AAGrCL,IAAAA,mBAAAA,CAAoB,IAAM;AACxB,QAAA,IAAI,CAACO,MAAQ,EAAA;AACX,YAAA,OAAA;SACD;;AAGD,QAAA,MAAMG,mBAAmBT,QAASU,CAAAA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAA;AACrD,QAAA,MAAMC,uBAAuBb,QAASU,CAAAA,IAAI,CAACC,KAAK,CAACG,YAAY,CAAA;;AAG7Dd,QAAAA,QAAAA,CAASU,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAA,CAAA;;AAG/B,QAAA,MAAMG,IAAOf,GAAAA,QAAAA,CAASgB,cAAc,CAACX;QACrC,MAAMY,cAAAA,GAAiBF,OAAOA,IAAKG,CAAAA,WAAW,GAAGH,IAAKI,CAAAA,WAAW,GAAG,CAAC,CAAA;;AAGrE,QAAA,IAAIF,cAAgB,EAAA;YAClBjB,QAASU,CAAAA,IAAI,CAACC,KAAK,CAACG,YAAY,GAAG,CAAC,EAAEG,cAAe,CAAA,EAAE,CAAC,CAAA;SACzD;AAED,QAAA,OAAO,IAAM;AACXjB,YAAAA,QAAAA,CAASU,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAGH,gBAAAA,CAAAA;AAE/B,YAAA,IAAIQ,cAAgB,EAAA;AAClBjB,gBAAAA,QAAAA,CAASU,IAAI,CAACC,KAAK,CAACG,YAAY,GAAGD,oBAAAA,CAAAA;aACpC;AACH,SAAA,CAAA;KACC,EAAA;AAACP,QAAAA,MAAAA;AAAO,KAAA,CAAA,CAAA;;AAGXJ,IAAAA,SAAAA,CAAU,IAAM;AACd,QAAA,IAAII,WAAWF,aAAe,EAAA;YAC5BG,SAAUH,CAAAA,aAAAA,CAAAA,CAAAA;SACX;;KAEA,EAAA;AAACA,QAAAA,aAAAA;AAAc,KAAA,CAAA,CAAA;IAElB,OAAO;AAACE,QAAAA,MAAAA;AAAQC,QAAAA,SAAAA;AAAU,KAAA,CAAA;AAC5B;;;;"}