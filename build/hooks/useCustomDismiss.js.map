{"version":3,"file":"useCustomDismiss.js","sources":["../../src/hooks/useCustomDismiss.ts"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport {\n  useFloatingTree,\n  type ElementProps,\n  type FloatingContext,\n  type FloatingNodeType,\n  type ReferenceType,\n} from \"@floating-ui/react\";\nimport useEvent from \"react-use-event-hook\";\n\nfunction getDocument(node: Element | null) {\n  return node?.ownerDocument || document;\n}\n\nfunction getChildren<RT extends ReferenceType = ReferenceType>(\n  nodes: Array<FloatingNodeType<RT>>,\n  id: string | undefined\n) {\n  let allChildren =\n    nodes.filter((node) => node.parentId === id && node.context?.open) || [];\n  let currentChildren = allChildren;\n\n  while (currentChildren.length) {\n    currentChildren =\n      nodes.filter((node) =>\n        currentChildren?.some(\n          (n) => node.parentId === n.id && node.context?.open\n        )\n      ) || [];\n\n    allChildren = allChildren.concat(currentChildren);\n  }\n\n  return allChildren;\n}\n\ntype Options = {\n  enabled?: boolean;\n};\n\nexport function useCustomDismiss<RT extends ReferenceType = ReferenceType>(\n  {\n    open,\n    onOpenChange,\n    events,\n    nodeId,\n    elements: { floating },\n  }: FloatingContext<RT>,\n  { enabled = true }: Options = {}\n): ElementProps {\n  const tree = useFloatingTree();\n\n  const closeOnEscapeKeyDown = useEvent(\n    (event: React.KeyboardEvent<Element> | KeyboardEvent) => {\n      if (!open || !enabled || event.key !== \"Escape\") {\n        return;\n      }\n\n      const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n\n      event.stopPropagation();\n\n      if (children.length > 0) return;\n\n      events.emit(\"dismiss\", {\n        type: \"escapeKey\",\n        data: {\n          returnFocus: { preventScroll: false },\n        },\n      });\n\n      onOpenChange(false);\n    }\n  );\n\n  useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n\n    const doc = getDocument(floating);\n    doc.addEventListener(\"keydown\", closeOnEscapeKeyDown);\n\n    return () => {\n      doc.removeEventListener(\"keydown\", closeOnEscapeKeyDown);\n    };\n  }, [closeOnEscapeKeyDown, enabled, floating, open]);\n\n  return useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n\n    return {\n      reference: {\n        onKeyDown: closeOnEscapeKeyDown,\n      },\n      floating: {\n        onKeyDown: closeOnEscapeKeyDown,\n      },\n    };\n  }, [closeOnEscapeKeyDown, enabled]);\n}\n"],"names":["getDocument","node","getChildren","nodes","id","allChildren","_a","currentChildren","n","useCustomDismiss","open","onOpenChange","events","nodeId","floating","enabled","tree","useFloatingTree","closeOnEscapeKeyDown","useEvent","event","children","useEffect","doc","useMemo"],"mappings":"wIAUA,SAASA,EAAYC,EAAsB,CACzC,OAAOA,GAAM,eAAiB,QAChC,CAEA,SAASC,EACPC,EACAC,EACA,CACA,IAAIC,EACFF,EAAM,OAAQF,GAAM,CAnBxB,IAAAK,EAmB2B,OAAAL,EAAK,WAAaG,KAAME,EAAAL,EAAK,UAAL,KAAAK,OAAAA,EAAc,KAAI,CAAA,GAAK,CAAC,EACrEC,EAAkBF,EAEtB,KAAOE,EAAgB,QACrBA,EACEJ,EAAM,OAAQF,GACZM,GAAiB,KACdC,GAAG,CA1Bd,IAAAF,EA0BiB,OAAAL,EAAK,WAAaO,EAAE,MAAMF,EAAAL,EAAK,UAAL,KAAAK,OAAAA,EAAc,KAEnD,CAAA,CAAA,GAAK,CAAA,EAEPD,EAAcA,EAAY,OAAOE,CAAe,EAGlD,OAAOF,CACT,CAMO,SAASI,EACd,CACE,KAAAC,EACA,aAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAU,CAAE,SAAAC,CAAS,CACvB,EACA,CAAE,QAAAC,EAAU,EAAK,EAAa,GAChB,CACd,MAAMC,EAAOC,EAEPC,EAAAA,EAAuBC,EAC1BC,GAAwD,CACvD,GAAI,CAACV,GAAQ,CAACK,GAAWK,EAAM,MAAQ,SACrC,OAGF,MAAMC,EAAWL,EAAOd,EAAYc,EAAK,SAAS,QAASH,CAAM,EAAI,GAErEO,EAAM,kBAEF,EAAAC,EAAS,OAAS,KAEtBT,EAAO,KAAK,UAAW,CACrB,KAAM,YACN,KAAM,CACJ,YAAa,CAAE,cAAe,EAAM,CACtC,CACF,CAAC,EAEDD,EAAa,EAAK,EACpB,CACF,EAEA,OAAAW,EAAU,IAAM,CACd,GAAI,CAACZ,GAAQ,CAACK,EACZ,OAGF,MAAMQ,EAAMvB,EAAYc,CAAQ,EAChC,OAAAS,EAAI,iBAAiB,UAAWL,CAAoB,EAE7C,IAAM,CACXK,EAAI,oBAAoB,UAAWL,CAAoB,CACzD,CACF,EAAG,CAACA,EAAsBH,EAASD,EAAUJ,CAAI,CAAC,EAE3Cc,EAAQ,IACRT,EAIE,CACL,UAAW,CACT,UAAWG,CACb,EACA,SAAU,CACR,UAAWA,CACb,CACF,EAVS,GAWR,CAACA,EAAsBH,CAAO,CAAC,CACpC"}