{"version":3,"file":"index.js","sources":["../../src/Modal/Header.tsx","../../src/Modal/Footer.tsx","../../src/Modal/Body.tsx","../../src/Modal/Modal.tsx","../../src/Modal/ConfirmationModal.tsx","../../src/Modal/PromptModal.tsx","../../src/Modal/ConfirmationListener.tsx","../../src/Modal/calls.tsx"],"sourcesContent":["import React, { FC, HTMLProps, PropsWithChildren } from \"react\";\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Header\n */\n\ntype ModalHeaderProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalHeader: FC<ModalHeaderProps> = ({\n  className = null,\n  children,\n  ...props\n}) => (\n  <div className={`modal__header${ac(className)}`} {...props}>\n    {children}\n  </div>\n);\n","import React, { FC, forwardRef, HTMLProps, PropsWithChildren } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Footer\n */\n\ntype ModalFooterProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalFooter: FC<ModalFooterProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__footer${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { FC, forwardRef, HTMLProps, PropsWithChildren } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Body\n */\n\ntype ModalBodyProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalBody: FC<ModalBodyProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__body${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { type FC, type ReactNode, type PropsWithChildren } from \"react\";\nimport { Transition } from \"react-transition-group\";\n\nimport {\n  FloatingFocusManager,\n  FloatingPortal,\n  FloatingOverlay,\n  useFloating,\n  useClick,\n  useDismiss,\n  useRole,\n  useInteractions,\n  type ReferenceType,\n  useFloatingNodeId,\n  FloatingNode,\n  useFloatingParentNodeId,\n  FloatingTree,\n} from \"@floating-ui/react\";\n\nimport { ConditionalWrapper, DisplayIf as If } from \"src/Conditional\";\nimport { appendClass as ac } from \"src/utils\";\nimport { useFloatingContext } from \"src/FloatingProvider\";\n\nimport { ModalHeader } from \"./Header\";\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\n\n/**\n * Modal\n */\n\nexport type ModalSize = \"small\" | \"default\" | \"large\" | \"full\" | \"fluid\";\n\nexport type ModalProps = PropsWithChildren<{\n  size?: ModalSize;\n  closeIcon?: boolean;\n  closeHandle?: () => void;\n  title?: ReactNode;\n  isOpen: boolean;\n  autoClose?: boolean;\n  left?: boolean;\n  animationDuration?:\n    | number\n    | { appear?: number; enter?: number; exit?: number };\n  transitionEvents?: Record<string, unknown>;\n  dialogProps?: React.ComponentProps<\"div\">;\n  contentProps?: React.ComponentProps<\"div\">;\n  maximize?: boolean;\n  refElement?: ReferenceType;\n  root?: Parameters<typeof FloatingPortal>[0][\"root\"];\n  lockScroll?: Parameters<typeof FloatingOverlay>[0][\"lockScroll\"];\n  ancestorScroll?: Parameters<typeof useDismiss>[1][\"ancestorScroll\"];\n}>;\n// & ReactModalProps;\n\ntype ModalSizes = {\n  Small: FC<ModalProps>;\n  Large: FC<ModalProps>;\n  Full: FC<ModalProps>;\n  Fluid: FC<ModalProps>;\n};\n\ntype ModalComponents = {\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n};\n\nexport const Modal: ModalSizes & ModalComponents & FC<ModalProps> = ({\n  size = null,\n  autoClose = true,\n  animationDuration = 250,\n  closeIcon = false,\n  title = null,\n  closeHandle = null,\n  left = false,\n  transitionEvents = null,\n  dialogProps = null,\n  contentProps = null,\n  maximize = false,\n  children,\n  isOpen,\n  refElement,\n  root: rootProvided,\n  lockScroll,\n  ancestorScroll,\n}) => {\n  const [maximized, setMaximized] = React.useState(false);\n\n  React.useEffect(() => setMaximized(false), [isOpen]);\n  const realSize = React.useMemo(\n    () => (maximized ? \"full\" : size),\n    [maximized, size]\n  );\n\n  const modalContext = useFloatingContext();\n  const root: HTMLElement | null | undefined =\n    rootProvided ?? modalContext ? modalContext.rootRef.current : undefined;\n\n  const nodeId = useFloatingNodeId();\n  const parentId = useFloatingParentNodeId();\n  const { reference, floating, context } = useFloating({\n    open: isOpen,\n    onOpenChange: (state) => (!state ? void closeHandle() : void 0),\n    nodeId,\n  });\n\n  React.useEffect(() => {\n    if (refElement) reference(refElement);\n  }, [refElement]);\n\n  const click = useClick(context);\n  const role = useRole(context, { role: \"dialog\" });\n  const dismiss = useDismiss(context, {\n    enabled: autoClose,\n    ancestorScroll,\n    bubbles: false,\n    outsidePress() {\n      if (!parentId) return false;\n      return true;\n    },\n  });\n\n  const { getFloatingProps } = useInteractions([click, role, dismiss]);\n\n  const nodeRef = React.useRef(null);\n\n  const t = (\n    <Transition\n      in={isOpen}\n      mountOnEnter\n      unmountOnExit\n      timeout={animationDuration}\n      nodeRef={nodeRef}\n      {...transitionEvents}\n    >\n      {(state) => (\n        <FloatingNode id={nodeId}>\n          <FloatingPortal root={root}>\n            <FloatingOverlay\n              className={`modal-backdrop${ac(\n                state === \"exiting\",\n                \"modal-backdrop--before-close\"\n              )}`}\n              lockScroll={lockScroll}\n              ref={nodeRef}\n            >\n              <FloatingFocusManager context={context}>\n                <div\n                  ref={floating}\n                  {...getFloatingProps({\n                    className: `modal${ac(realSize, `modal--${realSize}`)}${ac(\n                      left,\n                      \"modal--left\"\n                    )}`,\n                    onClick: () => (autoClose ? closeHandle() : void 0),\n                  })}\n                >\n                  <div\n                    className=\"modal__dialog\"\n                    {...dialogProps}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <div className=\"modal__content\" {...contentProps}>\n                      <If condition={!!(closeIcon && closeHandle) || maximize}>\n                        <ConditionalWrapper\n                          condition={!!(closeIcon && closeHandle) && maximize}\n                          wrapper={<div className=\"modal__close\" />}\n                        >\n                          {Boolean(maximize) && (\n                            <a\n                              className={`${ac(\n                                !(closeIcon && closeHandle),\n                                \"modal__close\"\n                              )}${ac(\n                                closeIcon && closeHandle,\n                                \"qtr-margin-right\"\n                              )}`}\n                              onClick={() => setMaximized((curr) => !curr)}\n                            >\n                              <span\n                                className={\n                                  maximized ? \"icon-minimize\" : \"icon-maximize\"\n                                }\n                              />\n                            </a>\n                          )}\n                          {Boolean(closeIcon && closeHandle) && (\n                            <a\n                              className={!maximize ? \"modal__close\" : \"\"}\n                              onClick={closeHandle}\n                            >\n                              <span className=\"icon-close\" />\n                            </a>\n                          )}\n                        </ConditionalWrapper>\n                      </If>\n                      {Boolean(title) && (\n                        <ModalHeader>\n                          <h1 className=\"modal__title\">{title}</h1>\n                        </ModalHeader>\n                      )}\n                      {children}\n                    </div>\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            </FloatingOverlay>\n          </FloatingPortal>\n        </FloatingNode>\n      )}\n    </Transition>\n  );\n\n  if (parentId === null) {\n    return <FloatingTree>{t}</FloatingTree>;\n  }\n\n  return t;\n};\n\nModal.Small = (props) => <Modal {...props} size=\"small\" />;\nModal.Large = (props) => <Modal {...props} size=\"large\" />;\nModal.Full = (props) => <Modal {...props} size=\"full\" />;\nModal.Fluid = (props) => <Modal {...props} size=\"fluid\" />;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n","import React, { ChangeEvent, FC, ReactNode } from \"react\";\n\nimport { Button, ButtonColor } from \"src/Button\";\n\nimport type { DontAskAgain } from \"./calls\";\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\n\n/**\n * Confirmation Modal\n */\n\ntype ConfirmationModalProps = {\n  isOpen?: boolean;\n  confirmHandle: (dontAskAgain?: boolean) => boolean | Promise<boolean>;\n  closeHandle: () => void;\n  prompt: ReactNode;\n  confirmType?: ButtonColor;\n  confirmText?: string;\n  autoClose?: boolean;\n  dontAskAgain?: DontAskAgain;\n};\n\nexport const ConfirmationModal: FC<ConfirmationModalProps> = ({\n  isOpen = false,\n  confirmType = \"primary\",\n  autoClose = true,\n  confirmText = \"Confirm\",\n  confirmHandle,\n  closeHandle,\n  prompt,\n  dontAskAgain = { show: false },\n}) => {\n  const [doing, setDoing] = React.useState(false);\n  const [dontAsk, setDontAsk] = React.useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={closeHandle}\n      autoClose={autoClose}\n      title=\"Confirmation\"\n    >\n      <ModalBody>\n        {prompt}\n        {dontAskAgain?.show ? (\n          <div className=\"form-group\">\n            <label className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                checked={dontAsk}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setDontAsk(e.target.checked);\n                }}\n              />\n              <span className=\"checkbox__input\"></span>\n              <span className=\"checkbox__label\">\n                {dontAskAgain.text || \"Don't ask again\"}\n              </span>\n            </label>\n          </div>\n        ) : null}\n      </ModalBody>\n      <ModalFooter>\n        <Button.Light onClick={closeHandle}>Close</Button.Light>\n        <Button\n          color={confirmType}\n          disabled={doing}\n          onClick={async () => {\n            setDoing(true);\n            if (await confirmHandle(dontAsk)) setDoing(false);\n          }}\n        >\n          {confirmText}\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React, {\n  ReactNode,\n  PropsWithChildren,\n  ChangeEvent,\n  KeyboardEvent,\n} from \"react\";\nimport { Input } from \"src/Input\";\nimport { DisplayIf as If } from \"src/Conditional\";\nimport { Button } from \"src/Button\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\n\n/**\n * Prompt Modal\n */\n\nexport interface PromptModalProps<T extends React.ReactText> {\n  title: ReactNode;\n  question: ReactNode;\n  onSave: (value: T) => void | Promise<void>;\n  onClose?: () => void;\n  initial?: T;\n  type?: string;\n  isOpen: boolean;\n  hint?: ReactNode;\n  validate?: ((value: T) => Promise<boolean>) | ((value: T) => boolean);\n}\n\nexport function PromptModal<T extends React.ReactText>({\n  title,\n  question,\n  onSave: cb,\n  onClose,\n  initial,\n  type,\n  isOpen,\n  hint,\n  validate,\n}: PropsWithChildren<PromptModalProps<T>>): JSX.Element {\n  const [val, setVal] = React.useState<T>(initial);\n  const [doing, setDoing] = React.useState(false);\n  const onSave = React.useCallback(async () => {\n    if (typeof validate === \"function\" && !(await validate(val))) return;\n\n    setDoing(true);\n    await cb(val);\n    setDoing(false);\n    onClose();\n  }, [onClose, cb, val, validate]);\n\n  React.useEffect(() => setVal(initial), [initial]);\n\n  const inpRef = React.useRef<HTMLInputElement>(undefined);\n\n  React.useEffect(() => {\n    if (isOpen && inpRef.current) inpRef.current.focus();\n  }, [isOpen]);\n\n  return (\n    <Modal isOpen={isOpen} closeIcon closeHandle={onClose} title={title}>\n      <ModalBody>\n        <Input\n          type={type}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setVal(e.target.value as T)\n          }\n          onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === \"Enter\") {\n              onSave();\n            }\n          }}\n          name=\"promptInput\"\n          value={val}\n          label={\n            <>\n              {question}\n              <If condition={!!hint && typeof hint === \"string\"}>\n                <span\n                  data-balloon={hint}\n                  data-balloon-length=\"large\"\n                  data-balloon-pos=\"up\"\n                >\n                  <span\n                    className=\"icon-question-circle qtr-margin-left\"\n                    style={{ cursor: \"help\" }}\n                  />\n                </span>\n              </If>\n            </>\n          }\n          ref={inpRef}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"light\" onClick={onClose} disabled={doing}>\n          Close\n        </Button>\n        <Button color=\"primary\" onClick={onSave} disabled={doing}>\n          OK\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { cloneElement } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport { Button } from \"src/Button\";\n\nimport { eventManager } from \"src/utils/eventManager\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { PromptModal } from \"./PromptModal\";\n\nexport const ConfirmationListener = (): JSX.Element => {\n  const [modals, setModals] = React.useState([]);\n\n  const addModal = React.useCallback(\n    (modal) =>\n      setModals((curr) => [...curr, { id: nanoid(), shown: true, ...modal }]),\n    []\n  );\n\n  const hideModal = React.useCallback((id) => {\n    setModals((curr) =>\n      curr.map((m) => (m.id === id ? { ...m, shown: false } : m))\n    );\n  }, []);\n\n  const deleteModal = React.useCallback((id) => {\n    setModals((curr) =>\n      curr.filter((m) => {\n        if (m.id === id && typeof m.onClosed === \"function\") m.onClosed();\n        return m.id !== id;\n      })\n    );\n  }, []);\n\n  const closeModal = React.useCallback(\n    (id, cb?: () => unknown) => {\n      hideModal(id);\n      setTimeout(() => deleteModal(id), 500);\n      if (cb) cb();\n    },\n    [hideModal, deleteModal]\n  );\n\n  React.useEffect(() => {\n    const cb = (m) => addModal(m);\n    eventManager.on(\"showModal\", cb);\n    return () => {\n      eventManager.off(\"showModal\", cb);\n    };\n  }, [addModal]);\n\n  if (!modals.length) return null;\n\n  return (\n    <>\n      {modals.map((modal) => {\n        if (modal.modalType === \"dynamic\")\n          return (\n            <Modal\n              {...modal.modalProps}\n              key={modal.id}\n              isOpen={modal.shown}\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              title={modal.title}\n            >\n              {modal.fullBody ? (\n                typeof modal.fullBody === \"function\" ? (\n                  modal.fullBody({\n                    close: () => closeModal(modal.id, modal.onModalClose),\n                  })\n                ) : (\n                  cloneElement(modal.fullBody, {\n                    close: () => closeModal(modal.id, modal.onModalClose),\n                  })\n                )\n              ) : (\n                <>\n                  <ModalBody>{modal.body}</ModalBody>\n                  <ModalFooter>\n                    {modal.buttons.map((button, idx) => (\n                      <Button\n                        key={idx}\n                        color={button.color || \"light\"}\n                        onClick={(e) => {\n                          if (typeof button.onClick === \"function\")\n                            button.onClick(e, () =>\n                              closeModal(modal.id, modal.onModalClose)\n                            );\n                          else closeModal(modal.id, modal.onModalClose);\n                        }}\n                      >\n                        {button.text}\n                      </Button>\n                    ))}\n                  </ModalFooter>\n                </>\n              )}\n            </Modal>\n          );\n\n        if (modal.modalType === \"notification\")\n          return (\n            <Modal\n              key={modal.id}\n              isOpen={modal.shown}\n              closeIcon\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              title={modal.title}\n            >\n              <ModalBody>{modal.body}</ModalBody>\n              <ModalFooter>\n                <Button\n                  color={modal.buttonColor || \"light\"}\n                  onClick={() => closeModal(modal.id, modal.onModalClose)}\n                >\n                  {modal.button}\n                </Button>\n              </ModalFooter>\n            </Modal>\n          );\n\n        if (modal.modalType === \"prompt\") {\n          if (typeof modal.options !== \"undefined\") {\n            const {\n              initial = \"\",\n              type = \"text\",\n              hint = undefined,\n              validate = undefined,\n            } = modal.options;\n            return (\n              <PromptModal\n                key={modal.id}\n                isOpen={modal.shown}\n                onClose={() => closeModal(modal.id, modal.onModalClose)}\n                onSave={modal.cb}\n                title={modal.title}\n                question={modal.question}\n                initial={initial}\n                type={type}\n                hint={hint}\n                validate={validate}\n              />\n            );\n          }\n\n          return (\n            <PromptModal\n              key={modal.id}\n              isOpen={modal.shown}\n              onClose={() => closeModal(modal.id, modal.onModalClose)}\n              onSave={modal.cb}\n              title={modal.title}\n              question={modal.question}\n              initial={modal.initial}\n              type={modal.type}\n              hint={modal.hint}\n            />\n          );\n        }\n\n        if (modal.modalType === \"confirmation\")\n          return (\n            <ConfirmationModal\n              key={modal.id}\n              isOpen={modal.shown}\n              prompt={modal.prompt}\n              confirmHandle={async (dontAskAgain) => {\n                const r = await modal.onConfirm(dontAskAgain);\n                if (r) closeModal(modal.id, modal.onModalClose);\n                return true;\n              }}\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              confirmText={modal.confirmText}\n              confirmType={modal.confirmType}\n              dontAskAgain={modal.dontAskAgain}\n            />\n          );\n\n        return null;\n      })}\n    </>\n  );\n};\n\nexport { ConfirmationListener as DynamicModal };\n","import React, { type ReactNode } from \"react\";\nimport type { ButtonColor } from \"src/Button\";\nimport { eventManager } from \"src/utils/eventManager\";\n\nimport type { ModalProps } from \"./Modal\";\nimport type { PromptModalProps } from \"./PromptModal\";\n\nexport type DontAskAgain = {\n  show: boolean;\n  text?: ReactNode;\n};\n\ntype TextOrNumber = string | number;\n\nexport function confirmation(\n  prompt: ReactNode,\n  onConfirm: (dontAskAgain?: boolean) => boolean | Promise<boolean>,\n  confirmType: ButtonColor = \"primary\",\n  confirmText = \"Confirm\",\n  dontAskAgain: DontAskAgain = { show: false }\n): Promise<void> {\n  if (!prompt) throw new Error(\"Prompt must be specified\");\n  if (!onConfirm || typeof onConfirm !== \"function\")\n    throw new Error(\"onConfirm must be specified and must be a function\");\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"confirmation\",\n      prompt: <p>{prompt}</p>,\n      onConfirm,\n      confirmText,\n      confirmType,\n      dontAskAgain,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype NotificationModal = (\n  title: ReactNode,\n  body: ReactNode,\n  buttonColor?: ButtonColor,\n  button?: ReactNode\n) => Promise<void>;\n\nexport const notificationModal: NotificationModal = (\n  title,\n  body,\n  buttonColor = \"light\",\n  button = \"OK\"\n): Promise<void> => {\n  if (!title || !body) throw new Error(\"Title and body must be specified\");\n\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"notification\",\n      title,\n      body,\n      buttonColor,\n      button,\n      onClosed: resolve,\n    });\n  });\n};\n\nexport { notificationModal as notification };\n\ntype initialOrOptions<T extends TextOrNumber> =\n  | Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n  | string;\n\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial?: string,\n  type?: string,\n  hint?: ReactNode\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  options?: Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial: initialOrOptions<T>,\n  type = \"text\",\n  hint = undefined\n): Promise<void> {\n  if (!title || !question)\n    throw new Error(\"Title and question must be specified\");\n\n  if (typeof initial === \"object\") {\n    return new Promise((resolve) =>\n      eventManager.emit(\"showModal\", {\n        modalType: \"prompt\",\n        title,\n        question,\n        cb,\n        options: initial,\n        onModalClose: resolve,\n      })\n    );\n  }\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"prompt\",\n      title,\n      initial,\n      type,\n      question,\n      cb,\n      hint,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype CloseHandler = () => void;\n\ninterface ModalButton {\n  color?: ButtonColor;\n  text: ReactNode;\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement>,\n    close: CloseHandler\n  ) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type PropsWithCloseModal<P = {}> = P & { close: () => void };\n\ntype FullBodyRender = (props: { close: () => void }) => ReactNode;\n\ninterface DynamicModalOptions {\n  title: ReactNode;\n  fullBody?: ReactNode | FullBodyRender;\n  body?: ReactNode;\n  buttons?: ModalButton[];\n  modalProps?: Partial<ModalProps>;\n}\n\ntype DynamicModalHandler = (options: DynamicModalOptions) => Promise<void>;\n\nexport const dynamicModal: DynamicModalHandler = ({\n  title,\n  fullBody = null,\n  body = null,\n  buttons = [],\n  modalProps = {},\n}): Promise<void> => {\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"dynamic\",\n      title,\n      fullBody,\n      body,\n      buttons,\n      modalProps,\n      onModalClose: resolve,\n    });\n  });\n};\n"],"names":["_extends","ModalHeader","className","children","props","div","ac","ModalFooter","forwardRef","ref","ModalBody","Modal","size","autoClose","animationDuration","closeIcon","title","closeHandle","left","transitionEvents","dialogProps","contentProps","maximize","isOpen","refElement","root","rootProvided","lockScroll","ancestorScroll","maximized","setMaximized","React","useState","useEffect","realSize","useMemo","modalContext","useFloatingContext","rootRef","current","undefined","nodeId","useFloatingNodeId","parentId","useFloatingParentNodeId","reference","floating","context","useFloating","open","onOpenChange","state","click","useClick","role","useRole","dismiss","useDismiss","enabled","bubbles","outsidePress","getFloatingProps","useInteractions","nodeRef","useRef","t","Transition","in","mountOnEnter","unmountOnExit","timeout","FloatingNode","id","FloatingPortal","FloatingOverlay","FloatingFocusManager","onClick","e","stopPropagation","If","condition","ConditionalWrapper","wrapper","Boolean","a","curr","span","h1","FloatingTree","Small","Large","Full","Fluid","Header","Body","Footer","ConfirmationModal","confirmType","confirmText","confirmHandle","prompt","dontAskAgain","show","doing","setDoing","dontAsk","setDontAsk","label","input","type","checked","onChange","target","text","Button","Light","color","disabled","PromptModal","question","onSave","cb","onClose","initial","hint","validate","val","setVal","useCallback","inpRef","focus","Input","value","onKeyUp","key","name","data-balloon","data-balloon-length","data-balloon-pos","style","cursor","ConfirmationListener","modals","setModals","addModal","modal","nanoid","shown","hideModal","map","m","deleteModal","filter","onClosed","closeModal","setTimeout","eventManager","on","off","length","modalType","modalProps","onModalClose","fullBody","close","cloneElement","body","buttons","button","idx","buttonColor","options","r","onConfirm","confirmation","Error","Promise","resolve","emit","p","notificationModal","dynamicModal"],"mappings":"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"}