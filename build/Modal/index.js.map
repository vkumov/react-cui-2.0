{"version":3,"file":"index.js","sources":["../../src/Modal/Header.tsx","../../src/Modal/Footer.tsx","../../src/Modal/Body.tsx","../../src/Modal/Modal.tsx","../../src/Modal/ConfirmationModal.tsx","../../src/Modal/PromptModal.tsx","../../src/Modal/ConfirmationListener.tsx","../../src/Modal/calls.tsx"],"sourcesContent":["import React, { FC, HTMLProps, PropsWithChildren } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Header\n */\n\ntype ModalHeaderProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalHeader: FC<ModalHeaderProps> = ({\n  className = null,\n  children,\n  ...props\n}) => (\n  <div className={`modal__header${ac(className)}`} {...props}>\n    {children}\n  </div>\n);\n","import React, { FC, HTMLProps, PropsWithChildren, forwardRef } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Footer\n */\n\ntype ModalFooterProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalFooter: FC<ModalFooterProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__footer${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { FC, HTMLProps, PropsWithChildren, forwardRef } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Body\n */\n\ntype ModalBodyProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalBody: FC<ModalBodyProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__body${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { type FC, type PropsWithChildren, type ReactNode } from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingOverlay,\n  FloatingPortal,\n  FloatingTree,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingParentNodeId,\n  useInteractions,\n  useRole,\n  type ReferenceType,\n} from \"@floating-ui/react\";\nimport { Transition } from \"react-transition-group\";\n\nimport { ConditionalWrapper, DisplayIf as If } from \"src/Conditional\";\nimport { useFloatingContext } from \"src/FloatingProvider\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { ModalHeader } from \"./Header\";\n\n/**\n * Modal\n */\n\nexport type ModalSize = \"small\" | \"default\" | \"large\" | \"full\" | \"fluid\";\n\nexport type ModalProps = PropsWithChildren<{\n  size?: ModalSize;\n  closeIcon?: boolean;\n  closeHandle?: () => void;\n  title?: ReactNode;\n  isOpen: boolean;\n  autoClose?: boolean;\n  left?: boolean;\n  animationDuration?:\n    | number\n    | { appear?: number; enter?: number; exit?: number };\n  transitionEvents?: Record<string, unknown>;\n  dialogProps?: React.ComponentProps<\"div\">;\n  contentProps?: React.ComponentProps<\"div\">;\n  maximize?: boolean;\n  refElement?: ReferenceType;\n  root?: Parameters<typeof FloatingPortal>[0][\"root\"];\n  lockScroll?: Parameters<typeof FloatingOverlay>[0][\"lockScroll\"];\n  ancestorScroll?: Parameters<typeof useDismiss>[1][\"ancestorScroll\"];\n}>;\n// & ReactModalProps;\n\ntype ModalSizes = {\n  Small: FC<ModalProps>;\n  Large: FC<ModalProps>;\n  Full: FC<ModalProps>;\n  Fluid: FC<ModalProps>;\n};\n\ntype ModalComponents = {\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n};\n\nexport const Modal: ModalSizes & ModalComponents & FC<ModalProps> = ({\n  size = null,\n  autoClose = true,\n  animationDuration = 250,\n  closeIcon = false,\n  title = null,\n  closeHandle = null,\n  left = false,\n  transitionEvents = null,\n  dialogProps = null,\n  contentProps = null,\n  maximize = false,\n  children,\n  isOpen,\n  refElement,\n  root: rootProvided,\n  lockScroll,\n  ancestorScroll,\n}) => {\n  const [maximized, setMaximized] = React.useState(false);\n\n  React.useEffect(() => setMaximized(false), [isOpen]);\n  const realSize = React.useMemo(\n    () => (maximized ? \"full\" : size),\n    [maximized, size]\n  );\n\n  const modalContext = useFloatingContext();\n  const root: HTMLElement | null | undefined =\n    rootProvided ?? modalContext ? modalContext.rootRef.current : undefined;\n\n  const nodeId = useFloatingNodeId();\n  const parentId = useFloatingParentNodeId();\n  const { reference, floating, context } = useFloating({\n    open: isOpen,\n    onOpenChange: (state) => (!state ? void closeHandle() : void 0),\n    nodeId,\n  });\n\n  React.useEffect(() => {\n    if (refElement) reference(refElement);\n  }, [refElement]);\n\n  const click = useClick(context);\n  const role = useRole(context, { role: \"dialog\" });\n  const dismiss = useDismiss(context, {\n    enabled: autoClose,\n    ancestorScroll,\n    bubbles: false,\n    outsidePress() {\n      if (!parentId) return false;\n      return true;\n    },\n  });\n\n  const { getFloatingProps } = useInteractions([click, role, dismiss]);\n\n  const nodeRef = React.useRef(null);\n\n  const t = (\n    <FloatingPortal root={root}>\n      <Transition\n        in={isOpen}\n        mountOnEnter\n        unmountOnExit\n        timeout={animationDuration}\n        nodeRef={nodeRef}\n        {...transitionEvents}\n      >\n        {(state) => (\n          <FloatingNode id={nodeId}>\n            <FloatingOverlay\n              className={`modal-backdrop${ac(\n                state === \"exiting\",\n                \"modal-backdrop--before-close\"\n              )}`}\n              lockScroll={lockScroll}\n              ref={nodeRef}\n            >\n              <FloatingFocusManager context={context}>\n                <div\n                  ref={floating}\n                  {...getFloatingProps({\n                    className: `modal${ac(realSize, `modal--${realSize}`)}${ac(\n                      left,\n                      \"modal--left\"\n                    )}`,\n                    onClick: () => (autoClose ? closeHandle() : void 0),\n                  })}\n                >\n                  <div\n                    className=\"modal__dialog\"\n                    {...dialogProps}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <div className=\"modal__content\" {...contentProps}>\n                      <If condition={!!(closeIcon && closeHandle) || maximize}>\n                        <ConditionalWrapper\n                          condition={!!(closeIcon && closeHandle) && maximize}\n                          wrapper={<div className=\"modal__close\" />}\n                        >\n                          {Boolean(maximize) && (\n                            <a\n                              className={`${ac(\n                                !(closeIcon && closeHandle),\n                                \"modal__close\"\n                              )}${ac(\n                                closeIcon && closeHandle,\n                                \"qtr-margin-right\"\n                              )}`}\n                              onClick={() => setMaximized((curr) => !curr)}\n                            >\n                              <span\n                                className={\n                                  maximized ? \"icon-minimize\" : \"icon-maximize\"\n                                }\n                              />\n                            </a>\n                          )}\n                          {Boolean(closeIcon && closeHandle) && (\n                            <a\n                              className={!maximize ? \"modal__close\" : \"\"}\n                              onClick={closeHandle}\n                            >\n                              <span className=\"icon-close\" />\n                            </a>\n                          )}\n                        </ConditionalWrapper>\n                      </If>\n                      {Boolean(title) && (\n                        <ModalHeader>\n                          <h1 className=\"modal__title\">{title}</h1>\n                        </ModalHeader>\n                      )}\n                      {children}\n                    </div>\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            </FloatingOverlay>\n          </FloatingNode>\n        )}\n      </Transition>\n    </FloatingPortal>\n  );\n\n  if (parentId === null) {\n    return <FloatingTree>{t}</FloatingTree>;\n  }\n\n  return t;\n};\n\nModal.Small = (props) => <Modal {...props} size=\"small\" />;\nModal.Large = (props) => <Modal {...props} size=\"large\" />;\nModal.Full = (props) => <Modal {...props} size=\"full\" />;\nModal.Fluid = (props) => <Modal {...props} size=\"fluid\" />;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n","import React, { ChangeEvent, FC, ReactNode } from \"react\";\n\nimport { Button, ButtonColor } from \"src/Button\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport type { DontAskAgain } from \"./calls\";\n\n/**\n * Confirmation Modal\n */\n\ntype ConfirmationModalProps = {\n  isOpen?: boolean;\n  confirmHandle: (dontAskAgain?: boolean) => boolean | Promise<boolean>;\n  closeHandle: () => void;\n  prompt: ReactNode;\n  confirmType?: ButtonColor;\n  confirmText?: string;\n  autoClose?: boolean;\n  dontAskAgain?: DontAskAgain;\n};\n\nexport const ConfirmationModal: FC<ConfirmationModalProps> = ({\n  isOpen = false,\n  confirmType = \"primary\",\n  autoClose = true,\n  confirmText = \"Confirm\",\n  confirmHandle,\n  closeHandle,\n  prompt,\n  dontAskAgain = { show: false },\n}) => {\n  const [doing, setDoing] = React.useState(false);\n  const [dontAsk, setDontAsk] = React.useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={closeHandle}\n      autoClose={autoClose}\n      title=\"Confirmation\"\n    >\n      <ModalBody>\n        {prompt}\n        {dontAskAgain?.show ? (\n          <div className=\"form-group\">\n            <label className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                checked={dontAsk}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setDontAsk(e.target.checked);\n                }}\n              />\n              <span className=\"checkbox__input\"></span>\n              <span className=\"checkbox__label\">\n                {dontAskAgain.text || \"Don't ask again\"}\n              </span>\n            </label>\n          </div>\n        ) : null}\n      </ModalBody>\n      <ModalFooter>\n        <Button.Light onClick={closeHandle}>Close</Button.Light>\n        <Button\n          color={confirmType}\n          disabled={doing}\n          onClick={async () => {\n            setDoing(true);\n            if (await confirmHandle(dontAsk)) setDoing(false);\n          }}\n        >\n          {confirmText}\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  PropsWithChildren,\n  ReactNode,\n} from \"react\";\n\nimport { Button } from \"src/Button\";\nimport { DisplayIf as If } from \"src/Conditional\";\nimport { Input } from \"src/Input\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\n\n/**\n * Prompt Modal\n */\n\nexport interface PromptModalProps<T extends React.ReactText> {\n  title: ReactNode;\n  question: ReactNode;\n  onSave: (value: T) => void | Promise<void>;\n  onClose?: () => void;\n  initial?: T;\n  type?: string;\n  isOpen: boolean;\n  hint?: ReactNode;\n  validate?: ((value: T) => Promise<boolean>) | ((value: T) => boolean);\n}\n\nexport function PromptModal<T extends React.ReactText>({\n  title,\n  question,\n  onSave: cb,\n  onClose,\n  initial,\n  type,\n  isOpen,\n  hint,\n  validate,\n}: PropsWithChildren<PromptModalProps<T>>): JSX.Element {\n  const [val, setVal] = React.useState<T>(initial);\n  const [doing, setDoing] = React.useState(false);\n  const onSave = React.useCallback(async () => {\n    if (typeof validate === \"function\" && !(await validate(val))) return;\n\n    setDoing(true);\n    await cb(val);\n    setDoing(false);\n    onClose();\n  }, [onClose, cb, val, validate]);\n\n  React.useEffect(() => setVal(initial), [initial]);\n\n  const inpRef = React.useRef<HTMLInputElement>(undefined);\n\n  React.useEffect(() => {\n    if (isOpen && inpRef.current) inpRef.current.focus();\n  }, [isOpen]);\n\n  return (\n    <Modal isOpen={isOpen} closeIcon closeHandle={onClose} title={title}>\n      <ModalBody>\n        <Input\n          type={type}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setVal(e.target.value as T)\n          }\n          onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === \"Enter\") {\n              onSave();\n            }\n          }}\n          name=\"promptInput\"\n          value={val}\n          label={\n            <>\n              {question}\n              <If condition={!!hint && typeof hint === \"string\"}>\n                <span\n                  data-balloon={hint}\n                  data-balloon-length=\"large\"\n                  data-balloon-pos=\"up\"\n                >\n                  <span\n                    className=\"icon-question-circle qtr-margin-left\"\n                    style={{ cursor: \"help\" }}\n                  />\n                </span>\n              </If>\n            </>\n          }\n          ref={inpRef}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"light\" onClick={onClose} disabled={doing}>\n          Close\n        </Button>\n        <Button color=\"primary\" onClick={onSave} disabled={doing}>\n          OK\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { cloneElement } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport { Button } from \"src/Button\";\nimport { eventManager } from \"src/utils/eventManager\";\n\nimport { ModalBody } from \"./Body\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport { PromptModal } from \"./PromptModal\";\n\nexport const ConfirmationListener = (): JSX.Element => {\n  const [modals, setModals] = React.useState([]);\n\n  const addModal = React.useCallback(\n    (modal) =>\n      setModals((curr) => [...curr, { id: nanoid(), shown: true, ...modal }]),\n    []\n  );\n\n  const hideModal = React.useCallback((id) => {\n    setModals((curr) =>\n      curr.map((m) => (m.id === id ? { ...m, shown: false } : m))\n    );\n  }, []);\n\n  const deleteModal = React.useCallback((id) => {\n    setModals((curr) =>\n      curr.filter((m) => {\n        if (m.id === id && typeof m.onClosed === \"function\") m.onClosed();\n        return m.id !== id;\n      })\n    );\n  }, []);\n\n  const closeModal = React.useCallback(\n    (id, cb?: () => unknown) => {\n      hideModal(id);\n      setTimeout(() => deleteModal(id), 500);\n      if (cb) cb();\n    },\n    [hideModal, deleteModal]\n  );\n\n  React.useEffect(() => {\n    const cb = (m) => addModal(m);\n    eventManager.on(\"showModal\", cb);\n    return () => {\n      eventManager.off(\"showModal\", cb);\n    };\n  }, [addModal]);\n\n  if (!modals.length) return null;\n\n  return (\n    <>\n      {modals.map((modal) => {\n        if (modal.modalType === \"dynamic\")\n          return (\n            <Modal\n              {...modal.modalProps}\n              key={modal.id}\n              isOpen={modal.shown}\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              title={modal.title}\n            >\n              {modal.fullBody ? (\n                typeof modal.fullBody === \"function\" ? (\n                  modal.fullBody({\n                    close: () => closeModal(modal.id, modal.onModalClose),\n                  })\n                ) : (\n                  cloneElement(modal.fullBody, {\n                    close: () => closeModal(modal.id, modal.onModalClose),\n                  })\n                )\n              ) : (\n                <>\n                  <ModalBody>{modal.body}</ModalBody>\n                  <ModalFooter>\n                    {modal.buttons.map((button, idx) => (\n                      <Button\n                        key={idx}\n                        color={button.color || \"light\"}\n                        onClick={(e) => {\n                          if (typeof button.onClick === \"function\")\n                            button.onClick(e, () =>\n                              closeModal(modal.id, modal.onModalClose)\n                            );\n                          else closeModal(modal.id, modal.onModalClose);\n                        }}\n                      >\n                        {button.text}\n                      </Button>\n                    ))}\n                  </ModalFooter>\n                </>\n              )}\n            </Modal>\n          );\n\n        if (modal.modalType === \"notification\")\n          return (\n            <Modal\n              key={modal.id}\n              isOpen={modal.shown}\n              closeIcon\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              title={modal.title}\n            >\n              <ModalBody>{modal.body}</ModalBody>\n              <ModalFooter>\n                <Button\n                  color={modal.buttonColor || \"light\"}\n                  onClick={() => closeModal(modal.id, modal.onModalClose)}\n                >\n                  {modal.button}\n                </Button>\n              </ModalFooter>\n            </Modal>\n          );\n\n        if (modal.modalType === \"prompt\") {\n          if (typeof modal.options !== \"undefined\") {\n            const {\n              initial = \"\",\n              type = \"text\",\n              hint = undefined,\n              validate = undefined,\n            } = modal.options;\n            return (\n              <PromptModal\n                key={modal.id}\n                isOpen={modal.shown}\n                onClose={() => closeModal(modal.id, modal.onModalClose)}\n                onSave={modal.cb}\n                title={modal.title}\n                question={modal.question}\n                initial={initial}\n                type={type}\n                hint={hint}\n                validate={validate}\n              />\n            );\n          }\n\n          return (\n            <PromptModal\n              key={modal.id}\n              isOpen={modal.shown}\n              onClose={() => closeModal(modal.id, modal.onModalClose)}\n              onSave={modal.cb}\n              title={modal.title}\n              question={modal.question}\n              initial={modal.initial}\n              type={modal.type}\n              hint={modal.hint}\n            />\n          );\n        }\n\n        if (modal.modalType === \"confirmation\")\n          return (\n            <ConfirmationModal\n              key={modal.id}\n              isOpen={modal.shown}\n              prompt={modal.prompt}\n              confirmHandle={async (dontAskAgain) => {\n                const r = await modal.onConfirm(dontAskAgain);\n                if (r) closeModal(modal.id, modal.onModalClose);\n                return true;\n              }}\n              closeHandle={() => closeModal(modal.id, modal.onModalClose)}\n              confirmText={modal.confirmText}\n              confirmType={modal.confirmType}\n              dontAskAgain={modal.dontAskAgain}\n            />\n          );\n\n        return null;\n      })}\n    </>\n  );\n};\n\nexport { ConfirmationListener as DynamicModal };\n","import React, { type ReactNode } from \"react\";\n\nimport type { ButtonColor } from \"src/Button\";\nimport { eventManager } from \"src/utils/eventManager\";\n\nimport type { ModalProps } from \"./Modal\";\nimport type { PromptModalProps } from \"./PromptModal\";\n\nexport type DontAskAgain = {\n  show: boolean;\n  text?: ReactNode;\n};\n\ntype TextOrNumber = string | number;\n\nexport function confirmation(\n  prompt: ReactNode,\n  onConfirm: (dontAskAgain?: boolean) => boolean | Promise<boolean>,\n  confirmType: ButtonColor = \"primary\",\n  confirmText = \"Confirm\",\n  dontAskAgain: DontAskAgain = { show: false }\n): Promise<void> {\n  if (!prompt) throw new Error(\"Prompt must be specified\");\n  if (!onConfirm || typeof onConfirm !== \"function\")\n    throw new Error(\"onConfirm must be specified and must be a function\");\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"confirmation\",\n      prompt: <p>{prompt}</p>,\n      onConfirm,\n      confirmText,\n      confirmType,\n      dontAskAgain,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype NotificationModal = (\n  title: ReactNode,\n  body: ReactNode,\n  buttonColor?: ButtonColor,\n  button?: ReactNode\n) => Promise<void>;\n\nexport const notificationModal: NotificationModal = (\n  title,\n  body,\n  buttonColor = \"light\",\n  button = \"OK\"\n): Promise<void> => {\n  if (!title || !body) throw new Error(\"Title and body must be specified\");\n\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"notification\",\n      title,\n      body,\n      buttonColor,\n      button,\n      onClosed: resolve,\n    });\n  });\n};\n\nexport { notificationModal as notification };\n\ntype initialOrOptions<T extends TextOrNumber> =\n  | Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n  | string;\n\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial?: string,\n  type?: string,\n  hint?: ReactNode\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  options?: Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial: initialOrOptions<T>,\n  type = \"text\",\n  hint = undefined\n): Promise<void> {\n  if (!title || !question)\n    throw new Error(\"Title and question must be specified\");\n\n  if (typeof initial === \"object\") {\n    return new Promise((resolve) =>\n      eventManager.emit(\"showModal\", {\n        modalType: \"prompt\",\n        title,\n        question,\n        cb,\n        options: initial,\n        onModalClose: resolve,\n      })\n    );\n  }\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"prompt\",\n      title,\n      initial,\n      type,\n      question,\n      cb,\n      hint,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype CloseHandler = () => void;\n\ninterface ModalButton {\n  color?: ButtonColor;\n  text: ReactNode;\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement>,\n    close: CloseHandler\n  ) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type PropsWithCloseModal<P = {}> = P & { close: () => void };\n\ntype FullBodyRender = (props: { close: () => void }) => ReactNode;\n\ninterface DynamicModalOptions {\n  title: ReactNode;\n  fullBody?: ReactNode | FullBodyRender;\n  body?: ReactNode;\n  buttons?: ModalButton[];\n  modalProps?: Partial<ModalProps>;\n}\n\ntype DynamicModalHandler = (options: DynamicModalOptions) => Promise<void>;\n\nexport const dynamicModal: DynamicModalHandler = ({\n  title,\n  fullBody = null,\n  body = null,\n  buttons = [],\n  modalProps = {},\n}): Promise<void> => {\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"dynamic\",\n      title,\n      fullBody,\n      body,\n      buttons,\n      modalProps,\n      onModalClose: resolve,\n    });\n  });\n};\n"],"names":["_extends","ModalHeader","React","className","children","props","div","ac","ModalFooter","forwardRef","ref","ModalBody","Modal","size","autoClose","animationDuration","closeIcon","title","closeHandle","left","transitionEvents","dialogProps","contentProps","maximize","isOpen","refElement","root","rootProvided","lockScroll","ancestorScroll","useState","maximized","setMaximized","useEffect","realSize","useMemo","modalContext","useFloatingContext","rootRef","current","undefined","nodeId","useFloatingNodeId","parentId","useFloatingParentNodeId","useFloating","open","onOpenChange","state","reference","floating","context","click","useClick","role","useRole","dismiss","useDismiss","enabled","bubbles","outsidePress","getFloatingProps","useInteractions","nodeRef","useRef","t","FloatingPortal","Transition","in","mountOnEnter","unmountOnExit","timeout","FloatingNode","id","FloatingOverlay","FloatingFocusManager","onClick","e","stopPropagation","If","condition","ConditionalWrapper","wrapper","Boolean","a","curr","span","h1","FloatingTree","Small","Large","Full","Fluid","Header","Body","Footer","ConfirmationModal","confirmType","confirmText","confirmHandle","prompt","dontAskAgain","show","doing","setDoing","dontAsk","setDontAsk","label","input","type","checked","onChange","target","text","Button","Light","color","disabled","PromptModal","question","onSave","cb","onClose","initial","hint","validate","val","setVal","useCallback","inpRef","focus","createElement","Input","value","onKeyUp","key","name","Fragment","data-balloon","data-balloon-length","data-balloon-pos","style","cursor","ConfirmationListener","modals","setModals","addModal","modal","nanoid","shown","hideModal","map","m","deleteModal","filter","onClosed","closeModal","setTimeout","eventManager","on","off","length","modalType","modalProps","onModalClose","fullBody","close","cloneElement","body","buttons","button","idx","buttonColor","options","r","onConfirm","confirmation","Error","Promise","resolve","emit","p","notificationModal","dynamicModal"],"mappings":"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"}