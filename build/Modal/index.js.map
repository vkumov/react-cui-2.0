{"version":3,"file":"index.js","sources":["../../src/Modal/Header.tsx","../../src/Modal/Footer.tsx","../../src/Modal/Body.tsx","../../src/Modal/ConfirmationModal.tsx","../../src/Modal/PromptModal.tsx","../../src/Modal/DynamicModal.tsx","../../src/Modal/ModalProvider.tsx","../../src/Modal/Modal.tsx","../../src/Modal/calls.tsx"],"sourcesContent":["import React, { type FC, type HTMLProps, type PropsWithChildren } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Header\n */\n\ntype ModalHeaderProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalHeader: FC<ModalHeaderProps> = ({\n  className = null,\n  children,\n  ...props\n}) => (\n  <div className={`modal__header${ac(className)}`} {...props}>\n    {children}\n  </div>\n);\n","import React, {\n  forwardRef,\n  type FC,\n  type HTMLProps,\n  type PropsWithChildren,\n} from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Footer\n */\n\ntype ModalFooterProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalFooter: FC<ModalFooterProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__footer${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { FC, HTMLProps, PropsWithChildren, forwardRef } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Body\n */\n\ntype ModalBodyProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalBody: FC<ModalBodyProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__body${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { type ChangeEvent, type FC, type ReactNode } from \"react\";\n\nimport { Button, type ButtonColor } from \"src/Button\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport type { DontAskAgain } from \"./calls\";\n\n/**\n * Confirmation Modal\n */\n\nexport type ConfirmationModalProps = {\n  isOpen?: boolean;\n  confirmHandle: (dontAskAgain?: boolean) => boolean | Promise<boolean>;\n  closeHandle: () => void;\n  prompt: ReactNode;\n  confirmType?: ButtonColor;\n  confirmText?: string;\n  autoClose?: boolean;\n  dontAskAgain?: DontAskAgain;\n};\n\nexport const ConfirmationModal: FC<ConfirmationModalProps> = ({\n  isOpen = false,\n  confirmType = \"primary\",\n  autoClose = true,\n  confirmText = \"Confirm\",\n  confirmHandle,\n  closeHandle,\n  prompt,\n  dontAskAgain = { show: false },\n}) => {\n  const [doing, setDoing] = React.useState(false);\n  const [dontAsk, setDontAsk] = React.useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={closeHandle}\n      autoClose={autoClose}\n      title=\"Confirmation\"\n    >\n      <ModalBody>\n        {prompt}\n        {dontAskAgain?.show ? (\n          <div className=\"form-group\">\n            <label className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                checked={dontAsk}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setDontAsk(e.target.checked);\n                }}\n              />\n              <span className=\"checkbox__input\"></span>\n              <span className=\"checkbox__label\">\n                {dontAskAgain.text || \"Don't ask again\"}\n              </span>\n            </label>\n          </div>\n        ) : null}\n      </ModalBody>\n      <ModalFooter>\n        <Button.Light onClick={closeHandle}>Close</Button.Light>\n        <Button\n          color={confirmType}\n          disabled={doing}\n          onClick={async () => {\n            setDoing(true);\n            if (await confirmHandle(dontAsk)) setDoing(false);\n          }}\n        >\n          {confirmText}\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React, {\n  type ChangeEvent,\n  type ComponentProps,\n  type KeyboardEvent,\n  type PropsWithChildren,\n  type ReactNode,\n} from \"react\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { Button } from \"src/Button\";\nimport { DisplayIf as If } from \"src/Conditional\";\nimport { Input } from \"src/Input\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\n\n/**\n * Prompt Modal\n */\n\nexport interface PromptModalProps<T extends string | number> {\n  title: ReactNode;\n  question: ReactNode;\n  onSave: (value: T) => void | Promise<void>;\n  onClose?: () => void;\n  initial?: T;\n  type?: string;\n  isOpen: boolean;\n  hint?: ReactNode;\n  validate?: ((value: T) => Promise<boolean>) | ((value: T) => boolean);\n  autoClose?: ComponentProps<typeof Modal>[\"autoClose\"];\n}\n\nexport function PromptModal<T extends string | number>({\n  title,\n  question,\n  onSave: cb,\n  onClose,\n  initial,\n  type,\n  isOpen,\n  hint,\n  validate,\n  autoClose,\n}: PropsWithChildren<PromptModalProps<T>>): JSX.Element {\n  const [val, setVal] = React.useState<T>(initial);\n  const [doing, setDoing] = React.useState(false);\n  const onSave = useEvent(async () => {\n    if (typeof validate === \"function\" && !(await validate(val))) return;\n\n    setDoing(true);\n    await cb(val);\n    setDoing(false);\n    onClose();\n  });\n\n  React.useEffect(() => setVal(initial), [initial]);\n\n  const inpRef = React.useRef<HTMLInputElement>(undefined);\n\n  React.useEffect(() => {\n    if (isOpen && inpRef.current) inpRef.current.focus();\n  }, [isOpen]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={onClose}\n      title={title}\n      autoClose={autoClose}\n    >\n      <ModalBody>\n        <Input\n          type={type}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setVal(e.target.value as T)\n          }\n          onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === \"Enter\") {\n              onSave();\n            }\n          }}\n          name=\"promptInput\"\n          value={val}\n          label={\n            <>\n              {question}\n              <If condition={!!hint && typeof hint === \"string\"}>\n                <span\n                  data-balloon={hint}\n                  data-balloon-length=\"large\"\n                  data-balloon-pos=\"up\"\n                >\n                  <span\n                    className=\"icon-question-circle qtr-margin-left\"\n                    style={{ cursor: \"help\" }}\n                  />\n                </span>\n              </If>\n            </>\n          }\n          ref={inpRef}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"light\" onClick={onClose} disabled={doing}>\n          Close\n        </Button>\n        <Button color=\"primary\" onClick={onSave} disabled={doing}>\n          OK\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { cloneElement, type ComponentProps, type FC } from \"react\";\nimport type { FloatingPortal } from \"@floating-ui/react\";\nimport { nanoid } from \"nanoid\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { Button } from \"src/Button\";\nimport { FloatingTreeWrapper } from \"src/FloatingProvider\";\nimport {\n  eventManager,\n  type EventModalProps as EMP,\n  type FullBodyProps,\n} from \"src/utils/eventManager\";\n\nimport { ModalBody } from \"./Body\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport { PromptModal } from \"./PromptModal\";\n\nexport type DynamicModalProps = {\n  portalRoot?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n  closeTimeout?: number;\n};\n\ntype EventModalProps = EMP & { id: string; shown: boolean };\n\ntype IsLastProps = { isLast: boolean };\n\nfunction assertUnreachable(x: never): null {\n  throw new Error(`Unexpected value ${x}`);\n}\n\nconst CustomWrapper: FC<\n  Extract<EventModalProps, { modalType: \"dynamic\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  fullBody,\n  body,\n  buttons,\n  modalProps,\n  id,\n  shown,\n  title,\n  close,\n  isLast,\n}) => {\n  return (\n    <Modal\n      {...modalProps}\n      key={id}\n      isOpen={shown}\n      closeHandle={close}\n      title={title}\n      autoClose={isLast ? modalProps?.autoClose : false}\n    >\n      {fullBody ? (\n        typeof fullBody === \"function\" ? (\n          fullBody({ close })\n        ) : (\n          cloneElement(fullBody, { close })\n        )\n      ) : (\n        <>\n          <ModalBody>{body}</ModalBody>\n          <ModalFooter>\n            {buttons.map((button, idx) => (\n              <Button\n                key={idx}\n                color={button.color || \"light\"}\n                onClick={(e) => {\n                  if (typeof button.onClick === \"function\")\n                    button.onClick(e, close);\n                  else close();\n                }}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </ModalFooter>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst NotificationWrapper: FC<\n  Extract<EventModalProps, { modalType: \"notification\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({ id, body, button, close, isLast, shown, buttonColor, title }) => {\n  return (\n    <Modal\n      key={id}\n      isOpen={shown}\n      closeIcon\n      closeHandle={close}\n      title={title}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    >\n      <ModalBody>{body}</ModalBody>\n      <ModalFooter>\n        <Button color={buttonColor || \"light\"} onClick={close}>\n          {button}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst PromptWrapper: FC<\n  Extract<EventModalProps, { modalType: \"prompt\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  cb,\n  close,\n  id,\n  isLast,\n  question,\n  shown,\n  hint,\n  initial,\n  options,\n  title,\n  type,\n}) => {\n  let validate: (typeof options)[\"validate\"];\n\n  if (typeof options !== \"undefined\") {\n    ({\n      initial = \"\",\n      type = \"text\",\n      hint = undefined,\n      validate = undefined,\n    } = options);\n  }\n\n  return (\n    <PromptModal\n      key={id}\n      isOpen={shown}\n      onClose={close}\n      onSave={cb}\n      title={title}\n      question={question}\n      initial={initial}\n      type={type}\n      hint={hint}\n      validate={validate}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    />\n  );\n};\n\nconst ConfirmationWrapper: FC<\n  Extract<EventModalProps, { modalType: \"confirmation\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  close,\n  id,\n  isLast,\n  onConfirm,\n  prompt,\n  shown,\n  confirmText,\n  confirmType,\n  dontAskAgain,\n}) => {\n  return (\n    <ConfirmationModal\n      key={id}\n      isOpen={shown}\n      prompt={prompt}\n      confirmHandle={async (dontAskAgain) => {\n        const r = await onConfirm(dontAskAgain);\n        if (r) close();\n        return true;\n      }}\n      closeHandle={close}\n      confirmText={confirmText}\n      confirmType={confirmType}\n      dontAskAgain={dontAskAgain}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    />\n  );\n};\n\nexport const DynamicModal: FC<DynamicModalProps> = ({\n  closeTimeout = 300,\n  ...props\n}) => {\n  const [modals, setModals] = React.useState<EventModalProps[]>([]);\n\n  const addModal = React.useCallback(\n    (modal: EventModalProps) =>\n      setModals((curr) => [...curr, { id: nanoid(), shown: true, ...modal }]),\n    []\n  );\n\n  const hideModal = React.useCallback((id: string) => {\n    setModals((curr) =>\n      curr.map((m) => (m.id === id ? { ...m, shown: false } : m))\n    );\n  }, []);\n\n  const deleteModal = useEvent((id: string) => {\n    setModals((curr) =>\n      curr.filter((m) => {\n        if (m.id === id && typeof m.onClosed === \"function\") m.onClosed();\n        return m.id !== id;\n      })\n    );\n  });\n\n  const closeModal = useEvent((id: string, cb?: () => unknown) => {\n    hideModal(id);\n    setTimeout(() => deleteModal(id), closeTimeout);\n    if (cb) cb();\n  });\n\n  React.useEffect(() => {\n    const cb = (m: EventModalProps) => addModal(m);\n    eventManager.on(\"showModal\", cb);\n    return () => {\n      eventManager.off(\"showModal\", cb);\n    };\n  }, [addModal]);\n\n  return (\n    <FloatingTreeWrapper\n      withPortal={true}\n      portalId={props.portalId ?? \"--cui-modal-portal\"}\n      portalRoot={props.portalRoot}\n    >\n      {modals.length > 0\n        ? modals.map((modal, idx) => {\n            switch (modal.modalType) {\n              case \"dynamic\":\n                return (\n                  <CustomWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"notification\":\n                return (\n                  <NotificationWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"prompt\":\n                return (\n                  <PromptWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"confirmation\":\n                return (\n                  <ConfirmationWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              default:\n                return assertUnreachable(modal);\n            }\n          })\n        : null}\n    </FloatingTreeWrapper>\n  );\n};\n\nexport { DynamicModal as ConfirmationListener };\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  type ComponentProps,\n  type FC,\n  type MutableRefObject,\n  type ReactNode,\n} from \"react\";\nimport type { FloatingPortal } from \"@floating-ui/react\";\n\nimport { DynamicModal } from \"./DynamicModal\";\n\ntype ModalContextProps = {\n  addRendered: (id: string) => void;\n  removeRendered: (id: string) => void;\n  lastRendered: () => string | null;\n  rendered: MutableRefObject<string[]>;\n};\n\nconst ModalContext = createContext<ModalContextProps | null>(null);\n\nexport type ModalProviderProps = {\n  portalRoot?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n  closeTimeout?: number;\n  children: ReactNode;\n};\n\nexport const useModalProvider = () => useContext(ModalContext);\n\nexport const ModalProvider: FC<ModalProviderProps> = ({\n  children,\n  closeTimeout,\n  portalId,\n  portalRoot,\n}) => {\n  const rendered = useRef<string[]>([]);\n  const addRendered = useCallback((id: string) => {\n    rendered.current = [...rendered.current, id];\n  }, []);\n  const removeRendered = useCallback((id: string) => {\n    rendered.current = rendered.current.filter((n) => n !== id);\n  }, []);\n  const lastRendered = useCallback(() => {\n    if (rendered.current.length > 0)\n      return rendered.current[rendered.current.length - 1];\n    return null;\n  }, []);\n\n  return (\n    <ModalContext.Provider\n      value={useMemo(\n        () => ({\n          rendered,\n          addRendered,\n          removeRendered,\n          lastRendered,\n        }),\n        [rendered, addRendered, removeRendered, lastRendered]\n      )}\n    >\n      {children}\n      <DynamicModal\n        closeTimeout={closeTimeout}\n        portalId={portalId}\n        portalRoot={portalRoot}\n      />\n    </ModalContext.Provider>\n  );\n};\n","import React, { type ComponentProps, type FC, type ReactNode } from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingOverlay,\n  FloatingPortal,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingTree,\n  useInteractions,\n  useRole,\n  type ReferenceType,\n  type UseDismissProps,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport {\n  FloatingProvider,\n  FloatingTreeWrapper,\n  useFloatingContext,\n} from \"src/FloatingProvider\";\nimport { useCustomDismiss } from \"src/hooks/useCustomDismiss\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { ModalHeader } from \"./Header\";\nimport sts from \"./Modal.module.scss\";\nimport { useModalProvider } from \"./ModalProvider\";\n\n/**\n * Modal\n */\n\nexport type ModalSize = \"small\" | \"default\" | \"large\" | \"full\" | \"fluid\";\n\nexport interface ModalProps {\n  size?: ModalSize;\n  closeIcon?: boolean;\n  closeHandle?: () => void;\n  children?: ReactNode;\n  title?: ReactNode;\n  isOpen: boolean;\n  autoClose?: boolean;\n  left?: boolean;\n  animationDuration?: ComponentProps<typeof Transition>[\"timeout\"];\n  dialogProps?: ComponentProps<\"div\">;\n  contentProps?: ComponentProps<\"div\">;\n  maximize?: boolean;\n  refElement?: ReferenceType;\n  root?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n  lockScroll?: ComponentProps<typeof FloatingOverlay>[\"lockScroll\"];\n  ancestorScroll?: UseDismissProps[\"ancestorScroll\"];\n}\n\ntype ModalSizes = {\n  Small: FC<ModalProps>;\n  Large: FC<ModalProps>;\n  Full: FC<ModalProps>;\n  Fluid: FC<ModalProps>;\n};\n\ntype ModalComponents = {\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n};\n\nexport const Modal: ModalSizes & ModalComponents & FC<ModalProps> = ({\n  size = null,\n  autoClose = true,\n  animationDuration = 250,\n  closeIcon = false,\n  title = null,\n  closeHandle = null,\n  left = false,\n  dialogProps = null,\n  contentProps = null,\n  maximize = false,\n  children,\n  isOpen,\n  refElement,\n  root: rootProvided,\n  lockScroll,\n  ancestorScroll,\n  portalId,\n}) => {\n  const [maximized, setMaximized] = React.useState(false);\n\n  const nodeId = useFloatingNodeId();\n  const modalCtx = useModalProvider();\n  const notifyCtx = useEvent((o: boolean) => {\n    if (!modalCtx) return;\n    if (o) modalCtx.addRendered(nodeId);\n    else modalCtx.removeRendered(nodeId);\n  });\n\n  React.useEffect(() => {\n    setMaximized(false);\n    notifyCtx(isOpen);\n    return () => notifyCtx(false);\n  }, [isOpen, notifyCtx]);\n  const realSize = React.useMemo(\n    () => (maximized ? \"full\" : size),\n    [maximized, size]\n  );\n\n  const { reference, floating, context } = useFloating({\n    open: isOpen,\n    onOpenChange: (state) => (!state ? void closeHandle() : void 0),\n    nodeId,\n  });\n  const floatingTree = useFloatingTree();\n\n  React.useEffect(() => {\n    if (refElement) reference(refElement);\n  }, [refElement]);\n\n  const outsidePress = useEvent((): boolean => {\n    if (!modalCtx) return true;\n    if (modalCtx.lastRendered() === nodeId) return true;\n    return false;\n  });\n\n  const { getFloatingProps } = useInteractions([\n    useClick(context),\n    useRole(context, { role: \"dialog\" }),\n    useDismiss(context, {\n      enabled: autoClose,\n      escapeKey: false,\n      ancestorScroll,\n      bubbles: false,\n      outsidePress: outsidePress,\n    }),\n    useCustomDismiss(context, { enabled: autoClose, modal: true }),\n  ]);\n\n  const overlayRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n\n  const { id, root } = useFloatingContext({\n    root: rootProvided,\n    portalId,\n    fallbackPortalId: \"--cui-modal-portal\",\n  });\n\n  return (\n    <FloatingTreeWrapper\n      withPortal={!floatingTree}\n      portalId={id}\n      portalRoot={root}\n    >\n      <FloatingNode id={nodeId}>\n        <Transition\n          in={isOpen}\n          mountOnEnter\n          unmountOnExit\n          appear\n          timeout={animationDuration}\n          nodeRef={overlayRef}\n        >\n          {(state) => (\n            <FloatingOverlay\n              className={cx(\"modal-backdrop\", {\n                \"modal-backdrop--before-close\": state === \"exiting\",\n              })}\n              lockScroll={lockScroll}\n              ref={overlayRef}\n              id={nodeId}\n            >\n              <FloatingFocusManager context={context} modal>\n                <div\n                  className={cx(\"modal\", \"modal_transitions\", {\n                    [`modal--${realSize}`]: Boolean(realSize),\n                    \"modal--left\": Boolean(left),\n                  })}\n                >\n                  <div\n                    ref={floating}\n                    {...getFloatingProps({\n                      ...dialogProps,\n                      className: cx(\"modal__dialog\", {\n                        [sts.modal__dialog__appear]: state === \"entering\",\n                        [sts.modal__dialog__open]: state === \"entered\",\n                        [dialogProps?.className]: dialogProps?.className,\n                      }),\n                    })}\n                  >\n                    <FloatingProvider rootRef={contentRef}>\n                      <div\n                        className=\"modal__content\"\n                        ref={contentRef}\n                        {...contentProps}\n                      >\n                        {!!(closeIcon && closeHandle) || maximize ? (\n                          <ConditionalWrapper\n                            condition={!!(closeIcon && closeHandle) && maximize}\n                            wrapper={<div className=\"modal__close\" />}\n                          >\n                            {Boolean(maximize) && (\n                              <a\n                                className={cx({\n                                  modal__close: !(closeIcon && closeHandle),\n                                  \"qtr-margin-right\": closeIcon && closeHandle,\n                                })}\n                                onClick={() => setMaximized((curr) => !curr)}\n                              >\n                                <span\n                                  className={\n                                    maximized\n                                      ? \"icon-minimize\"\n                                      : \"icon-maximize\"\n                                  }\n                                />\n                              </a>\n                            )}\n                            {Boolean(closeIcon && closeHandle) && (\n                              <a\n                                className={!maximize ? \"modal__close\" : \"\"}\n                                onClick={closeHandle}\n                              >\n                                <span className=\"icon-close\" />\n                              </a>\n                            )}\n                          </ConditionalWrapper>\n                        ) : null}\n                        {Boolean(title) && (\n                          <ModalHeader>\n                            <h1 className=\"modal__title\">{title}</h1>\n                          </ModalHeader>\n                        )}\n                        {children}\n                      </div>\n                    </FloatingProvider>\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            </FloatingOverlay>\n          )}\n        </Transition>\n      </FloatingNode>\n    </FloatingTreeWrapper>\n  );\n};\n\nModal.Small = (props) => <Modal {...props} size=\"small\" />;\nModal.Large = (props) => <Modal {...props} size=\"large\" />;\nModal.Full = (props) => <Modal {...props} size=\"full\" />;\nModal.Fluid = (props) => <Modal {...props} size=\"fluid\" />;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n","import React, { type ReactNode } from \"react\";\n\nimport type { ButtonColor } from \"src/Button\";\nimport { EventModalProps, eventManager } from \"src/utils/eventManager\";\n\nimport type { ModalProps } from \"./Modal\";\nimport type { PromptModalProps } from \"./PromptModal\";\n\nexport type DontAskAgain = {\n  show: boolean;\n  text?: ReactNode;\n};\n\ntype TextOrNumber = string | number;\n\nexport function confirmation(\n  prompt: ReactNode,\n  onConfirm: (dontAskAgain?: boolean) => boolean | Promise<boolean>,\n  confirmType: ButtonColor = \"primary\",\n  confirmText = \"Confirm\",\n  dontAskAgain: DontAskAgain = { show: false }\n): Promise<void> {\n  if (!prompt) throw new Error(\"Prompt must be specified\");\n  if (!onConfirm || typeof onConfirm !== \"function\")\n    throw new Error(\"onConfirm must be specified and must be a function\");\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"confirmation\",\n      prompt: <p>{prompt}</p>,\n      onConfirm,\n      confirmText,\n      confirmType,\n      dontAskAgain,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype NotificationModal = (\n  title: ReactNode,\n  body: ReactNode,\n  buttonColor?: ButtonColor,\n  button?: ReactNode\n) => Promise<void>;\n\nexport const notificationModal: NotificationModal = (\n  title,\n  body,\n  buttonColor = \"light\",\n  button = \"OK\"\n): Promise<void> => {\n  if (!title || !body) throw new Error(\"Title and body must be specified\");\n\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"notification\",\n      title,\n      body,\n      buttonColor,\n      button,\n      onClosed: resolve,\n    });\n  });\n};\n\nexport { notificationModal as notification };\n\ntype initialOrOptions<T extends TextOrNumber> =\n  | Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n  | string;\n\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial?: string,\n  type?: string,\n  hint?: ReactNode\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  options?: Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial: initialOrOptions<T>,\n  type = \"text\",\n  hint = undefined\n): Promise<void> {\n  if (!title || !question)\n    throw new Error(\"Title and question must be specified\");\n\n  if (typeof initial === \"object\") {\n    return new Promise((resolve) =>\n      eventManager.emit(\"showModal\", {\n        modalType: \"prompt\",\n        title,\n        question,\n        cb,\n        options: initial,\n        onModalClose: resolve,\n      })\n    );\n  }\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"prompt\",\n      title,\n      initial,\n      type,\n      question,\n      cb,\n      hint,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype CloseHandler = () => void;\n\ninterface ModalButton {\n  color?: ButtonColor;\n  text: ReactNode;\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement>,\n    close: CloseHandler\n  ) => void;\n}\n\nexport type PropsWithCloseModal<P = {}> = P & { close: () => void };\n\ninterface DynamicModalOptions {\n  title: ReactNode;\n  fullBody?: Extract<EventModalProps, { modalType: \"dynamic\" }>[\"fullBody\"];\n  body?: ReactNode;\n  buttons?: ModalButton[];\n  modalProps?: Partial<ModalProps>;\n}\n\ntype DynamicModalHandler = (options: DynamicModalOptions) => Promise<void>;\n\nexport const dynamicModal: DynamicModalHandler = ({\n  title,\n  fullBody = null,\n  body = null,\n  buttons = [],\n  modalProps = {},\n}): Promise<void> => {\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"dynamic\",\n      title,\n      fullBody,\n      body,\n      buttons,\n      modalProps,\n      onModalClose: resolve,\n    });\n  });\n};\n"],"names":["ModalHeader","className","children","props","jsx","ac","ModalFooter","forwardRef","ref","ModalBody","ConfirmationModal","isOpen","confirmType","autoClose","confirmText","confirmHandle","closeHandle","prompt","dontAskAgain","doing","setDoing","React","dontAsk","setDontAsk","jsxs","Modal","e","Button","PromptModal","title","question","cb","onClose","initial","type","hint","validate","val","setVal","onSave","useEvent","inpRef","Input","Fragment","If","assertUnreachable","x","CustomWrapper","fullBody","body","buttons","modalProps","id","shown","close","isLast","createElement","cloneElement","button","idx","NotificationWrapper","buttonColor","PromptWrapper","options","ConfirmationWrapper","onConfirm","DynamicModal","closeTimeout","_a","modals","setModals","addModal","modal","curr","nanoid","hideModal","m","deleteModal","closeModal","eventManager","FloatingTreeWrapper","ModalContext","createContext","useModalProvider","useContext","ModalProvider","portalId","portalRoot","rendered","useRef","addRendered","useCallback","removeRendered","n","lastRendered","useMemo","size","animationDuration","closeIcon","left","dialogProps","contentProps","maximize","refElement","rootProvided","lockScroll","ancestorScroll","maximized","setMaximized","nodeId","useFloatingNodeId","modalCtx","notifyCtx","o","realSize","reference","floating","context","useFloating","state","floatingTree","useFloatingTree","outsidePress","getFloatingProps","useInteractions","useClick","useRole","useDismiss","useCustomDismiss","overlayRef","contentRef","root","useFloatingContext","FloatingNode","Transition","FloatingOverlay","cx","FloatingFocusManager","sts","FloatingProvider","ConditionalWrapper","confirmation","resolve","notificationModal","dynamicModal"],"mappings":"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"}