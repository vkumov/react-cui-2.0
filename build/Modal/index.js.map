{"version":3,"file":"index.js","sources":["../../src/Modal/Header.tsx","../../src/Modal/Footer.tsx","../../src/Modal/Body.tsx","../../src/Modal/Modal.tsx","../../src/Modal/ConfirmationModal.tsx","../../src/Modal/PromptModal.tsx","../../src/Modal/DynamicModal.tsx","../../src/Modal/calls.tsx"],"sourcesContent":["import React, { type FC, type HTMLProps, type PropsWithChildren } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Header\n */\n\ntype ModalHeaderProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalHeader: FC<ModalHeaderProps> = ({\n  className = null,\n  children,\n  ...props\n}) => (\n  <div className={`modal__header${ac(className)}`} {...props}>\n    {children}\n  </div>\n);\n","import React, {\n  forwardRef,\n  type FC,\n  type HTMLProps,\n  type PropsWithChildren,\n} from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Footer\n */\n\ntype ModalFooterProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalFooter: FC<ModalFooterProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__footer${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { FC, HTMLProps, PropsWithChildren, forwardRef } from \"react\";\n\nimport { appendClass as ac } from \"src/utils\";\n\n/**\n * Modal Body\n */\n\ntype ModalBodyProps = PropsWithChildren<{\n  className?: string;\n}> &\n  HTMLProps<HTMLDivElement>;\n\nexport const ModalBody: FC<ModalBodyProps> = forwardRef(\n  ({ className = null, children, ...props }, ref) => (\n    <div className={`modal__body${ac(className)}`} {...props} ref={ref}>\n      {children}\n    </div>\n  )\n);\n","import React, { type ComponentProps, type FC, type ReactNode } from \"react\";\nimport {\n  FloatingFocusManager,\n  FloatingNode,\n  FloatingOverlay,\n  FloatingPortal,\n  useClick,\n  useDismiss,\n  useFloating,\n  useFloatingNodeId,\n  useFloatingTree,\n  useInteractions,\n  useRole,\n  type ReferenceType,\n} from \"@floating-ui/react\";\nimport cx from \"classnames\";\nimport { Transition } from \"react-transition-group\";\n\nimport { ConditionalWrapper } from \"src/Conditional\";\nimport {\n  FloatingProvider,\n  FloatingTreeWrapper,\n  useFloatingContext,\n} from \"src/FloatingProvider\";\nimport { useCustomDismiss } from \"src/hooks/useCustomDismiss\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { ModalHeader } from \"./Header\";\nimport sts from \"./Modal.module.scss\";\n\n/**\n * Modal\n */\n\nexport type ModalSize = \"small\" | \"default\" | \"large\" | \"full\" | \"fluid\";\n\nexport interface ModalProps {\n  size?: ModalSize;\n  closeIcon?: boolean;\n  closeHandle?: () => void;\n  children?: ReactNode;\n  title?: ReactNode;\n  isOpen: boolean;\n  autoClose?: boolean;\n  left?: boolean;\n  animationDuration?: ComponentProps<typeof Transition>[\"timeout\"];\n  dialogProps?: React.ComponentProps<\"div\">;\n  contentProps?: React.ComponentProps<\"div\">;\n  maximize?: boolean;\n  refElement?: ReferenceType;\n  root?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  portalId?: ComponentProps<typeof FloatingPortal>[\"id\"];\n  lockScroll?: ComponentProps<typeof FloatingOverlay>[\"lockScroll\"];\n  ancestorScroll?: Parameters<typeof useDismiss>[1][\"ancestorScroll\"];\n}\n\ntype ModalSizes = {\n  Small: FC<ModalProps>;\n  Large: FC<ModalProps>;\n  Full: FC<ModalProps>;\n  Fluid: FC<ModalProps>;\n};\n\ntype ModalComponents = {\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n};\n\nexport const Modal: ModalSizes & ModalComponents & FC<ModalProps> = ({\n  size = null,\n  autoClose = true,\n  animationDuration = 250,\n  closeIcon = false,\n  title = null,\n  closeHandle = null,\n  left = false,\n  dialogProps = null,\n  contentProps = null,\n  maximize = false,\n  children,\n  isOpen,\n  refElement,\n  root: rootProvided,\n  lockScroll,\n  ancestorScroll,\n  portalId,\n}) => {\n  const [maximized, setMaximized] = React.useState(false);\n\n  React.useEffect(() => setMaximized(false), [isOpen]);\n  const realSize = React.useMemo(\n    () => (maximized ? \"full\" : size),\n    [maximized, size]\n  );\n\n  const nodeId = useFloatingNodeId();\n  // const parentId = useFloatingParentNodeId();\n  const { reference, floating, context } = useFloating({\n    open: isOpen,\n    onOpenChange: (state) => (!state ? void closeHandle() : void 0),\n    nodeId,\n  });\n  const floatingTree = useFloatingTree();\n\n  React.useEffect(() => {\n    if (refElement) reference(refElement);\n  }, [refElement]);\n\n  const { getFloatingProps } = useInteractions([\n    useClick(context),\n    useRole(context, { role: \"dialog\" }),\n    useDismiss(context, {\n      enabled: autoClose,\n      escapeKey: false,\n      ancestorScroll,\n      bubbles: false,\n      outsidePress: true,\n    }),\n    useCustomDismiss(context, { enabled: autoClose }),\n  ]);\n\n  const overlayRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n\n  const { id, root } = useFloatingContext({\n    root: rootProvided,\n    portalId,\n    fallbackPortalId: \"--cui-modal-portal\",\n  });\n\n  return (\n    <FloatingTreeWrapper\n      withPortal={!floatingTree}\n      portalId={id}\n      portalRoot={root}\n    >\n      <FloatingNode id={nodeId}>\n        <Transition\n          in={isOpen}\n          mountOnEnter\n          unmountOnExit\n          appear\n          timeout={animationDuration}\n          nodeRef={overlayRef}\n        >\n          {(state) => (\n            <FloatingOverlay\n              className={cx(\"modal-backdrop\", {\n                \"modal-backdrop--before-close\": state === \"exiting\",\n              })}\n              lockScroll={lockScroll}\n              ref={overlayRef}\n              id={nodeId}\n            >\n              <FloatingFocusManager context={context} modal>\n                <div\n                  className={cx(\"modal\", \"modal_transitions\", {\n                    [`modal--${realSize}`]: Boolean(realSize),\n                    \"modal--left\": Boolean(left),\n                  })}\n                >\n                  <div\n                    ref={floating}\n                    {...getFloatingProps({\n                      ...dialogProps,\n                      className: cx(\"modal__dialog\", {\n                        [sts.modal__dialog__appear]: state === \"entering\",\n                        [sts.modal__dialog__open]: state === \"entered\",\n                        [dialogProps?.className]: dialogProps?.className,\n                      }),\n                    })}\n                  >\n                    <FloatingProvider rootRef={contentRef}>\n                      <div\n                        className=\"modal__content\"\n                        ref={contentRef}\n                        {...contentProps}\n                      >\n                        {!!(closeIcon && closeHandle) || maximize ? (\n                          <ConditionalWrapper\n                            condition={!!(closeIcon && closeHandle) && maximize}\n                            wrapper={<div className=\"modal__close\" />}\n                          >\n                            {Boolean(maximize) && (\n                              <a\n                                className={cx({\n                                  modal__close: !(closeIcon && closeHandle),\n                                  \"qtr-margin-right\": closeIcon && closeHandle,\n                                })}\n                                onClick={() => setMaximized((curr) => !curr)}\n                              >\n                                <span\n                                  className={\n                                    maximized\n                                      ? \"icon-minimize\"\n                                      : \"icon-maximize\"\n                                  }\n                                />\n                              </a>\n                            )}\n                            {Boolean(closeIcon && closeHandle) && (\n                              <a\n                                className={!maximize ? \"modal__close\" : \"\"}\n                                onClick={closeHandle}\n                              >\n                                <span className=\"icon-close\" />\n                              </a>\n                            )}\n                          </ConditionalWrapper>\n                        ) : null}\n                        {Boolean(title) && (\n                          <ModalHeader>\n                            <h1 className=\"modal__title\">{title}</h1>\n                          </ModalHeader>\n                        )}\n                        {children}\n                      </div>\n                    </FloatingProvider>\n                  </div>\n                </div>\n              </FloatingFocusManager>\n            </FloatingOverlay>\n          )}\n        </Transition>\n      </FloatingNode>\n    </FloatingTreeWrapper>\n  );\n};\n\nModal.Small = (props) => <Modal {...props} size=\"small\" />;\nModal.Large = (props) => <Modal {...props} size=\"large\" />;\nModal.Full = (props) => <Modal {...props} size=\"full\" />;\nModal.Fluid = (props) => <Modal {...props} size=\"fluid\" />;\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\n","import React, { type ChangeEvent, type FC, type ReactNode } from \"react\";\n\nimport { Button, type ButtonColor } from \"src/Button\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport type { DontAskAgain } from \"./calls\";\n\n/**\n * Confirmation Modal\n */\n\nexport type ConfirmationModalProps = {\n  isOpen?: boolean;\n  confirmHandle: (dontAskAgain?: boolean) => boolean | Promise<boolean>;\n  closeHandle: () => void;\n  prompt: ReactNode;\n  confirmType?: ButtonColor;\n  confirmText?: string;\n  autoClose?: boolean;\n  dontAskAgain?: DontAskAgain;\n};\n\nexport const ConfirmationModal: FC<ConfirmationModalProps> = ({\n  isOpen = false,\n  confirmType = \"primary\",\n  autoClose = true,\n  confirmText = \"Confirm\",\n  confirmHandle,\n  closeHandle,\n  prompt,\n  dontAskAgain = { show: false },\n}) => {\n  const [doing, setDoing] = React.useState(false);\n  const [dontAsk, setDontAsk] = React.useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={closeHandle}\n      autoClose={autoClose}\n      title=\"Confirmation\"\n    >\n      <ModalBody>\n        {prompt}\n        {dontAskAgain?.show ? (\n          <div className=\"form-group\">\n            <label className=\"checkbox\">\n              <input\n                type=\"checkbox\"\n                checked={dontAsk}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setDontAsk(e.target.checked);\n                }}\n              />\n              <span className=\"checkbox__input\"></span>\n              <span className=\"checkbox__label\">\n                {dontAskAgain.text || \"Don't ask again\"}\n              </span>\n            </label>\n          </div>\n        ) : null}\n      </ModalBody>\n      <ModalFooter>\n        <Button.Light onClick={closeHandle}>Close</Button.Light>\n        <Button\n          color={confirmType}\n          disabled={doing}\n          onClick={async () => {\n            setDoing(true);\n            if (await confirmHandle(dontAsk)) setDoing(false);\n          }}\n        >\n          {confirmText}\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React, {\n  type ChangeEvent,\n  type ComponentProps,\n  type KeyboardEvent,\n  type PropsWithChildren,\n  type ReactNode,\n} from \"react\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { Button } from \"src/Button\";\nimport { DisplayIf as If } from \"src/Conditional\";\nimport { Input } from \"src/Input\";\n\nimport { ModalBody } from \"./Body\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\n\n/**\n * Prompt Modal\n */\n\nexport interface PromptModalProps<T extends string | number> {\n  title: ReactNode;\n  question: ReactNode;\n  onSave: (value: T) => void | Promise<void>;\n  onClose?: () => void;\n  initial?: T;\n  type?: string;\n  isOpen: boolean;\n  hint?: ReactNode;\n  validate?: ((value: T) => Promise<boolean>) | ((value: T) => boolean);\n  autoClose?: ComponentProps<typeof Modal>[\"autoClose\"];\n}\n\nexport function PromptModal<T extends string | number>({\n  title,\n  question,\n  onSave: cb,\n  onClose,\n  initial,\n  type,\n  isOpen,\n  hint,\n  validate,\n  autoClose,\n}: PropsWithChildren<PromptModalProps<T>>): JSX.Element {\n  const [val, setVal] = React.useState<T>(initial);\n  const [doing, setDoing] = React.useState(false);\n  const onSave = useEvent(async () => {\n    if (typeof validate === \"function\" && !(await validate(val))) return;\n\n    setDoing(true);\n    await cb(val);\n    setDoing(false);\n    onClose();\n  });\n\n  React.useEffect(() => setVal(initial), [initial]);\n\n  const inpRef = React.useRef<HTMLInputElement>(undefined);\n\n  React.useEffect(() => {\n    if (isOpen && inpRef.current) inpRef.current.focus();\n  }, [isOpen]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      closeIcon\n      closeHandle={onClose}\n      title={title}\n      autoClose={autoClose}\n    >\n      <ModalBody>\n        <Input\n          type={type}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setVal(e.target.value as T)\n          }\n          onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === \"Enter\") {\n              onSave();\n            }\n          }}\n          name=\"promptInput\"\n          value={val}\n          label={\n            <>\n              {question}\n              <If condition={!!hint && typeof hint === \"string\"}>\n                <span\n                  data-balloon={hint}\n                  data-balloon-length=\"large\"\n                  data-balloon-pos=\"up\"\n                >\n                  <span\n                    className=\"icon-question-circle qtr-margin-left\"\n                    style={{ cursor: \"help\" }}\n                  />\n                </span>\n              </If>\n            </>\n          }\n          ref={inpRef}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"light\" onClick={onClose} disabled={doing}>\n          Close\n        </Button>\n        <Button color=\"primary\" onClick={onSave} disabled={doing}>\n          OK\n          {doing ? (\n            <span className=\"icon-animation spin qtr-margin-left\" />\n          ) : null}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { cloneElement, type ComponentProps, type FC } from \"react\";\nimport type { FloatingPortal } from \"@floating-ui/react\";\nimport { nanoid } from \"nanoid\";\nimport useEvent from \"react-use-event-hook\";\n\nimport { Button } from \"src/Button\";\nimport { FloatingTreeWrapper } from \"src/FloatingProvider\";\nimport {\n  eventManager,\n  type EventModalProps as EMP,\n  type FullBodyProps,\n} from \"src/utils/eventManager\";\n\nimport { ModalBody } from \"./Body\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { ModalFooter } from \"./Footer\";\nimport { Modal } from \"./Modal\";\nimport { PromptModal } from \"./PromptModal\";\n\nexport type DynamicModalProps = {\n  root?: ComponentProps<typeof FloatingPortal>[\"root\"];\n  id?: ComponentProps<typeof FloatingPortal>[\"id\"];\n  closeTimeout?: number;\n};\n\ntype EventModalProps = EMP & { id: string; shown: boolean };\n\ntype IsLastProps = { isLast: boolean };\n\nfunction assertUnreachable(x: never): null {\n  throw new Error(`Unexpected value ${x}`);\n}\n\nconst CustomWrapper: FC<\n  Extract<EventModalProps, { modalType: \"dynamic\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  fullBody,\n  body,\n  buttons,\n  modalProps,\n  id,\n  shown,\n  title,\n  close,\n  isLast,\n}) => {\n  return (\n    <Modal\n      {...modalProps}\n      key={id}\n      isOpen={shown}\n      closeHandle={close}\n      title={title}\n      autoClose={isLast ? modalProps?.autoClose : false}\n    >\n      {fullBody ? (\n        typeof fullBody === \"function\" ? (\n          fullBody({ close })\n        ) : (\n          cloneElement(fullBody, { close })\n        )\n      ) : (\n        <>\n          <ModalBody>{body}</ModalBody>\n          <ModalFooter>\n            {buttons.map((button, idx) => (\n              <Button\n                key={idx}\n                color={button.color || \"light\"}\n                onClick={(e) => {\n                  if (typeof button.onClick === \"function\")\n                    button.onClick(e, close);\n                  else close();\n                }}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </ModalFooter>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst NotificationWrapper: FC<\n  Extract<EventModalProps, { modalType: \"notification\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({ id, body, button, close, isLast, shown, buttonColor, title }) => {\n  return (\n    <Modal\n      key={id}\n      isOpen={shown}\n      closeIcon\n      closeHandle={close}\n      title={title}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    >\n      <ModalBody>{body}</ModalBody>\n      <ModalFooter>\n        <Button color={buttonColor || \"light\"} onClick={close}>\n          {button}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst PromptWrapper: FC<\n  Extract<EventModalProps, { modalType: \"prompt\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  cb,\n  close,\n  id,\n  isLast,\n  question,\n  shown,\n  hint,\n  initial,\n  options,\n  title,\n  type,\n}) => {\n  let validate: (typeof options)[\"validate\"];\n\n  if (typeof options !== \"undefined\") {\n    ({\n      initial = \"\",\n      type = \"text\",\n      hint = undefined,\n      validate = undefined,\n    } = options);\n  }\n\n  return (\n    <PromptModal\n      key={id}\n      isOpen={shown}\n      onClose={close}\n      onSave={cb}\n      title={title}\n      question={question}\n      initial={initial}\n      type={type}\n      hint={hint}\n      validate={validate}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    />\n  );\n};\n\nconst ConfirmationWrapper: FC<\n  Extract<EventModalProps, { modalType: \"confirmation\" }> &\n    FullBodyProps &\n    IsLastProps\n> = ({\n  close,\n  id,\n  isLast,\n  onConfirm,\n  prompt,\n  shown,\n  confirmText,\n  confirmType,\n  dontAskAgain,\n}) => {\n  return (\n    <ConfirmationModal\n      key={id}\n      isOpen={shown}\n      prompt={prompt}\n      confirmHandle={async (dontAskAgain) => {\n        const r = await onConfirm(dontAskAgain);\n        if (r) close();\n        return true;\n      }}\n      closeHandle={close}\n      confirmText={confirmText}\n      confirmType={confirmType}\n      dontAskAgain={dontAskAgain}\n      autoClose={isLast ? undefined : false} // override default behavior only if it's not last rendered modal\n    />\n  );\n};\n\nexport const DynamicModal: FC<DynamicModalProps> = ({\n  closeTimeout = 300,\n  ...props\n}) => {\n  const [modals, setModals] = React.useState<EventModalProps[]>([]);\n\n  const addModal = React.useCallback(\n    (modal: EventModalProps) =>\n      setModals((curr) => [...curr, { id: nanoid(), shown: true, ...modal }]),\n    []\n  );\n\n  const hideModal = React.useCallback((id: string) => {\n    setModals((curr) =>\n      curr.map((m) => (m.id === id ? { ...m, shown: false } : m))\n    );\n  }, []);\n\n  const deleteModal = useEvent((id: string) => {\n    setModals((curr) =>\n      curr.filter((m) => {\n        if (m.id === id && typeof m.onClosed === \"function\") m.onClosed();\n        return m.id !== id;\n      })\n    );\n  });\n\n  const closeModal = useEvent((id: string, cb?: () => unknown) => {\n    hideModal(id);\n    setTimeout(() => deleteModal(id), closeTimeout);\n    if (cb) cb();\n  });\n\n  React.useEffect(() => {\n    const cb = (m: EventModalProps) => addModal(m);\n    eventManager.on(\"showModal\", cb);\n    return () => {\n      eventManager.off(\"showModal\", cb);\n    };\n  }, [addModal]);\n\n  return (\n    <FloatingTreeWrapper\n      withPortal={true}\n      portalId={props.id}\n      portalRoot={props.root}\n    >\n      {modals.length > 0\n        ? modals.map((modal, idx) => {\n            switch (modal.modalType) {\n              case \"dynamic\":\n                return (\n                  <CustomWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"notification\":\n                return (\n                  <NotificationWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"prompt\":\n                return (\n                  <PromptWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              case \"confirmation\":\n                return (\n                  <ConfirmationWrapper\n                    {...modal}\n                    key={modal.id}\n                    close={() => closeModal(modal.id, modal.onModalClose)}\n                    isLast={idx === modals.length - 1}\n                  />\n                );\n\n              default:\n                return assertUnreachable(modal);\n            }\n          })\n        : null}\n    </FloatingTreeWrapper>\n  );\n};\n\nexport { DynamicModal as ConfirmationListener };\n","import React, { type ReactNode } from \"react\";\n\nimport type { ButtonColor } from \"src/Button\";\nimport { EventModalProps, eventManager } from \"src/utils/eventManager\";\n\nimport type { ModalProps } from \"./Modal\";\nimport type { PromptModalProps } from \"./PromptModal\";\n\nexport type DontAskAgain = {\n  show: boolean;\n  text?: ReactNode;\n};\n\ntype TextOrNumber = string | number;\n\nexport function confirmation(\n  prompt: ReactNode,\n  onConfirm: (dontAskAgain?: boolean) => boolean | Promise<boolean>,\n  confirmType: ButtonColor = \"primary\",\n  confirmText = \"Confirm\",\n  dontAskAgain: DontAskAgain = { show: false }\n): Promise<void> {\n  if (!prompt) throw new Error(\"Prompt must be specified\");\n  if (!onConfirm || typeof onConfirm !== \"function\")\n    throw new Error(\"onConfirm must be specified and must be a function\");\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"confirmation\",\n      prompt: <p>{prompt}</p>,\n      onConfirm,\n      confirmText,\n      confirmType,\n      dontAskAgain,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype NotificationModal = (\n  title: ReactNode,\n  body: ReactNode,\n  buttonColor?: ButtonColor,\n  button?: ReactNode\n) => Promise<void>;\n\nexport const notificationModal: NotificationModal = (\n  title,\n  body,\n  buttonColor = \"light\",\n  button = \"OK\"\n): Promise<void> => {\n  if (!title || !body) throw new Error(\"Title and body must be specified\");\n\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"notification\",\n      title,\n      body,\n      buttonColor,\n      button,\n      onClosed: resolve,\n    });\n  });\n};\n\nexport { notificationModal as notification };\n\ntype initialOrOptions<T extends TextOrNumber> =\n  | Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n  | string;\n\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial?: string,\n  type?: string,\n  hint?: ReactNode\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  options?: Pick<PromptModalProps<T>, \"initial\" | \"type\" | \"hint\" | \"validate\">\n): Promise<void>;\nexport function prompt<T extends TextOrNumber>(\n  title: string,\n  question: ReactNode,\n  cb: (value: T) => void | Promise<void>,\n  initial: initialOrOptions<T>,\n  type = \"text\",\n  hint = undefined\n): Promise<void> {\n  if (!title || !question)\n    throw new Error(\"Title and question must be specified\");\n\n  if (typeof initial === \"object\") {\n    return new Promise((resolve) =>\n      eventManager.emit(\"showModal\", {\n        modalType: \"prompt\",\n        title,\n        question,\n        cb,\n        options: initial,\n        onModalClose: resolve,\n      })\n    );\n  }\n\n  return new Promise((resolve) =>\n    eventManager.emit(\"showModal\", {\n      modalType: \"prompt\",\n      title,\n      initial,\n      type,\n      question,\n      cb,\n      hint,\n      onModalClose: resolve,\n    })\n  );\n}\n\ntype CloseHandler = () => void;\n\ninterface ModalButton {\n  color?: ButtonColor;\n  text: ReactNode;\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement>,\n    close: CloseHandler\n  ) => void;\n}\n\nexport type PropsWithCloseModal<P = {}> = P & { close: () => void };\n\ninterface DynamicModalOptions {\n  title: ReactNode;\n  fullBody?: Extract<EventModalProps, { modalType: \"dynamic\" }>[\"fullBody\"];\n  body?: ReactNode;\n  buttons?: ModalButton[];\n  modalProps?: Partial<ModalProps>;\n}\n\ntype DynamicModalHandler = (options: DynamicModalOptions) => Promise<void>;\n\nexport const dynamicModal: DynamicModalHandler = ({\n  title,\n  fullBody = null,\n  body = null,\n  buttons = [],\n  modalProps = {},\n}): Promise<void> => {\n  return new Promise((resolve) => {\n    eventManager.emit(\"showModal\", {\n      modalType: \"dynamic\",\n      title,\n      fullBody,\n      body,\n      buttons,\n      modalProps,\n      onModalClose: resolve,\n    });\n  });\n};\n"],"names":["ModalHeader","className","children","props","React","ac","ModalFooter","forwardRef","ref","ModalBody","Modal","size","autoClose","animationDuration","closeIcon","title","closeHandle","left","dialogProps","contentProps","maximize","isOpen","refElement","rootProvided","lockScroll","ancestorScroll","portalId","maximized","setMaximized","realSize","nodeId","useFloatingNodeId","reference","floating","context","useFloating","state","floatingTree","useFloatingTree","getFloatingProps","useInteractions","useClick","useRole","useDismiss","useCustomDismiss","overlayRef","contentRef","id","root","useFloatingContext","FloatingTreeWrapper","FloatingNode","Transition","FloatingOverlay","cx","FloatingFocusManager","sts","FloatingProvider","ConditionalWrapper","curr","ConfirmationModal","confirmType","confirmText","confirmHandle","prompt","dontAskAgain","doing","setDoing","dontAsk","setDontAsk","e","Button","PromptModal","question","cb","onClose","initial","type","hint","validate","val","setVal","onSave","useEvent","inpRef","Input","If","assertUnreachable","x","CustomWrapper","fullBody","body","buttons","modalProps","shown","close","isLast","cloneElement","button","idx","NotificationWrapper","buttonColor","PromptWrapper","options","ConfirmationWrapper","onConfirm","DynamicModal","closeTimeout","modals","setModals","addModal","modal","nanoid","hideModal","m","deleteModal","closeModal","eventManager","confirmation","resolve","notificationModal","dynamicModal"],"mappings":"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"}