{"version":3,"file":"helpers.js","sources":["../../src/ReactSelect/helpers.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport type { GroupBase, OptionsOrGroups } from \"react-select\";\n\nexport type Option<V = string> = { label?: ReactNode; value: V };\nexport type OptionGroup<O> = GroupBase<O>;\n\nexport function isGrouped<O extends { value: any }>(\n  v: O | OptionGroup<O>\n): v is OptionGroup<O> {\n  return \"options\" in v;\n}\n\nexport function findOption<V, O extends { value: V } = Option<V>>(\n  value: V,\n  options: readonly (O | OptionGroup<O>)[]\n): O {\n  let found: O;\n  for (const it of options) {\n    if (isGrouped<O>(it)) found = findOption<V, O>(value, it.options);\n    else found = it.value === value ? it : null;\n\n    if (found) return found;\n  }\n}\n\nexport function findOptions<V, O extends { value: V } = Option<V>>(\n  values: V[],\n  options: OptionsOrGroups<O, GroupBase<O>>\n): O[] {\n  const found: O[] = [];\n\n  if (!Array.isArray(values) || values.length <= 0) return found;\n\n  for (const v of values) {\n    const fv = findOption(v, options);\n    if (fv) found.push(fv);\n    else found.push({ value: v, label: v } as any);\n  }\n  return found;\n}\n"],"names":["isGrouped","v","findOption","value","options","found","it","findOptions","values","fv"],"mappings":"AAMO,SAASA,EACdC,EACqB,CACrB,MAAO,YAAaA,CACtB,CAEO,SAASC,EACdC,EACAC,EACG,CACH,IAAIC,EACJ,UAAWC,KAAMF,EAIf,GAHIJ,EAAaM,CAAE,EAAGD,EAAQH,EAAiBC,EAAOG,EAAG,OAAO,EAC3DD,EAAQC,EAAG,QAAUH,EAAQG,EAAK,KAEnCD,EAAO,OAAOA,CAEtB,CAEO,SAASE,EACdC,EACAJ,EACK,CACL,MAAMC,EAAa,CAAA,EAEnB,GAAI,CAAC,MAAM,QAAQG,CAAM,GAAKA,EAAO,QAAU,EAAG,OAAOH,EAEzD,UAAWJ,KAAKO,EAAQ,CACtB,MAAMC,EAAKP,EAAWD,EAAGG,CAAO,EAC5BK,EAAIJ,EAAM,KAAKI,CAAE,EAChBJ,EAAM,KAAK,CAAE,MAAOJ,EAAG,MAAOA,CAAE,CAAQ,EAE/C,OAAOI,CACT"}