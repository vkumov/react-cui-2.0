{"version":3,"file":"helpers.js","sources":["../../src/ReactSelect/helpers.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\n\nexport type Option<V = string> = { label?: ReactNode; value: V };\nexport type OptionGroup<O> = { label?: ReactNode; options: readonly O[] };\n\nexport function isGrouped<O extends { value: any }>(\n  v: O | OptionGroup<O>\n): v is OptionGroup<O> {\n  return \"options\" in v;\n}\n\nexport function findOption<V, O extends { value: V } = Option<V>>(\n  value: V,\n  options: readonly (O | OptionGroup<O>)[]\n): O {\n  let found: O;\n  for (const it of options) {\n    if (isGrouped<O>(it)) found = findOption<V, O>(value, it.options);\n    else found = it.value === value ? it : null;\n\n    if (found) return found;\n  }\n}\n"],"names":["isGrouped","v","findOption","value","options","found","it"],"mappings":"AAKO,SAASA,SACdC,CAAAA,CAAqB,EACA;AACrB,IAAA,OAAO,SAAaA,IAAAA,CAAAA,CAAAA;AACtB,CAAC;AAEM,SAASC,UAAAA,CACdC,KAAQ,EACRC,OAAwC,EACrC;IACH,IAAIC,KAAAA,CAAAA;IACJ,KAAK,MAAMC,MAAMF,OAAS,CAAA;AACxB,QAAA,IAAIJ,UAAaM,EAAKD,CAAAA,EAAAA,KAAAA,GAAQH,UAAiBC,CAAAA,KAAAA,EAAOG,GAAGF,OAAO,CAAA,CAAA;AAC3DC,aAAAA,KAAAA,GAAQC,EAAGH,CAAAA,KAAK,KAAKA,KAAAA,GAAQG,KAAK,IAAI,CAAA;AAE3C,QAAA,IAAID,OAAO,OAAOA,KAAAA,CAAAA;AACpB,KAAA;AACF;;;;"}