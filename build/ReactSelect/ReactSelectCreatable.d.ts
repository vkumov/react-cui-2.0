import React from "react";
import type { GroupBase } from "react-select/dist/declarations/src/types";
import { CreatableProps } from "react-select/creatable";
import "../../css/react-select.css";
import type { ReactNode } from "react";
import type { LabelColor } from "src/Label";
declare type CUISelectProps = {
    label?: ReactNode;
    multiValueColor?: LabelColor;
    error?: ReactNode | boolean;
};
export declare type CreatableReactSelectProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> = CreatableProps<Option, IsMulti, Group> & CUISelectProps;
export declare const CreatableReactSelect: React.ForwardRefExoticComponent<Omit<Pick<import("react-select/dist/declarations/src/Select").Props<unknown, boolean, GroupBase<unknown>>, "aria-errormessage" | "aria-invalid" | "aria-label" | "aria-labelledby" | "ariaLiveMessages" | "autoFocus" | "className" | "classNamePrefix" | "delimiter" | "formatOptionLabel" | "hideSelectedOptions" | "id" | "inputValue" | "inputId" | "instanceId" | "isClearable" | "isOptionSelected" | "menuPortalTarget" | "name" | "onBlur" | "onChange" | "onFocus" | "onInputChange" | "onKeyDown" | "onMenuOpen" | "onMenuClose" | "onMenuScrollToTop" | "onMenuScrollToBottom" | "theme" | "value" | "form"> & {
    'aria-live'?: "off" | "assertive" | "polite";
    backspaceRemovesValue?: boolean;
    blurInputOnSelect?: boolean;
    captureMenuScroll?: boolean;
    closeMenuOnSelect?: boolean;
    closeMenuOnScroll?: boolean | ((event: Event) => boolean);
    components?: Partial<import("react-select/dist/declarations/src/components").SelectComponents<unknown, boolean, GroupBase<unknown>>>;
    controlShouldRenderValue?: boolean;
    escapeClearsValue?: boolean;
    filterOption?: (option: import("react-select/dist/declarations/src/filters").FilterOptionOption<unknown>, inputValue: string) => boolean;
    formatGroupLabel?: (group: GroupBase<unknown>) => React.ReactNode;
    getOptionLabel?: import("react-select/dist/declarations/src/types").GetOptionLabel<unknown>;
    getOptionValue?: import("react-select/dist/declarations/src/types").GetOptionValue<unknown>;
    isDisabled?: boolean;
    isLoading?: boolean;
    isOptionDisabled?: (option: unknown, selectValue: import("react-select/dist/declarations/src/types").Options<unknown>) => boolean;
    isMulti?: boolean;
    isRtl?: boolean;
    isSearchable?: boolean;
    loadingMessage?: (obj: {
        inputValue: string;
    }) => React.ReactNode;
    minMenuHeight?: number;
    maxMenuHeight?: number;
    menuIsOpen?: boolean;
    menuPlacement?: import("react-select/dist/declarations/src/types").MenuPlacement;
    menuPosition?: import("react-select/dist/declarations/src/types").MenuPosition;
    menuShouldBlockScroll?: boolean;
    menuShouldScrollIntoView?: boolean;
    noOptionsMessage?: (obj: {
        inputValue: string;
    }) => React.ReactNode;
    openMenuOnFocus?: boolean;
    openMenuOnClick?: boolean;
    options?: import("react-select/dist/declarations/src/types").OptionsOrGroups<unknown, GroupBase<unknown>>;
    pageSize?: number;
    placeholder?: React.ReactNode;
    screenReaderStatus?: (obj: {
        count: number;
    }) => string;
    styles?: import("react-select").StylesConfig<unknown, boolean, GroupBase<unknown>>;
    tabIndex?: number;
    tabSelectsValue?: boolean;
} & {}, "inputValue" | "menuIsOpen" | "onChange" | "onInputChange" | "onMenuOpen" | "onMenuClose" | "value"> & Partial<Pick<import("react-select/dist/declarations/src/Select").Props<unknown, boolean, GroupBase<unknown>>, "aria-errormessage" | "aria-invalid" | "aria-label" | "aria-labelledby" | "ariaLiveMessages" | "autoFocus" | "className" | "classNamePrefix" | "delimiter" | "formatOptionLabel" | "hideSelectedOptions" | "id" | "inputValue" | "inputId" | "instanceId" | "isClearable" | "isOptionSelected" | "menuPortalTarget" | "name" | "onBlur" | "onChange" | "onFocus" | "onInputChange" | "onKeyDown" | "onMenuOpen" | "onMenuClose" | "onMenuScrollToTop" | "onMenuScrollToBottom" | "theme" | "value" | "form"> & {
    'aria-live'?: "off" | "assertive" | "polite";
    backspaceRemovesValue?: boolean;
    blurInputOnSelect?: boolean;
    captureMenuScroll?: boolean;
    closeMenuOnSelect?: boolean;
    closeMenuOnScroll?: boolean | ((event: Event) => boolean);
    components?: Partial<import("react-select/dist/declarations/src/components").SelectComponents<unknown, boolean, GroupBase<unknown>>>;
    controlShouldRenderValue?: boolean;
    escapeClearsValue?: boolean;
    filterOption?: (option: import("react-select/dist/declarations/src/filters").FilterOptionOption<unknown>, inputValue: string) => boolean;
    formatGroupLabel?: (group: GroupBase<unknown>) => React.ReactNode;
    getOptionLabel?: import("react-select/dist/declarations/src/types").GetOptionLabel<unknown>;
    getOptionValue?: import("react-select/dist/declarations/src/types").GetOptionValue<unknown>;
    isDisabled?: boolean;
    isLoading?: boolean;
    isOptionDisabled?: (option: unknown, selectValue: import("react-select/dist/declarations/src/types").Options<unknown>) => boolean;
    isMulti?: boolean;
    isRtl?: boolean;
    isSearchable?: boolean;
    loadingMessage?: (obj: {
        inputValue: string;
    }) => React.ReactNode;
    minMenuHeight?: number;
    maxMenuHeight?: number;
    menuIsOpen?: boolean;
    menuPlacement?: import("react-select/dist/declarations/src/types").MenuPlacement;
    menuPosition?: import("react-select/dist/declarations/src/types").MenuPosition;
    menuShouldBlockScroll?: boolean;
    menuShouldScrollIntoView?: boolean;
    noOptionsMessage?: (obj: {
        inputValue: string;
    }) => React.ReactNode;
    openMenuOnFocus?: boolean;
    openMenuOnClick?: boolean;
    options?: import("react-select/dist/declarations/src/types").OptionsOrGroups<unknown, GroupBase<unknown>>;
    pageSize?: number;
    placeholder?: React.ReactNode;
    screenReaderStatus?: (obj: {
        count: number;
    }) => string;
    styles?: import("react-select").StylesConfig<unknown, boolean, GroupBase<unknown>>;
    tabIndex?: number;
    tabSelectsValue?: boolean;
} & {}> & import("react-select/dist/declarations/src/useStateManager").StateManagerAdditionalProps<unknown> & import("react-select/dist/declarations/src/useCreatable").CreatableAdditionalProps<unknown, GroupBase<unknown>> & CUISelectProps & React.RefAttributes<any>>;
export {};
