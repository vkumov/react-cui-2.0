{"version":3,"file":"index.js","sources":["../../src/Select/Select.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  isValidElement,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ChangeEvent,\n  type FC,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactHTMLElement,\n  type ReactNode,\n} from \"react\";\nimport useEvent from \"react-use-event-hook\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { InputChips } from \"src/InputChips\";\nimport { InputHelpBlock } from \"src/InputHelp\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport type { FullInputChipsProps } from \"../InputChips\";\n\nfunction isOption(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptionElement> {\n  return element.type === \"option\";\n}\n\nfunction isOptGroup(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptGroupElement> {\n  return element.type === \"optgroup\";\n}\n\nconst SelectChildren = ({ children, handleOptionClick, isSelected }) =>\n  React.Children.map(children, (child, idx) => {\n    if (!isValidElement(child)) return child;\n\n    if (isOption(child))\n      return (\n        <a\n          key={idx}\n          onClick={(e) => handleOptionClick(e, child.props.value)}\n          className={`${ac(isSelected(child.props.value), \"selected\")}${ac(\n            child.props.disabled,\n            \"disabled\"\n          )}`}\n        >\n          {child.props.children}\n        </a>\n      );\n\n    if (isOptGroup(child))\n      return (\n        <div key={idx} className=\"dropdown__group\">\n          <div className=\"dropdown__group-header\">{child.props.label}</div>\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {child.props.children}\n          </SelectChildren>\n        </div>\n      );\n\n    return child;\n  });\n\ntype Option = {\n  label: string;\n  value: string;\n};\n\ntype EditableSelectProps = {\n  compressed?: boolean;\n  label?: ReactNode;\n  prompt?: string;\n  inline?: boolean;\n  editable?: boolean;\n  type?: \"number\" | \"text\";\n  error?: ReactNode;\n  multi?: boolean;\n  onChange?: (value) => void;\n  value?: any;\n  displayValues?: boolean;\n  disabled?: boolean;\n  divRef?: MutableRefObject<HTMLDivElement>;\n  options?: Option[];\n  onSelect?: (value: string) => void | (() => void);\n  onDeselect?: (value: string) => void | (() => void);\n};\n\ntype WantedChipsProps = Omit<\n  FullInputChipsProps,\n  \"type\" | \"label\" | \"onSelect\" | \"onDeselect\" | \"value\"\n>;\n\ntype FullEditableSelectProps = PropsWithChildren<\n  EditableSelectProps & Partial<WantedChipsProps>\n>;\n\ntype Display = {\n  display: ReactNode;\n  value: any;\n};\n\nconst collectDisplays = (children: ReactNode): Display[] => {\n  const t = [];\n  React.Children.forEach(children, (child) => {\n    if (!isValidElement(child)) return null;\n    if (isOption(child)) {\n      t.push({\n        display: child.props.children,\n        value: child.props.value,\n      });\n    }\n    if (isOptGroup(child)) t.push(collectDisplays(child.props.children));\n  });\n  return t.flat();\n};\n\nexport const EditableSelect: FC<FullEditableSelectProps> = forwardRef<\n  HTMLInputElement,\n  FullEditableSelectProps\n>(\n  (\n    {\n      compressed = false,\n      prompt = \"Select an option\",\n      inline = false,\n      type = \"text\",\n      children,\n      label = null,\n      error = null,\n      onChange = null,\n      value: initialValue = undefined,\n      editable = false,\n      multi = false,\n      displayValues = false,\n      disabled,\n      className,\n      divRef,\n      options,\n      onSelect = null,\n      onDeselect = null,\n      ...input\n    },\n    inputRef\n  ) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [value, setValue] = useState(initialValue);\n    const ref = useRef<HTMLDivElement>(undefined);\n\n    const display = useMemo(() => collectDisplays(children), [children]);\n\n    const handleClick = useEvent((newState = true) => {\n      if (disabled) return;\n      setOpen(newState);\n    });\n\n    useEffect(() => {\n      if (isOpen) {\n        const onOutsideClick = (e: MouseEvent) => {\n          // ignore clicks on the component itself\n          if (!(e.target instanceof Node) || !ref?.current) return;\n          if (ref.current && ref.current.contains(e.target)) return;\n\n          if (ref.current && !ref.current.contains(e.target)) {\n            handleClick(false);\n          }\n        };\n\n        document.addEventListener(\"click\", onOutsideClick, true);\n        return () =>\n          document.removeEventListener(\"click\", onOutsideClick, true);\n      }\n    }, [isOpen, handleClick]);\n\n    const handleOptionClick = useEvent((_e, newValue) => {\n      if (multi) {\n        let added = true;\n        setValue((curr) => {\n          if (curr?.includes(newValue)) {\n            added = false;\n            return curr.filter((v) => v !== newValue);\n          } else return (curr || []).concat(newValue);\n        });\n        const r = (added ? onSelect : onDeselect)?.call(undefined, newValue);\n        if (typeof r === \"function\") r();\n      } else {\n        setValue(newValue);\n      }\n      if (!multi) handleClick(false);\n    });\n\n    const isSelected = (checkValue) =>\n      multi ? value?.includes(checkValue) : value === checkValue;\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n\n    useEffect(() => {\n      if (multi && initialValue && !Array.isArray(initialValue))\n        throw Error(\"Value must be an array if multi select is allowed.\");\n    }, [multi, initialValue]);\n\n    useEffect(() => {\n      if (typeof onChange === \"function\") onChange(value);\n    }, [value]);\n\n    return (\n      <div\n        className={`form-group dropdown${ac(\n          compressed,\n          \"input--compressed\"\n        )}${ac(isOpen, \"active\")}${ac(inline, \"form-group--inline\")}${ac(\n          error,\n          \"form-group--error\"\n        )}${ac(disabled, \"disabled\")}${ac(className)}`}\n        ref={useMergeRefs([ref, divRef])}\n      >\n        {multi ? (\n          <InputChips\n            className=\"select editable\"\n            label={label}\n            {...input}\n            placeholder={\n              !Array.isArray(value) || !value.length\n                ? input.placeholder || prompt\n                : \"\"\n            }\n            readOnly={!editable}\n            onClick={() => handleClick(true)}\n            onChange={() => void 0}\n            onChipRemove={(idx) => {\n              let val: any;\n              setValue((curr: any[]) => {\n                val = curr[idx];\n                return curr.filter((_v, i) => i !== idx);\n              });\n              if (typeof onDeselect === \"function\") onDeselect(val);\n            }}\n            value={\n              displayValues\n                ? value\n                : display\n                    .filter((d) => value?.includes(d.value))\n                    .map((d) => d.display)\n            }\n            noInput={\n              inline && !editable && Array.isArray(value) && value.length > 0\n            }\n            outerWrap={false}\n            ref={inputRef}\n          />\n        ) : (\n          <div\n            className=\"form-group__text select editable\"\n            onClick={() => handleClick(true)}\n          >\n            <input\n              type={type}\n              placeholder={input.placeholder || prompt}\n              autoComplete=\"off\"\n              readOnly={!editable}\n              {...input}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                if (!editable) return;\n                e.persist();\n                setValue(e.target.value);\n              }}\n              value={\n                editable\n                  ? value || \"\"\n                  : !displayValues\n                  ? display?.find((el) => el.value === value)?.display || \"\"\n                  : value\n              }\n              ref={inputRef}\n            />\n            {label ? <label htmlFor={input.id}>{label}</label> : null}\n          </div>\n        )}\n        <div className=\"dropdown__menu\">\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {options\n              ? options.map((opt, idx) => (\n                  <option key={idx} value={opt.value}>\n                    {opt.value}\n                  </option>\n                ))\n              : children}\n          </SelectChildren>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </div>\n    );\n  }\n);\n"],"names":["isOption","element","isOptGroup","SelectChildren","children","handleOptionClick","isSelected","React","child","idx","isValidElement","jsx","e","ac","jsxs","collectDisplays","t","EditableSelect","forwardRef","compressed","prompt","inline","type","label","error","onChange","initialValue","editable","multi","displayValues","disabled","className","divRef","options","onSelect","onDeselect","input","inputRef","_a","isOpen","setOpen","useState","value","setValue","ref","useRef","display","useMemo","handleClick","useEvent","newState","useEffect","onOutsideClick","_e","newValue","added","curr","v","r","checkValue","useMergeRefs","InputChips","val","_v","i","d","el","opt","InputHelpBlock"],"mappings":"+hBAwBA,SAASA,EACPC,EACgD,CAChD,OAAOA,EAAQ,OAAS,QAC1B,CAEA,SAASC,EACPD,EACkD,CAClD,OAAOA,EAAQ,OAAS,UAC1B,CAEA,MAAME,EAAiB,CAAC,CAAE,SAAAC,EAAU,kBAAAC,EAAmB,WAAAC,CAAW,IAChEC,EAAM,SAAS,IAAIH,EAAU,CAACI,EAAOC,IAC9BC,EAAeF,CAAK,EAErBR,EAASQ,CAAK,EAEdG,EAAC,IAAA,CAEC,QAAUC,GAAMP,EAAkBO,EAAGJ,EAAM,MAAM,KAAK,EACtD,UAAW,GAAGK,EAAGP,EAAWE,EAAM,MAAM,KAAK,EAAG,UAAU,IAAIK,EAC5DL,EAAM,MAAM,SACZ,UACF,IAEC,SAAAA,EAAM,MAAM,QAAA,EAPRC,CAQP,EAGAP,EAAWM,CAAK,EAEhBM,EAAC,MAAc,CAAA,UAAU,kBACvB,SAAAH,CAAAA,EAAC,OAAI,UAAU,yBAA0B,SAAAH,EAAM,MAAM,MAAM,EAC3DG,EAACR,EAAA,CACC,kBAAmBE,EACnB,WAAYC,EAEX,SAAAE,EAAM,MAAM,QACf,CAAA,CAAA,CAAA,EAPQC,CAQV,EAGGD,EA7B4BA,CA8BpC,EAwCGO,EAAmBX,GAAmC,CAC1D,MAAMY,EAAI,GACV,OAAAT,EAAM,SAAS,QAAQH,EAAWI,GAAU,CAC1C,GAAI,CAACE,EAAeF,CAAK,EAAG,OAAO,KAC/BR,EAASQ,CAAK,GAChBQ,EAAE,KAAK,CACL,QAASR,EAAM,MAAM,SACrB,MAAOA,EAAM,MAAM,KACrB,CAAC,EAECN,EAAWM,CAAK,GAAGQ,EAAE,KAAKD,EAAgBP,EAAM,MAAM,QAAQ,CAAC,CACrE,CAAC,EACMQ,EAAE,KACX,CAAA,EAEaC,GAA8CC,EAIzD,CACE,CACE,WAAAC,EAAa,GACb,OAAAC,EAAS,mBACT,OAAAC,EAAS,GACT,KAAAC,EAAO,OACP,SAAAlB,EACA,MAAAmB,EAAQ,KACR,MAAAC,EAAQ,KACR,SAAAC,EAAW,KACX,MAAOC,EAAe,OACtB,SAAAC,EAAW,GACX,MAAAC,EAAQ,GACR,cAAAC,EAAgB,GAChB,SAAAC,EACA,UAAAC,EACA,OAAAC,EACA,QAAAC,EACA,SAAAC,EAAW,KACX,WAAAC,EAAa,KACb,GAAGC,CACL,EACAC,IACG,CAtJP,IAAAC,EAuJI,KAAM,CAACC,EAAQC,CAAO,EAAIC,EAAkB,EAAK,EAC3C,CAACC,EAAOC,CAAQ,EAAIF,EAASf,CAAY,EACzCkB,EAAMC,EAAuB,MAAS,EAEtCC,EAAUC,EAAQ,IAAMhC,EAAgBX,CAAQ,EAAG,CAACA,CAAQ,CAAC,EAE7D4C,EAAcC,EAAS,CAACC,EAAW,KAAS,CAC5CpB,GACJU,EAAQU,CAAQ,CAClB,CAAC,EAEDC,EAAU,IAAM,CACd,GAAIZ,EAAQ,CACV,MAAMa,EAAkBxC,GAAkB,CAEpC,EAAEA,EAAE,kBAAkB,OAAS,EAACgC,GAAA,MAAAA,EAAK,UACrCA,EAAI,SAAWA,EAAI,QAAQ,SAAShC,EAAE,MAAM,GAE5CgC,EAAI,SAAW,CAACA,EAAI,QAAQ,SAAShC,EAAE,MAAM,GAC/CoC,EAAY,EAAK,CAErB,EAEA,OAAA,SAAS,iBAAiB,QAASI,EAAgB,EAAI,EAChD,IACL,SAAS,oBAAoB,QAASA,EAAgB,EAAI,EAEhE,EAAG,CAACb,EAAQS,CAAW,CAAC,EAExB,MAAM3C,EAAoB4C,EAAS,CAACI,EAAIC,IAAa,CApLzD,IAAAhB,EAqLM,GAAIV,EAAO,CACT,IAAI2B,EAAQ,GACZZ,EAAUa,GACJA,GAAA,MAAAA,EAAM,SAASF,CAAAA,GACjBC,EAAQ,GACDC,EAAK,OAAQC,GAAMA,IAAMH,CAAQ,IAC3BE,GAAQ,CAAA,GAAI,OAAOF,CAAQ,CAC3C,EACD,MAAMI,GAAKpB,EAAAiB,EAAQrB,EAAWC,IAAnB,KAAAG,OAAAA,EAAgC,KAAK,OAAWgB,GACvD,OAAOI,GAAM,YAAYA,SAE7Bf,EAASW,CAAQ,EAEd1B,GAAOoB,EAAY,EAAK,CAC/B,CAAC,EAEK1C,EAAcqD,GAClB/B,EAAQc,GAAO,SAASiB,CAAAA,EAAcjB,IAAUiB,EAElD,OAAAR,EAAU,IAAM,CACdR,EAASjB,CAAY,CACvB,EAAG,CAACA,CAAY,CAAC,EAEjByB,EAAU,IAAM,CACd,GAAIvB,GAASF,GAAgB,CAAC,MAAM,QAAQA,CAAY,EACtD,MAAM,MAAM,oDAAoD,CACpE,EAAG,CAACE,EAAOF,CAAY,CAAC,EAExByB,EAAU,IAAM,CACV,OAAO1B,GAAa,YAAYA,EAASiB,CAAK,CACpD,EAAG,CAACA,CAAK,CAAC,EAGR5B,EAAC,MAAA,CACC,UAAW,sBAAsBD,EAC/BM,EACA,mBACF,IAAIN,EAAG0B,EAAQ,QAAQ,IAAI1B,EAAGQ,EAAQ,oBAAoB,IAAIR,EAC5DW,EACA,mBACF,IAAIX,EAAGiB,EAAU,UAAU,IAAIjB,EAAGkB,CAAS,IAC3C,IAAK6B,EAAa,CAAChB,EAAKZ,CAAM,CAAC,EAE9B,UAAAJ,EACCjB,EAACkD,EAAA,CACC,UAAU,kBACV,MAAOtC,EACN,GAAGa,EACJ,YACE,CAAC,MAAM,QAAQM,CAAK,GAAK,CAACA,EAAM,OAC5BN,EAAM,aAAehB,EACrB,GAEN,SAAU,CAACO,EACX,QAAS,IAAMqB,EAAY,EAAI,EAC/B,SAAU,IAAG,GACb,aAAevC,GAAQ,CACrB,IAAIqD,EACJnB,EAAUa,IACRM,EAAMN,EAAK/C,CAAG,EACP+C,EAAK,OAAO,CAACO,EAAIC,IAAMA,IAAMvD,CAAG,EACxC,EACG,OAAO0B,GAAe,YAAYA,EAAW2B,CAAG,CACtD,EACA,MACEjC,EACIa,EACAI,EACG,OAAQmB,GAAMvB,GAAO,SAASuB,EAAE,KAAA,CAAM,EACtC,IAAKA,GAAMA,EAAE,OAAO,EAE7B,QACE5C,GAAU,CAACM,GAAY,MAAM,QAAQe,CAAK,GAAKA,EAAM,OAAS,EAEhE,UAAW,GACX,IAAKL,EACP,EAEAvB,EAAC,MACC,CAAA,UAAU,mCACV,QAAS,IAAMkC,EAAY,EAAI,EAE/B,UAAArC,EAAC,QAAA,CACC,KAAMW,EACN,YAAac,EAAM,aAAehB,EAClC,aAAa,MACb,SAAU,CAACO,EACV,GAAGS,EACJ,SAAW,GAAqC,CACzCT,IACL,EAAE,QAAQ,EACVgB,EAAS,EAAE,OAAO,KAAK,EACzB,EACA,MACEhB,EACIe,GAAS,GACRb,EAEDa,IADAJ,EAAAQ,GAAS,KAAMoB,GAAOA,EAAG,QAAUxB,CAAnC,IAAA,KAAA,OAAAJ,EAA2C,UAAW,GAG5D,IAAKD,CACP,CAAA,EACCd,EAAQZ,EAAC,QAAA,CAAM,QAASyB,EAAM,GAAK,SAAAb,CAAM,CAAA,EAAW,IACvD,CAAA,CAAA,EAEFZ,EAAC,MAAI,CAAA,UAAU,iBACb,SAAAA,EAACR,EAAA,CACC,kBAAmBE,EACnB,WAAYC,EAEX,SAAA2B,EACGA,EAAQ,IAAI,CAACkC,EAAK1D,IAChBE,EAAC,SAAA,CAAiB,MAAOwD,EAAI,MAC1B,SAAAA,EAAI,OADM1D,CAEb,CACD,EACDL,CACN,CAAA,CAAA,CACF,EACCoB,EAAQb,EAACyD,GAAA,CAAe,KAAM5C,EAAO,EAAK,IAAA,CAAA,CAC7C,CAEJ,CACF"}