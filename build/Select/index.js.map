{"version":3,"file":"index.js","sources":["../../src/Select/Select.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ChangeEvent,\n  type FC,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactHTMLElement,\n  type ReactNode,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { InputChips } from \"src/InputChips\";\nimport { InputHelpBlock } from \"src/InputHelp\";\nimport { appendClass as ac } from \"src/utils\";\n\nimport type { FullInputChipsProps } from \"../InputChips\";\n\nfunction isOption(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptionElement> {\n  return element.type === \"option\";\n}\n\nfunction isOptGroup(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptGroupElement> {\n  return element.type === \"optgroup\";\n}\n\nconst SelectChildren = ({ children, handleOptionClick, isSelected }) =>\n  React.Children.map(children, (child, idx) => {\n    if (!isValidElement(child)) return child;\n\n    if (isOption(child))\n      return (\n        <a\n          key={idx}\n          onClick={(e) => handleOptionClick(e, child.props.value)}\n          className={`${ac(isSelected(child.props.value), \"selected\")}${ac(\n            child.props.disabled,\n            \"disabled\"\n          )}`}\n        >\n          {child.props.children}\n        </a>\n      );\n\n    if (isOptGroup(child))\n      return (\n        <div key={idx} className=\"dropdown__group\">\n          <div className=\"dropdown__group-header\">{child.props.label}</div>\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {child.props.children}\n          </SelectChildren>\n        </div>\n      );\n\n    return child;\n  });\n\ntype Option = {\n  label: string;\n  value: string;\n};\n\ntype EditableSelectProps = {\n  compressed?: boolean;\n  label?: ReactNode;\n  prompt?: string;\n  inline?: boolean;\n  editable?: boolean;\n  type?: \"number\" | \"text\";\n  error?: ReactNode;\n  multi?: boolean;\n  onChange?: (value) => void;\n  value?: any;\n  displayValues?: boolean;\n  disabled?: boolean;\n  divRef?: MutableRefObject<HTMLDivElement>;\n  options?: Option[];\n  onSelect?: (value: string) => void | (() => void);\n  onDeselect?: (value: string) => void | (() => void);\n};\n\ntype WantedChipsProps = Omit<\n  FullInputChipsProps,\n  \"type\" | \"label\" | \"onSelect\" | \"onDeselect\" | \"value\"\n>;\n\ntype FullEditableSelectProps = PropsWithChildren<\n  EditableSelectProps & Partial<WantedChipsProps>\n>;\n\ntype Display = {\n  display: ReactNode;\n  value: any;\n};\n\nconst collectDisplays = (children: ReactNode): Display[] => {\n  const t = [];\n  React.Children.forEach(children, (child) => {\n    if (!isValidElement(child)) return null;\n    if (isOption(child)) {\n      t.push({\n        display: child.props.children,\n        value: child.props.value,\n      });\n    }\n    if (isOptGroup(child)) t.push(collectDisplays(child.props.children));\n  });\n  return t.flat();\n};\n\nexport const EditableSelect: FC<FullEditableSelectProps> = forwardRef<\n  HTMLInputElement,\n  FullEditableSelectProps\n>(\n  (\n    {\n      compressed = false,\n      prompt = \"Select an option\",\n      inline = false,\n      type = \"text\",\n      children,\n      label = null,\n      error = null,\n      onChange = null,\n      value: initialValue = undefined,\n      editable = false,\n      multi = false,\n      displayValues = false,\n      disabled,\n      className,\n      divRef,\n      options,\n      onSelect = null,\n      onDeselect = null,\n      ...input\n    },\n    inputRef\n  ) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [value, setValue] = useState(initialValue);\n    const ref = useRef<HTMLDivElement>(undefined);\n\n    const display = useMemo(() => collectDisplays(children), [children]);\n\n    const handleClick = useCallback(\n      (newState = true) => {\n        if (disabled) return;\n        setOpen(newState);\n      },\n      [disabled]\n    );\n\n    useEffect(() => {\n      if (isOpen) {\n        const onOutsideClick = (e: MouseEvent) => {\n          // ignore clicks on the component itself\n          if (!(e.target instanceof Node) || !ref?.current) return;\n          if (ref.current && ref.current.contains(e.target)) return;\n\n          if (ref.current && !ref.current.contains(e.target)) {\n            handleClick(false);\n          }\n        };\n\n        document.addEventListener(\"click\", onOutsideClick, true);\n        return () =>\n          document.removeEventListener(\"click\", onOutsideClick, true);\n      }\n    }, [isOpen, handleClick]);\n\n    const handleOptionClick = useCallback(\n      (_e, newValue) => {\n        if (multi) {\n          let added = true;\n          setValue((curr) => {\n            if (curr?.includes(newValue)) {\n              added = false;\n              return curr.filter((v) => v !== newValue);\n            } else return (curr || []).concat(newValue);\n          });\n          const r = (added ? onSelect : onDeselect)?.call(undefined, newValue);\n          if (typeof r === \"function\") r();\n        } else {\n          setValue(newValue);\n        }\n        if (!multi) handleClick(false);\n      },\n      [handleClick, multi, onSelect, onDeselect]\n    );\n\n    const isSelected = (checkValue) =>\n      multi ? value?.includes(checkValue) : value === checkValue;\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n\n    useEffect(() => {\n      if (multi && initialValue && !Array.isArray(initialValue))\n        throw Error(\"Value must be an array if multi select is allowed.\");\n    }, [multi, initialValue]);\n\n    useEffect(() => {\n      if (typeof onChange === \"function\") onChange(value);\n    }, [value]);\n\n    return (\n      <div\n        className={`form-group dropdown${ac(\n          compressed,\n          \"input--compressed\"\n        )}${ac(isOpen, \"active\")}${ac(inline, \"form-group--inline\")}${ac(\n          error,\n          \"form-group--error\"\n        )}${ac(disabled, \"disabled\")}${ac(className)}`}\n        ref={useMergeRefs([ref, divRef])}\n      >\n        {multi ? (\n          <InputChips\n            className=\"select editable\"\n            label={label}\n            {...input}\n            placeholder={\n              !Array.isArray(value) || !value.length\n                ? input.placeholder || prompt\n                : \"\"\n            }\n            readOnly={!editable}\n            onClick={() => handleClick(true)}\n            onChange={() => void 0}\n            onChipRemove={(idx) => {\n              let val: any;\n              setValue((curr: any[]) => {\n                val = curr[idx];\n                return curr.filter((_v, i) => i !== idx);\n              });\n              if (typeof onDeselect === \"function\") onDeselect(val);\n            }}\n            value={\n              displayValues\n                ? value\n                : display\n                    .filter((d) => value?.includes(d.value))\n                    .map((d) => d.display)\n            }\n            noInput={\n              inline && !editable && Array.isArray(value) && value.length > 0\n            }\n            outerWrap={false}\n            ref={inputRef}\n          />\n        ) : (\n          <div\n            className=\"form-group__text select editable\"\n            onClick={() => handleClick(true)}\n          >\n            <input\n              type={type}\n              placeholder={input.placeholder || prompt}\n              autoComplete=\"off\"\n              readOnly={!editable}\n              {...input}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                if (!editable) return;\n                e.persist();\n                setValue(e.target.value);\n              }}\n              value={\n                editable\n                  ? value || \"\"\n                  : !displayValues\n                  ? display?.find((el) => el.value === value)?.display || \"\"\n                  : value\n              }\n              ref={inputRef}\n            />\n            {label ? <label htmlFor={input.id}>{label}</label> : null}\n          </div>\n        )}\n        <div className=\"dropdown__menu\">\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {options\n              ? options.map((opt, idx) => (\n                  <option key={idx} value={opt.value}>\n                    {opt.value}\n                  </option>\n                ))\n              : children}\n          </SelectChildren>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </div>\n    );\n  }\n);\n"],"names":["_extends","isOption","element","type","isOptGroup","SelectChildren","children","handleOptionClick","isSelected","React","Children","map","child","idx","isValidElement","a","key","onClick","e","props","value","className","ac","disabled","div","label","collectDisplays","t","forEach","push","display","flat","EditableSelect","forwardRef","inputRef","compressed","prompt","inline","error","onChange","initialValue","undefined","editable","multi","displayValues","divRef","options","onSelect","onDeselect","input","useState","isOpen","setOpen","setValue","ref","useRef","useMemo","handleClick","useCallback","newState","useEffect","onOutsideClick","target","Node","current","contains","document","addEventListener","removeEventListener","_e","newValue","added","curr","includes","filter","v","concat","r","call","checkValue","Array","isArray","Error","useMergeRefs","InputChips","placeholder","length","readOnly","onChipRemove","val","_v","i","d","noInput","outerWrap","autoComplete","persist","find","el","htmlFor","id","opt","option","InputHelpBlock","text"],"mappings":"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"}