{"version":3,"file":"index.js","sources":["../../src/Select/Select.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  forwardRef,\n  useCallback,\n  useState,\n  useRef,\n  useMemo,\n  isValidElement,\n  ReactElement,\n  ReactHTMLElement,\n  MutableRefObject,\n  FC,\n} from \"react\";\nimport { useMergeRefs } from \"use-callback-ref\";\n\nimport { InputChips } from \"src/InputChips\";\nimport type { FullInputChipsProps } from \"../InputChips\";\nimport { InputHelpBlock } from \"src/InputHelp\";\nimport { appendClass as ac } from \"src/utils\";\n\nfunction isOption(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptionElement> {\n  return element.type === \"option\";\n}\n\nfunction isOptGroup(\n  element: ReactElement<unknown>\n): element is ReactHTMLElement<HTMLOptGroupElement> {\n  return element.type === \"optgroup\";\n}\n\nconst SelectChildren = ({ children, handleOptionClick, isSelected }) =>\n  React.Children.map(children, (child, idx) => {\n    if (!isValidElement(child)) return child;\n\n    if (isOption(child))\n      return (\n        <a\n          key={idx}\n          onClick={(e) => handleOptionClick(e, child.props.value)}\n          className={`${ac(isSelected(child.props.value), \"selected\")}${ac(\n            child.props.disabled,\n            \"disabled\"\n          )}`}\n        >\n          {child.props.children}\n        </a>\n      );\n\n    if (isOptGroup(child))\n      return (\n        <div key={idx} className=\"dropdown__group\">\n          <div className=\"dropdown__group-header\">{child.props.label}</div>\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {child.props.children}\n          </SelectChildren>\n        </div>\n      );\n\n    return child;\n  });\n\ntype Option = {\n  label: string;\n  value: string;\n};\n\ntype EditableSelectProps = {\n  compressed?: boolean;\n  label?: ReactNode;\n  prompt?: string;\n  inline?: boolean;\n  editable?: boolean;\n  type?: \"number\" | \"text\";\n  error?: ReactNode;\n  multi?: boolean;\n  onChange?: (value) => void;\n  value?: any;\n  displayValues?: boolean;\n  disabled?: boolean;\n  divRef?: MutableRefObject<HTMLDivElement>;\n  options?: Option[];\n  onSelect?: (value: string) => void | (() => void);\n  onDeselect?: (value: string) => void | (() => void);\n};\n\ntype WantedChipsProps = Omit<\n  FullInputChipsProps,\n  \"type\" | \"label\" | \"onSelect\" | \"onDeselect\" | \"value\"\n>;\n\ntype FullEditableSelectProps = PropsWithChildren<\n  EditableSelectProps & Partial<WantedChipsProps>\n>;\n\ntype Display = {\n  display: ReactNode;\n  value: any;\n};\n\nconst collectDisplays = (children: ReactNode): Display[] => {\n  const t = [];\n  React.Children.forEach(children, (child) => {\n    if (!isValidElement(child)) return null;\n    if (isOption(child)) {\n      t.push({\n        display: child.props.children,\n        value: child.props.value,\n      });\n    }\n    if (isOptGroup(child)) t.push(collectDisplays(child.props.children));\n  });\n  return t.flat();\n};\n\nexport const EditableSelect: FC<FullEditableSelectProps> = forwardRef<\n  HTMLInputElement,\n  FullEditableSelectProps\n>(\n  (\n    {\n      compressed = false,\n      prompt = \"Select an option\",\n      inline = false,\n      type = \"text\",\n      children,\n      label = null,\n      error = null,\n      onChange = null,\n      value: initialValue = undefined,\n      editable = false,\n      multi = false,\n      displayValues = false,\n      disabled,\n      className,\n      divRef,\n      options,\n      onSelect = null,\n      onDeselect = null,\n      ...input\n    },\n    inputRef\n  ) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [value, setValue] = useState(initialValue);\n    const ref = useRef<HTMLDivElement>(undefined);\n\n    const display = useMemo(() => collectDisplays(children), [children]);\n\n    const handleClick = useCallback(\n      (newState = true) => {\n        if (disabled) return;\n        setOpen(newState);\n      },\n      [disabled]\n    );\n\n    useEffect(() => {\n      if (isOpen) {\n        const onOutsideClick = (e: MouseEvent) => {\n          // ignore clicks on the component itself\n          if (!(e.target instanceof Node) || !ref?.current) return;\n          if (ref.current && ref.current.contains(e.target)) return;\n\n          if (ref.current && !ref.current.contains(e.target)) {\n            handleClick(false);\n          }\n        };\n\n        document.addEventListener(\"click\", onOutsideClick, true);\n        return () =>\n          document.removeEventListener(\"click\", onOutsideClick, true);\n      }\n    }, [isOpen, handleClick]);\n\n    const handleOptionClick = useCallback(\n      (_e, newValue) => {\n        if (multi) {\n          let added = true;\n          setValue((curr) => {\n            if (curr?.includes(newValue)) {\n              added = false;\n              return curr.filter((v) => v !== newValue);\n            } else return (curr || []).concat(newValue);\n          });\n          const r = (added ? onSelect : onDeselect)?.call(undefined, newValue);\n          if (typeof r === \"function\") r();\n        } else {\n          setValue(newValue);\n        }\n        if (!multi) handleClick(false);\n      },\n      [handleClick, multi, onSelect, onDeselect]\n    );\n\n    const isSelected = (checkValue) =>\n      multi ? value?.includes(checkValue) : value === checkValue;\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n\n    useEffect(() => {\n      if (multi && initialValue && !Array.isArray(initialValue))\n        throw Error(\"Value must be an array if multi select is allowed.\");\n    }, [multi, initialValue]);\n\n    useEffect(() => {\n      if (typeof onChange === \"function\") onChange(value);\n    }, [value]);\n\n    return (\n      <div\n        className={`form-group dropdown${ac(\n          compressed,\n          \"input--compressed\"\n        )}${ac(isOpen, \"active\")}${ac(inline, \"form-group--inline\")}${ac(\n          error,\n          \"form-group--error\"\n        )}${ac(disabled, \"disabled\")}${ac(className)}`}\n        ref={useMergeRefs([ref, divRef])}\n      >\n        {multi ? (\n          <InputChips\n            className=\"select editable\"\n            label={label}\n            {...input}\n            placeholder={\n              !Array.isArray(value) || !value.length\n                ? input.placeholder || prompt\n                : \"\"\n            }\n            readOnly={!editable}\n            onClick={() => handleClick(true)}\n            onChange={() => void 0}\n            onChipRemove={(idx) => {\n              let val: any;\n              setValue((curr: any[]) => {\n                val = curr[idx];\n                return curr.filter((_v, i) => i !== idx);\n              });\n              if (typeof onDeselect === \"function\") onDeselect(val);\n            }}\n            value={\n              displayValues\n                ? value\n                : display\n                    .filter((d) => value?.includes(d.value))\n                    .map((d) => d.display)\n            }\n            noInput={\n              inline && !editable && Array.isArray(value) && value.length > 0\n            }\n            outerWrap={false}\n            ref={inputRef}\n          />\n        ) : (\n          <div\n            className=\"form-group__text select editable\"\n            onClick={() => handleClick(true)}\n          >\n            <input\n              type={type}\n              placeholder={input.placeholder || prompt}\n              autoComplete=\"off\"\n              readOnly={!editable}\n              {...input}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                if (!editable) return;\n                e.persist();\n                setValue(e.target.value);\n              }}\n              value={\n                editable\n                  ? value || \"\"\n                  : !displayValues\n                  ? display?.find((el) => el.value === value)?.display || \"\"\n                  : value\n              }\n              ref={inputRef}\n            />\n            {label ? <label htmlFor={input.id}>{label}</label> : null}\n          </div>\n        )}\n        <div className=\"dropdown__menu\">\n          <SelectChildren\n            handleOptionClick={handleOptionClick}\n            isSelected={isSelected}\n          >\n            {options\n              ? options.map((opt, idx) => (\n                  <option key={idx} value={opt.value}>\n                    {opt.value}\n                  </option>\n                ))\n              : children}\n          </SelectChildren>\n        </div>\n        {error ? <InputHelpBlock text={error} /> : null}\n      </div>\n    );\n  }\n);\n"],"names":["isOption","element","type","isOptGroup","SelectChildren","children","handleOptionClick","isSelected","React","Children","map","child","idx","isValidElement","a","key","onClick","e","props","value","className","ac","disabled","div","label","collectDisplays","t","forEach","push","display","flat","EditableSelect","forwardRef","compressed","prompt","inline","error","onChange","initialValue","undefined","editable","multi","displayValues","divRef","options","onSelect","onDeselect","input","inputRef","isOpen","setOpen","useState","setValue","ref","useRef","useMemo","handleClick","useCallback","newState","useEffect","onOutsideClick","target","Node","current","contains","document","addEventListener","removeEventListener","_e","newValue","added","curr","includes","filter","v","concat","r","call","checkValue","Array","isArray","Error","useMergeRefs","InputChips","placeholder","length","readOnly","onChipRemove","val","_v","i","d","noInput","outerWrap","autoComplete","persist","find","el","htmlFor","id","opt","option","InputHelpBlock","text"],"mappings":";;;;;;AAAA,SAAA,QAAA,GAAA;;;;;;;;;;;;;;AAuBA,SAASA,QAAAA,CACPC,OAA8B,EACkB;IAChD,OAAOA,OAAAA,CAAQC,IAAI,KAAK,QAAA,CAAA;AAC1B,CAAA;AAEA,SAASC,UAAAA,CACPF,OAA8B,EACoB;IAClD,OAAOA,OAAAA,CAAQC,IAAI,KAAK,UAAA,CAAA;AAC1B,CAAA;AAEA,MAAME,iBAAiB,CAAC,EAAEC,WAAUC,iBAAAA,GAAmBC,UAAU,GAAE,GACjEC,KAAAA,CAAMC,QAAQ,CAACC,GAAG,CAACL,QAAU,EAAA,CAACM,OAAOC,GAAQ,GAAA;QAC3C,IAAI,eAACC,cAAeF,CAAAA,KAAAA,CAAAA,EAAQ,OAAOA,KAAAA,CAAAA;QAEnC,IAAIX,QAAAA,CAASW,KACX,CAAA,EAAA,qBACE,KAACG,CAAAA,aAAAA,CAAAA,GAAAA,EAAAA;YACCC,GAAKH,EAAAA,GAAAA;AACLI,YAAAA,OAAAA,EAAS,CAACC,CAAMX,GAAAA,iBAAAA,CAAkBW,GAAGN,KAAMO,CAAAA,KAAK,CAACC,KAAK,CAAA;AACtDC,YAAAA,SAAAA,EAAW,CAAC,EAAEC,WAAAA,CAAGd,WAAWI,KAAMO,CAAAA,KAAK,CAACC,KAAK,CAAA,EAAG,UAAY,CAAA,CAAA,EAAEE,YAC5DV,KAAMO,CAAAA,KAAK,CAACI,QAAQ,EACpB,YACA,CAAC;WAEFX,KAAMO,CAAAA,KAAK,CAACb,QAAQ,CAAA,CAAA;QAI3B,IAAIF,UAAAA,CAAWQ,KACb,CAAA,EAAA,qBACE,KAACY,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;YAAIR,GAAKH,EAAAA,GAAAA;YAAKQ,SAAU,EAAA,iBAAA;yBACvB,KAACG,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;YAAIH,SAAU,EAAA,wBAAA;AAA0BT,SAAAA,EAAAA,KAAAA,CAAMO,KAAK,CAACM,KAAK,CAAA,gBAC1D,KAACpB,CAAAA,aAAAA,CAAAA,cAAAA,EAAAA;YACCE,iBAAmBA,EAAAA,iBAAAA;YACnBC,UAAYA,EAAAA,UAAAA;WAEXI,KAAMO,CAAAA,KAAK,CAACb,QAAQ,CAAA,CAAA,CAAA;QAK7B,OAAOM,KAAAA,CAAAA;AACT,KAAA,CAAA,CAAA;AAwCF,MAAMc,eAAAA,GAAkB,CAACpB,QAAmC,GAAA;AAC1D,IAAA,MAAMqB,IAAI,EAAE,CAAA;AACZlB,IAAAA,KAAAA,CAAMC,QAAQ,CAACkB,OAAO,CAACtB,QAAAA,EAAU,CAACM,KAAU,GAAA;AAC1C,QAAA,IAAI,eAACE,cAAAA,CAAeF,KAAQ,CAAA,EAAA,OAAO,IAAI,CAAA;AACvC,QAAA,IAAIX,SAASW,KAAQ,CAAA,EAAA;AACnBe,YAAAA,CAAAA,CAAEE,IAAI,CAAC;gBACLC,OAASlB,EAAAA,KAAAA,CAAMO,KAAK,CAACb,QAAQ;gBAC7Bc,KAAOR,EAAAA,KAAAA,CAAMO,KAAK,CAACC,KAAK;AAC1B,aAAA,CAAA,CAAA;SACD;QACD,IAAIhB,UAAAA,CAAWQ,QAAQe,CAAEE,CAAAA,IAAI,CAACH,eAAgBd,CAAAA,KAAAA,CAAMO,KAAK,CAACb,QAAQ,CAAA,CAAA,CAAA;AACpE,KAAA,CAAA,CAAA;AACA,IAAA,OAAOqB,EAAEI,IAAI,EAAA,CAAA;AACf,CAAA,CAAA;AAEaC,MAAAA,cAAAA,iBAA8CC,UAIzD,CAAA,CACE,EACEC,UAAa,EAAA,KAAK,GAClBC,MAAS,EAAA,kBAAA,GACTC,MAAAA,EAAS,KAAK,GACdjC,IAAO,EAAA,MAAA,GACPG,QAAAA,GACAmB,KAAAA,EAAQ,IAAI,GACZY,KAAQ,EAAA,IAAI,GACZC,QAAW,EAAA,IAAI,GACflB,KAAAA,EAAOmB,YAAeC,GAAAA,SAAS,GAC/BC,QAAW,EAAA,KAAK,GAChBC,KAAAA,EAAQ,KAAK,GACbC,aAAAA,EAAgB,KAAK,GACrBpB,QAAQ,GACRF,SAAS,GACTuB,MAAM,GACNC,OAAO,GACPC,UAAW,IAAI,GACfC,UAAAA,EAAa,IAAI,GACjB,GAAGC,KAAAA,EACJ,EACDC,QACG,GAAA;;AACH,IAAA,MAAM,CAACC,MAAAA,EAAQC,OAAQ,CAAA,GAAGC,SAAkB,KAAK,CAAA,CAAA;AACjD,IAAA,MAAM,CAAChC,KAAAA,EAAOiC,QAAS,CAAA,GAAGD,QAASb,CAAAA,YAAAA,CAAAA,CAAAA;AACnC,IAAA,MAAMe,OAAMC,MAAuBf,CAAAA,SAAAA,CAAAA,CAAAA;AAEnC,IAAA,MAAMV,OAAU0B,GAAAA,OAAAA,CAAQ,IAAM9B,eAAAA,CAAgBpB,QAAW,CAAA,EAAA;AAACA,QAAAA,QAAAA;AAAS,KAAA,CAAA,CAAA;AAEnE,IAAA,MAAMmD,WAAcC,GAAAA,WAAAA,CAClB,CAACC,QAAAA,GAAW,IAAI,GAAK;AACnB,QAAA,IAAIpC,QAAU,EAAA,OAAA;QACd4B,OAAQQ,CAAAA,QAAAA,CAAAA,CAAAA;KAEV,EAAA;AAACpC,QAAAA,QAAAA;AAAS,KAAA,CAAA,CAAA;AAGZqC,IAAAA,SAAAA,CAAU,IAAM;AACd,QAAA,IAAIV,MAAQ,EAAA;YACV,MAAMW,cAAAA,GAAiB,CAAC3C,CAAkB,GAAA;;AAExC,gBAAA,IAAI,EAAEA,CAAAA,CAAE4C,MAAM,YAAYC,IAAG,CAAM,IAAA,EAACT,IAAAA,KAAAA,IAAAA,IAAAA,kBAAAA,KAAAA,CAAAA,GAAAA,IAAKU,CAAAA,OAAO,CAAE,EAAA,OAAA;gBAClD,IAAIV,IAAAA,CAAIU,OAAO,IAAIV,IAAIU,CAAAA,OAAO,CAACC,QAAQ,CAAC/C,CAAE4C,CAAAA,MAAM,CAAG,EAAA,OAAA;gBAEnD,IAAIR,IAAAA,CAAIU,OAAO,IAAI,CAACV,IAAAA,CAAIU,OAAO,CAACC,QAAQ,CAAC/C,CAAE4C,CAAAA,MAAM,CAAG,EAAA;AAClDL,oBAAAA,WAAAA,CAAY,KAAK,CAAA,CAAA;iBAClB;AACH,aAAA,CAAA;AAEAS,YAAAA,QAAAA,CAASC,gBAAgB,CAAC,OAASN,EAAAA,cAAAA,EAAgB,IAAI,CAAA,CAAA;AACvD,YAAA,OAAO,IACLK,QAASE,CAAAA,mBAAmB,CAAC,OAAA,EAASP,gBAAgB,IAAI,CAAA,CAAA;SAC7D;KACA,EAAA;AAACX,QAAAA,MAAAA;AAAQO,QAAAA,WAAAA;AAAY,KAAA,CAAA,CAAA;AAExB,IAAA,MAAMlD,iBAAoBmD,GAAAA,WAAAA,CACxB,CAACW,EAAAA,EAAIC,QAAa,GAAA;AAChB,QAAA,IAAI5B,KAAO,EAAA;AAQE6B,YAAAA,IAAAA,GAAAA,CAAAA;AAPX,YAAA,IAAIA,QAAQ,IAAI,CAAA;AAChBlB,YAAAA,QAAAA,CAAS,CAACmB,IAAS,GAAA;AACjB,gBAAA,IAAIA,iBAAAA,IAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,IAAAA,IAAMC,CAAAA,QAAQ,CAACH,QAAW,CAAA,EAAA;AAC5BC,oBAAAA,KAAAA,GAAQ,KAAK,CAAA;AACb,oBAAA,OAAOC,IAAKE,CAAAA,MAAM,CAAC,CAACC,IAAMA,CAAML,KAAAA,QAAAA,CAAAA,CAAAA;iBAC3B,MAAA,OAAO,CAACE,IAAAA,IAAQ,EAAE,EAAEI,MAAM,CAACN,QAAAA,CAAAA,CAAAA;AACpC,aAAA,CAAA,CAAA;AACA,YAAA,MAAMO,CAAI,GAAA,CAACN,GAAAA,GAAAA,KAAAA,GAAQzB,QAAWC,GAAAA,UAAU,MAA7BwB,IAAAA,IAAAA,GAAAA,KAAAA,KAAAA,CAAAA,GAAD,KAAA,CAAA,GAAA,GAACA,CAAgCO,KAAKtC,SAAW8B,EAAAA,QAAAA,CAAAA,CAAAA;YAC3D,IAAI,OAAOO,MAAM,UAAYA,EAAAA,CAAAA,EAAAA,CAAAA;SACxB,MAAA;YACLxB,QAASiB,CAAAA,QAAAA,CAAAA,CAAAA;SACV;QACD,IAAI,CAAC5B,KAAOe,EAAAA,WAAAA,CAAY,KAAK,CAAA,CAAA;KAE/B,EAAA;AAACA,QAAAA,WAAAA;AAAaf,QAAAA,KAAAA;AAAOI,QAAAA,QAAAA;AAAUC,QAAAA,UAAAA;AAAW,KAAA,CAAA,CAAA;AAG5C,IAAA,MAAMvC,aAAa,CAACuE,UAAAA,GAAAA;QAClBrC,OAAAA,KAAAA,GAAQtB,KAAAA,KAAAA,IAAAA,IAAAA,KAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAOqD,QAAQ,CAACM,UAAc3D,CAAAA,GAAAA,KAAAA,KAAU2D,UAAU,CAAA;;AAE5DnB,IAAAA,SAAAA,CAAU,IAAM;QACdP,QAASd,CAAAA,YAAAA,CAAAA,CAAAA;KACR,EAAA;AAACA,QAAAA,YAAAA;AAAa,KAAA,CAAA,CAAA;AAEjBqB,IAAAA,SAAAA,CAAU,IAAM;QACd,IAAIlB,KAAAA,IAASH,gBAAgB,CAACyC,KAAAA,CAAMC,OAAO,CAAC1C,YAAAA,CAAAA,EAC1C,MAAM2C,KAAAA,CAAM,oDAAsD,CAAA,CAAA;KACnE,EAAA;AAACxC,QAAAA,KAAAA;AAAOH,QAAAA,YAAAA;AAAa,KAAA,CAAA,CAAA;AAExBqB,IAAAA,SAAAA,CAAU,IAAM;QACd,IAAI,OAAOtB,QAAa,KAAA,UAAA,EAAYA,QAASlB,CAAAA,KAAAA,CAAAA,CAAAA;KAC5C,EAAA;AAACA,QAAAA,KAAAA;AAAM,KAAA,CAAA,CAAA;AAEV,IAAA,qBACE,KAACI,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;QACCH,SAAW,EAAA,CAAC,mBAAmB,EAAEC,WAC/BY,CAAAA,UAAAA,EACA,qBACA,EAAEZ,WAAAA,CAAG4B,MAAQ,EAAA,QAAA,CAAA,CAAU,EAAE5B,WAAAA,CAAGc,QAAQ,oBAAsB,CAAA,CAAA,EAAEd,WAC5De,CAAAA,KAAAA,EACA,mBACA,CAAA,CAAA,EAAEf,WAAGC,CAAAA,QAAAA,EAAU,UAAY,CAAA,CAAA,EAAED,WAAGD,CAAAA,SAAAA,CAAAA,CAAW,CAAC;AAC9CiC,QAAAA,GAAAA,EAAK6B,YAAa,CAAA;AAAC7B,YAAAA,IAAAA;AAAKV,YAAAA,MAAAA;AAAO,SAAA,CAAA;AAE9BF,KAAAA,EAAAA,KAAAA,iBACC,KAAC0C,CAAAA,aAAAA,CAAAA,UAAAA,EAAAA,QAAAA,CAAAA;QACC/D,SAAU,EAAA,iBAAA;QACVI,KAAOA,EAAAA,KAAAA;AACHuB,KAAAA,EAAAA,KAAAA,EAAAA;AACJqC,QAAAA,WAAAA,EACE,CAACL,KAAAA,CAAMC,OAAO,CAAC7D,KAAU,CAAA,IAAA,CAACA,KAAMkE,CAAAA,MAAM,GAClCtC,KAAAA,CAAMqC,WAAW,IAAIlD,SACrB,EAAE;AAERoD,QAAAA,QAAAA,EAAU,CAAC9C,QAAAA;QACXxB,OAAS,EAAA,IAAMwC,YAAY,IAAI,CAAA;AAC/BnB,QAAAA,QAAAA,EAAU,IAAM,KAAK,CAAA;AACrBkD,QAAAA,YAAAA,EAAc,CAAC3E,GAAQ,GAAA;YACrB,IAAI4E,GAAAA,CAAAA;AACJpC,YAAAA,QAAAA,CAAS,CAACmB,IAAgB,GAAA;gBACxBiB,GAAMjB,GAAAA,IAAI,CAAC3D,GAAI,CAAA,CAAA;AACf,gBAAA,OAAO2D,KAAKE,MAAM,CAAC,CAACgB,EAAAA,EAAIC,IAAMA,CAAM9E,KAAAA,GAAAA,CAAAA,CAAAA;AACtC,aAAA,CAAA,CAAA;YACA,IAAI,OAAOkC,UAAe,KAAA,UAAA,EAAYA,UAAW0C,CAAAA,GAAAA,CAAAA,CAAAA;AACnD,SAAA;AACArE,QAAAA,KAAAA,EACEuB,aACIvB,GAAAA,KAAAA,GACAU,OACG4C,CAAAA,MAAM,CAAC,CAACkB,CAAAA,GAAAA;YAAMxE,OAAAA,KAAAA,KAAAA,IAAAA,IAAAA,mBAAAA,KAAAA,CAAAA,GAAAA,MAAOqD,QAAQ,CAACmB,EAAExE,KAAK,CAAA,CAAA;AACrCT,SAAAA,CAAAA,CAAAA,GAAG,CAAC,CAACiF,CAAMA,GAAAA,CAAAA,CAAE9D,OAAO,CAAC;QAE9B+D,OACEzD,EAAAA,MAAAA,IAAU,CAACK,QAAYuC,IAAAA,KAAAA,CAAMC,OAAO,CAAC7D,KAAAA,CAAAA,IAAUA,KAAMkE,CAAAA,MAAM,GAAG,CAAA;AAEhEQ,QAAAA,SAAAA,EAAW,KAAK;QAChBxC,GAAKL,EAAAA,QAAAA;wBAGP,KAACzB,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;QACCH,SAAU,EAAA,kCAAA;QACVJ,OAAS,EAAA,IAAMwC,YAAY,IAAI,CAAA;qBAE/B,KAACT,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA,QAAAA,CAAAA;QACC7C,IAAMA,EAAAA,IAAAA;QACNkF,WAAarC,EAAAA,KAAAA,CAAMqC,WAAW,IAAIlD,MAAAA;QAClC4D,YAAa,EAAA,KAAA;AACbR,QAAAA,QAAAA,EAAU,CAAC9C,QAAAA;AACPO,KAAAA,EAAAA,KAAAA,EAAAA;AACJV,QAAAA,QAAAA,EAAU,CAACpB,CAAqC,GAAA;AAC9C,YAAA,IAAI,CAACuB,QAAU,EAAA,OAAA;AACfvB,YAAAA,CAAAA,CAAE8E,OAAO,EAAA,CAAA;YACT3C,QAASnC,CAAAA,CAAAA,CAAE4C,MAAM,CAAC1C,KAAK,CAAA,CAAA;AACzB,SAAA;QACAA,KACEqB,EAAAA,QAAAA,GACIrB,KAAS,IAAA,EAAA,GACT,CAACuB,aAAAA,GACDb,CAAAA,CAAAA,GAAAA,GAAAA,OAAAA,KAAAA,IAAAA,IAAAA,OAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAASmE,CAAAA,IAAI,CAAC,CAACC,EAAAA,GAAOA,EAAG9E,CAAAA,KAAK,KAAKA,KAAAA,CAAAA,MAAAA,IAAAA,IAAAA,GAAAA,KAAAA,KAAAA,CAAAA,GAAnCU,KAAAA,CAAAA,GAAAA,GAAAA,CAA2CA,OAAM,KAAK,EAAA,GACtDV,KAAK;QAEXkC,GAAKL,EAAAA,QAAAA;AAENxB,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,iBAAQ,KAACA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA;AAAM0E,QAAAA,OAAAA,EAASnD,MAAMoD,EAAE;OAAG3E,KAAiB,CAAA,GAAA,IAAI,CAE5D,gBACD,KAACD,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA;QAAIH,SAAU,EAAA,gBAAA;qBACb,KAAChB,CAAAA,aAAAA,CAAAA,cAAAA,EAAAA;QACCE,iBAAmBA,EAAAA,iBAAAA;QACnBC,UAAYA,EAAAA,UAAAA;AAEXqC,KAAAA,EAAAA,OAAAA,GACGA,QAAQlC,GAAG,CAAC,CAAC0F,GAAAA,EAAKxF,oBAChB,KAACyF,CAAAA,aAAAA,CAAAA,QAAAA,EAAAA;YAAOtF,GAAKH,EAAAA,GAAAA;AAAKO,YAAAA,KAAAA,EAAOiF,IAAIjF,KAAK;AAC/BiF,SAAAA,EAAAA,GAAAA,CAAIjF,KAAK,CAAA,CAAA,GAGdd,QAAQ,CAAA,CAAA,EAGf+B,sBAAQ,KAACkE,CAAAA,aAAAA,CAAAA,cAAAA,EAAAA;QAAeC,IAAMnE,EAAAA,KAAAA;SAAY,IAAI,CAAA,CAAA;AAGrD,CACA;;;;"}